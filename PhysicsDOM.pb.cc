// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PhysicsDOM.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PhysicsDOM.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CreateDOM {
class Vec3DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Vec3>
     _instance;
} _Vec3_default_instance_;
class QuatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Quat>
     _instance;
} _Quat_default_instance_;
class PlaneDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Plane>
     _instance;
} _Plane_default_instance_;
class PoseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Pose>
     _instance;
} _Pose_default_instance_;
class Bounds3DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Bounds3>
     _instance;
} _Bounds3_default_instance_;
class VisualBindingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VisualBinding>
     _instance;
} _VisualBinding_default_instance_;
class KeyValuePairDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KeyValuePair>
     _instance;
} _KeyValuePair_default_instance_;
class AdditionalPropertiesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AdditionalProperties>
     _instance;
} _AdditionalProperties_default_instance_;
class NodeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Node>
     _instance;
  const ::CreateDOM::PhysicsMaterial* physicsmaterial_;
  const ::CreateDOM::ConvexHull* convexhull_;
  const ::CreateDOM::TriangleMesh* trianglemesh_;
  const ::CreateDOM::HeightField* heightfield_;
  const ::CreateDOM::RigidBody* rigidbody_;
  const ::CreateDOM::Joint* joint_;
  const ::CreateDOM::BodyPairFilters* bodypairfilters_;
  const ::CreateDOM::InstanceCollection* instancecollection_;
  const ::CreateDOM::Collection* collection_;
  const ::CreateDOM::Scene* scene_;
} _Node_default_instance_;
class MeshScaleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MeshScale>
     _instance;
} _MeshScale_default_instance_;
class PhysicsMaterialDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PhysicsMaterial>
     _instance;
} _PhysicsMaterial_default_instance_;
class ConvexHullDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConvexHull>
     _instance;
} _ConvexHull_default_instance_;
class TriangleMeshDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TriangleMesh>
     _instance;
} _TriangleMesh_default_instance_;
class HeightFieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HeightField>
     _instance;
} _HeightField_default_instance_;
class GeometryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Geometry>
     _instance;
  const ::CreateDOM::BoxGeometry* boxgeometry_;
  const ::CreateDOM::SphereGeometry* spheregeometry_;
  const ::CreateDOM::CapsuleGeometry* capsulegeometry_;
  const ::CreateDOM::CylinderGeometry* cylindergeometry_;
  const ::CreateDOM::ConvexHullGeometry* convexhullgeometry_;
  const ::CreateDOM::TriangleMeshGeometry* trianglemeshgeometry_;
  const ::CreateDOM::HeightFieldGeometry* heightfieldgeometry_;
  const ::CreateDOM::PlaneGeometry* planegeometry_;
} _Geometry_default_instance_;
class BoxGeometryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BoxGeometry>
     _instance;
} _BoxGeometry_default_instance_;
class SphereGeometryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SphereGeometry>
     _instance;
} _SphereGeometry_default_instance_;
class CapsuleGeometryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CapsuleGeometry>
     _instance;
} _CapsuleGeometry_default_instance_;
class CylinderGeometryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CylinderGeometry>
     _instance;
} _CylinderGeometry_default_instance_;
class ConvexHullGeometryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConvexHullGeometry>
     _instance;
} _ConvexHullGeometry_default_instance_;
class TriangleMeshGeometryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TriangleMeshGeometry>
     _instance;
} _TriangleMeshGeometry_default_instance_;
class HeightFieldGeometryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HeightFieldGeometry>
     _instance;
} _HeightFieldGeometry_default_instance_;
class PlaneGeometryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlaneGeometry>
     _instance;
} _PlaneGeometry_default_instance_;
class GeometryInstanceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GeometryInstance>
     _instance;
} _GeometryInstance_default_instance_;
class RigidBodyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RigidBody>
     _instance;
  const ::CreateDOM::RigidStatic* rigidstatic_;
  const ::CreateDOM::RigidDynamic* rigiddynamic_;
} _RigidBody_default_instance_;
class RigidStaticDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RigidStatic>
     _instance;
} _RigidStatic_default_instance_;
class RigidDynamicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RigidDynamic>
     _instance;
} _RigidDynamic_default_instance_;
class JointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Joint>
     _instance;
  const ::CreateDOM::FixedJoint* fixedjoint_;
  const ::CreateDOM::SphericalJoint* sphericaljoint_;
  const ::CreateDOM::HingeJoint* hingejoint_;
  const ::CreateDOM::PrismaticJoint* prismaticjoint_;
  const ::CreateDOM::DistanceJoint* distancejoint_;
  const ::CreateDOM::BallAndSocketJoint* ballandsocketjoint_;
  const ::CreateDOM::D6Joint* d6joint_;
} _Joint_default_instance_;
class FixedJointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FixedJoint>
     _instance;
} _FixedJoint_default_instance_;
class SphericalJointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SphericalJoint>
     _instance;
} _SphericalJoint_default_instance_;
class HingeJointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HingeJoint>
     _instance;
} _HingeJoint_default_instance_;
class PrismaticJointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PrismaticJoint>
     _instance;
} _PrismaticJoint_default_instance_;
class DistanceJointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DistanceJoint>
     _instance;
} _DistanceJoint_default_instance_;
class BallAndSocketJointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BallAndSocketJoint>
     _instance;
} _BallAndSocketJoint_default_instance_;
class D6JointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<D6Joint>
     _instance;
} _D6Joint_default_instance_;
class BodyPairFilterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BodyPairFilter>
     _instance;
} _BodyPairFilter_default_instance_;
class BodyPairFiltersDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BodyPairFilters>
     _instance;
} _BodyPairFilters_default_instance_;
class InstanceCollectionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InstanceCollection>
     _instance;
} _InstanceCollection_default_instance_;
class CollectionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Collection>
     _instance;
} _Collection_default_instance_;
class SceneDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Scene>
     _instance;
} _Scene_default_instance_;
class PhysicsDOMDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PhysicsDOM>
     _instance;
} _PhysicsDOM_default_instance_;

namespace protobuf_PhysicsDOM_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[41];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quat, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quat, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quat, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quat, w_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, d_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, q_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, p_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bounds3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bounds3, bmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bounds3, bmax_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualBinding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualBinding, visualname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualBinding, localpose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualBinding, localscale_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalProperties, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalProperties, keyvaluepairs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, visual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, additionalproperties_),
  offsetof(NodeDefaultTypeInternal, physicsmaterial_),
  offsetof(NodeDefaultTypeInternal, convexhull_),
  offsetof(NodeDefaultTypeInternal, trianglemesh_),
  offsetof(NodeDefaultTypeInternal, heightfield_),
  offsetof(NodeDefaultTypeInternal, rigidbody_),
  offsetof(NodeDefaultTypeInternal, joint_),
  offsetof(NodeDefaultTypeInternal, bodypairfilters_),
  offsetof(NodeDefaultTypeInternal, instancecollection_),
  offsetof(NodeDefaultTypeInternal, collection_),
  offsetof(NodeDefaultTypeInternal, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, subtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshScale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshScale, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshScale, rotation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicsMaterial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicsMaterial, disablefriction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicsMaterial, disablestrongfriction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicsMaterial, dynamicfriction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicsMaterial, staticfriction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicsMaterial, restitution_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvexHull, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvexHull, points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangleMesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangleMesh, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangleMesh, triangles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangleMesh, materialindices_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightField, rowcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightField, columncount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightField, samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightField, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, type_),
  offsetof(GeometryDefaultTypeInternal, boxgeometry_),
  offsetof(GeometryDefaultTypeInternal, spheregeometry_),
  offsetof(GeometryDefaultTypeInternal, capsulegeometry_),
  offsetof(GeometryDefaultTypeInternal, cylindergeometry_),
  offsetof(GeometryDefaultTypeInternal, convexhullgeometry_),
  offsetof(GeometryDefaultTypeInternal, trianglemeshgeometry_),
  offsetof(GeometryDefaultTypeInternal, heightfieldgeometry_),
  offsetof(GeometryDefaultTypeInternal, planegeometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, subtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxGeometry, dimensions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphereGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphereGeometry, radius_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapsuleGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapsuleGeometry, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapsuleGeometry, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderGeometry, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CylinderGeometry, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvexHullGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvexHullGeometry, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvexHullGeometry, convexmesh_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangleMeshGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangleMeshGeometry, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangleMeshGeometry, trianglemesh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangleMeshGeometry, doublesided_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightFieldGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightFieldGeometry, heightfield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightFieldGeometry, heightscale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightFieldGeometry, rowscale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightFieldGeometry, columnscale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightFieldGeometry, doublesided_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryInstance, geometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryInstance, materials_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryInstance, localpose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryInstance, collisionfiltersettings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidBody, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidBody, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidBody, geometryinstances_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidBody, globalpose_),
  offsetof(RigidBodyDefaultTypeInternal, rigidstatic_),
  offsetof(RigidBodyDefaultTypeInternal, rigiddynamic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidBody, subtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidStatic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidDynamic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidDynamic, disablegravity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidDynamic, centerofmasslocalpose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidDynamic, mass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidDynamic, massspaceinertiatensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidDynamic, linearvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidDynamic, angularvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidDynamic, lineardamping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidDynamic, angulardamping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidDynamic, maxangularvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidDynamic, kinematic_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, body0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, body1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, localpose0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, localpose1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, collisionenabled_),
  offsetof(JointDefaultTypeInternal, fixedjoint_),
  offsetof(JointDefaultTypeInternal, sphericaljoint_),
  offsetof(JointDefaultTypeInternal, hingejoint_),
  offsetof(JointDefaultTypeInternal, prismaticjoint_),
  offsetof(JointDefaultTypeInternal, distancejoint_),
  offsetof(JointDefaultTypeInternal, ballandsocketjoint_),
  offsetof(JointDefaultTypeInternal, d6joint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, subtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedJoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphericalJoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphericalJoint, limity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphericalJoint, limitz_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeJoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeJoint, limtlow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeJoint, limithigh_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrismaticJoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrismaticJoint, limitlow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrismaticJoint, limithigh_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceJoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceJoint, distancelow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceJoint, distancehigh_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallAndSocketJoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallAndSocketJoint, limitxlow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallAndSocketJoint, limitxhigh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallAndSocketJoint, limity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallAndSocketJoint, limitz_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(D6Joint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPairFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPairFilter, bodya_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPairFilter, bodyb_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPairFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPairFilters, bodypairs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCollection, collection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCollection, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCollection, scale_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collection, nodes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, gravity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, nodes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicsDOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicsDOM, collections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicsDOM, scenes_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Vec3)},
  { 8, -1, sizeof(Quat)},
  { 17, -1, sizeof(Plane)},
  { 24, -1, sizeof(Pose)},
  { 31, -1, sizeof(Bounds3)},
  { 38, -1, sizeof(VisualBinding)},
  { 46, -1, sizeof(KeyValuePair)},
  { 53, -1, sizeof(AdditionalProperties)},
  { 60, -1, sizeof(Node)},
  { 81, -1, sizeof(MeshScale)},
  { 88, -1, sizeof(PhysicsMaterial)},
  { 98, -1, sizeof(ConvexHull)},
  { 104, -1, sizeof(TriangleMesh)},
  { 112, -1, sizeof(HeightField)},
  { 121, -1, sizeof(Geometry)},
  { 136, -1, sizeof(BoxGeometry)},
  { 142, -1, sizeof(SphereGeometry)},
  { 148, -1, sizeof(CapsuleGeometry)},
  { 155, -1, sizeof(CylinderGeometry)},
  { 162, -1, sizeof(ConvexHullGeometry)},
  { 169, -1, sizeof(TriangleMeshGeometry)},
  { 177, -1, sizeof(HeightFieldGeometry)},
  { 187, -1, sizeof(PlaneGeometry)},
  { 192, -1, sizeof(GeometryInstance)},
  { 201, -1, sizeof(RigidBody)},
  { 211, -1, sizeof(RigidStatic)},
  { 216, -1, sizeof(RigidDynamic)},
  { 231, -1, sizeof(Joint)},
  { 249, -1, sizeof(FixedJoint)},
  { 254, -1, sizeof(SphericalJoint)},
  { 261, -1, sizeof(HingeJoint)},
  { 268, -1, sizeof(PrismaticJoint)},
  { 275, -1, sizeof(DistanceJoint)},
  { 282, -1, sizeof(BallAndSocketJoint)},
  { 291, -1, sizeof(D6Joint)},
  { 296, -1, sizeof(BodyPairFilter)},
  { 303, -1, sizeof(BodyPairFilters)},
  { 309, -1, sizeof(InstanceCollection)},
  { 317, -1, sizeof(Collection)},
  { 323, -1, sizeof(Scene)},
  { 330, -1, sizeof(PhysicsDOM)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vec3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Quat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Plane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Bounds3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VisualBinding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyValuePair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AdditionalProperties_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MeshScale_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PhysicsMaterial_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConvexHull_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TriangleMesh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeightField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Geometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BoxGeometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SphereGeometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CapsuleGeometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CylinderGeometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConvexHullGeometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TriangleMeshGeometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeightFieldGeometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlaneGeometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GeometryInstance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RigidBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RigidStatic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RigidDynamic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Joint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FixedJoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SphericalJoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HingeJoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PrismaticJoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DistanceJoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BallAndSocketJoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_D6Joint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BodyPairFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BodyPairFilters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InstanceCollection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Collection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Scene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PhysicsDOM_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "PhysicsDOM.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 41);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Vec3_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Vec3_default_instance_);_Quat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Quat_default_instance_);_Plane_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Plane_default_instance_);_Pose_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Pose_default_instance_);_Bounds3_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Bounds3_default_instance_);_VisualBinding_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VisualBinding_default_instance_);_KeyValuePair_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KeyValuePair_default_instance_);_AdditionalProperties_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AdditionalProperties_default_instance_);_Node_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Node_default_instance_);_MeshScale_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MeshScale_default_instance_);_PhysicsMaterial_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PhysicsMaterial_default_instance_);_ConvexHull_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConvexHull_default_instance_);_TriangleMesh_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TriangleMesh_default_instance_);_HeightField_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HeightField_default_instance_);_Geometry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Geometry_default_instance_);_BoxGeometry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BoxGeometry_default_instance_);_SphereGeometry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SphereGeometry_default_instance_);_CapsuleGeometry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CapsuleGeometry_default_instance_);_CylinderGeometry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CylinderGeometry_default_instance_);_ConvexHullGeometry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConvexHullGeometry_default_instance_);_TriangleMeshGeometry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TriangleMeshGeometry_default_instance_);_HeightFieldGeometry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HeightFieldGeometry_default_instance_);_PlaneGeometry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlaneGeometry_default_instance_);_GeometryInstance_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GeometryInstance_default_instance_);_RigidBody_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RigidBody_default_instance_);_RigidStatic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RigidStatic_default_instance_);_RigidDynamic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RigidDynamic_default_instance_);_Joint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Joint_default_instance_);_FixedJoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FixedJoint_default_instance_);_SphericalJoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SphericalJoint_default_instance_);_HingeJoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HingeJoint_default_instance_);_PrismaticJoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PrismaticJoint_default_instance_);_DistanceJoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DistanceJoint_default_instance_);_BallAndSocketJoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BallAndSocketJoint_default_instance_);_D6Joint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_D6Joint_default_instance_);_BodyPairFilter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BodyPairFilter_default_instance_);_BodyPairFilters_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BodyPairFilters_default_instance_);_InstanceCollection_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InstanceCollection_default_instance_);_Collection_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Collection_default_instance_);_Scene_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Scene_default_instance_);_PhysicsDOM_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PhysicsDOM_default_instance_);_Plane_default_instance_._instance.get_mutable()->n_ = const_cast< ::CreateDOM::Vec3*>(
      ::CreateDOM::Vec3::internal_default_instance());
  _Pose_default_instance_._instance.get_mutable()->q_ = const_cast< ::CreateDOM::Quat*>(
      ::CreateDOM::Quat::internal_default_instance());
  _Pose_default_instance_._instance.get_mutable()->p_ = const_cast< ::CreateDOM::Vec3*>(
      ::CreateDOM::Vec3::internal_default_instance());
  _Bounds3_default_instance_._instance.get_mutable()->bmin_ = const_cast< ::CreateDOM::Vec3*>(
      ::CreateDOM::Vec3::internal_default_instance());
  _Bounds3_default_instance_._instance.get_mutable()->bmax_ = const_cast< ::CreateDOM::Vec3*>(
      ::CreateDOM::Vec3::internal_default_instance());
  _VisualBinding_default_instance_._instance.get_mutable()->localpose_ = const_cast< ::CreateDOM::Pose*>(
      ::CreateDOM::Pose::internal_default_instance());
  _VisualBinding_default_instance_._instance.get_mutable()->localscale_ = const_cast< ::CreateDOM::Vec3*>(
      ::CreateDOM::Vec3::internal_default_instance());
  _Node_default_instance_._instance.get_mutable()->visual_ = const_cast< ::CreateDOM::VisualBinding*>(
      ::CreateDOM::VisualBinding::internal_default_instance());
  _Node_default_instance_.physicsmaterial_ = const_cast< ::CreateDOM::PhysicsMaterial*>(
      ::CreateDOM::PhysicsMaterial::internal_default_instance());
  _Node_default_instance_.convexhull_ = const_cast< ::CreateDOM::ConvexHull*>(
      ::CreateDOM::ConvexHull::internal_default_instance());
  _Node_default_instance_.trianglemesh_ = const_cast< ::CreateDOM::TriangleMesh*>(
      ::CreateDOM::TriangleMesh::internal_default_instance());
  _Node_default_instance_.heightfield_ = const_cast< ::CreateDOM::HeightField*>(
      ::CreateDOM::HeightField::internal_default_instance());
  _Node_default_instance_.rigidbody_ = const_cast< ::CreateDOM::RigidBody*>(
      ::CreateDOM::RigidBody::internal_default_instance());
  _Node_default_instance_.joint_ = const_cast< ::CreateDOM::Joint*>(
      ::CreateDOM::Joint::internal_default_instance());
  _Node_default_instance_.bodypairfilters_ = const_cast< ::CreateDOM::BodyPairFilters*>(
      ::CreateDOM::BodyPairFilters::internal_default_instance());
  _Node_default_instance_.instancecollection_ = const_cast< ::CreateDOM::InstanceCollection*>(
      ::CreateDOM::InstanceCollection::internal_default_instance());
  _Node_default_instance_.collection_ = const_cast< ::CreateDOM::Collection*>(
      ::CreateDOM::Collection::internal_default_instance());
  _Node_default_instance_.scene_ = const_cast< ::CreateDOM::Scene*>(
      ::CreateDOM::Scene::internal_default_instance());
  _MeshScale_default_instance_._instance.get_mutable()->scale_ = const_cast< ::CreateDOM::Vec3*>(
      ::CreateDOM::Vec3::internal_default_instance());
  _MeshScale_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::CreateDOM::Quat*>(
      ::CreateDOM::Quat::internal_default_instance());
  _Geometry_default_instance_.boxgeometry_ = const_cast< ::CreateDOM::BoxGeometry*>(
      ::CreateDOM::BoxGeometry::internal_default_instance());
  _Geometry_default_instance_.spheregeometry_ = const_cast< ::CreateDOM::SphereGeometry*>(
      ::CreateDOM::SphereGeometry::internal_default_instance());
  _Geometry_default_instance_.capsulegeometry_ = const_cast< ::CreateDOM::CapsuleGeometry*>(
      ::CreateDOM::CapsuleGeometry::internal_default_instance());
  _Geometry_default_instance_.cylindergeometry_ = const_cast< ::CreateDOM::CylinderGeometry*>(
      ::CreateDOM::CylinderGeometry::internal_default_instance());
  _Geometry_default_instance_.convexhullgeometry_ = const_cast< ::CreateDOM::ConvexHullGeometry*>(
      ::CreateDOM::ConvexHullGeometry::internal_default_instance());
  _Geometry_default_instance_.trianglemeshgeometry_ = const_cast< ::CreateDOM::TriangleMeshGeometry*>(
      ::CreateDOM::TriangleMeshGeometry::internal_default_instance());
  _Geometry_default_instance_.heightfieldgeometry_ = const_cast< ::CreateDOM::HeightFieldGeometry*>(
      ::CreateDOM::HeightFieldGeometry::internal_default_instance());
  _Geometry_default_instance_.planegeometry_ = const_cast< ::CreateDOM::PlaneGeometry*>(
      ::CreateDOM::PlaneGeometry::internal_default_instance());
  _BoxGeometry_default_instance_._instance.get_mutable()->dimensions_ = const_cast< ::CreateDOM::Vec3*>(
      ::CreateDOM::Vec3::internal_default_instance());
  _ConvexHullGeometry_default_instance_._instance.get_mutable()->scale_ = const_cast< ::CreateDOM::MeshScale*>(
      ::CreateDOM::MeshScale::internal_default_instance());
  _TriangleMeshGeometry_default_instance_._instance.get_mutable()->scale_ = const_cast< ::CreateDOM::MeshScale*>(
      ::CreateDOM::MeshScale::internal_default_instance());
  _GeometryInstance_default_instance_._instance.get_mutable()->geometry_ = const_cast< ::CreateDOM::Geometry*>(
      ::CreateDOM::Geometry::internal_default_instance());
  _GeometryInstance_default_instance_._instance.get_mutable()->localpose_ = const_cast< ::CreateDOM::Pose*>(
      ::CreateDOM::Pose::internal_default_instance());
  _RigidBody_default_instance_._instance.get_mutable()->globalpose_ = const_cast< ::CreateDOM::Pose*>(
      ::CreateDOM::Pose::internal_default_instance());
  _RigidBody_default_instance_.rigidstatic_ = const_cast< ::CreateDOM::RigidStatic*>(
      ::CreateDOM::RigidStatic::internal_default_instance());
  _RigidBody_default_instance_.rigiddynamic_ = const_cast< ::CreateDOM::RigidDynamic*>(
      ::CreateDOM::RigidDynamic::internal_default_instance());
  _RigidDynamic_default_instance_._instance.get_mutable()->centerofmasslocalpose_ = const_cast< ::CreateDOM::Pose*>(
      ::CreateDOM::Pose::internal_default_instance());
  _RigidDynamic_default_instance_._instance.get_mutable()->massspaceinertiatensor_ = const_cast< ::CreateDOM::Vec3*>(
      ::CreateDOM::Vec3::internal_default_instance());
  _RigidDynamic_default_instance_._instance.get_mutable()->linearvelocity_ = const_cast< ::CreateDOM::Vec3*>(
      ::CreateDOM::Vec3::internal_default_instance());
  _RigidDynamic_default_instance_._instance.get_mutable()->angularvelocity_ = const_cast< ::CreateDOM::Vec3*>(
      ::CreateDOM::Vec3::internal_default_instance());
  _Joint_default_instance_._instance.get_mutable()->localpose0_ = const_cast< ::CreateDOM::Pose*>(
      ::CreateDOM::Pose::internal_default_instance());
  _Joint_default_instance_._instance.get_mutable()->localpose1_ = const_cast< ::CreateDOM::Pose*>(
      ::CreateDOM::Pose::internal_default_instance());
  _Joint_default_instance_.fixedjoint_ = const_cast< ::CreateDOM::FixedJoint*>(
      ::CreateDOM::FixedJoint::internal_default_instance());
  _Joint_default_instance_.sphericaljoint_ = const_cast< ::CreateDOM::SphericalJoint*>(
      ::CreateDOM::SphericalJoint::internal_default_instance());
  _Joint_default_instance_.hingejoint_ = const_cast< ::CreateDOM::HingeJoint*>(
      ::CreateDOM::HingeJoint::internal_default_instance());
  _Joint_default_instance_.prismaticjoint_ = const_cast< ::CreateDOM::PrismaticJoint*>(
      ::CreateDOM::PrismaticJoint::internal_default_instance());
  _Joint_default_instance_.distancejoint_ = const_cast< ::CreateDOM::DistanceJoint*>(
      ::CreateDOM::DistanceJoint::internal_default_instance());
  _Joint_default_instance_.ballandsocketjoint_ = const_cast< ::CreateDOM::BallAndSocketJoint*>(
      ::CreateDOM::BallAndSocketJoint::internal_default_instance());
  _Joint_default_instance_.d6joint_ = const_cast< ::CreateDOM::D6Joint*>(
      ::CreateDOM::D6Joint::internal_default_instance());
  _InstanceCollection_default_instance_._instance.get_mutable()->pose_ = const_cast< ::CreateDOM::Pose*>(
      ::CreateDOM::Pose::internal_default_instance());
  _InstanceCollection_default_instance_._instance.get_mutable()->scale_ = const_cast< ::CreateDOM::Vec3*>(
      ::CreateDOM::Vec3::internal_default_instance());
  _Scene_default_instance_._instance.get_mutable()->gravity_ = const_cast< ::CreateDOM::Vec3*>(
      ::CreateDOM::Vec3::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020PhysicsDOM.proto\022\tCreateDOM\"\'\n\004Vec3\022\t\n"
      "\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"2\n\004Quat\022\t"
      "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001"
      "(\002\".\n\005Plane\022\032\n\001n\030\001 \001(\0132\017.CreateDOM.Vec3\022"
      "\t\n\001d\030\002 \001(\002\">\n\004Pose\022\032\n\001q\030\001 \001(\0132\017.CreateDO"
      "M.Quat\022\032\n\001p\030\002 \001(\0132\017.CreateDOM.Vec3\"G\n\007Bo"
      "unds3\022\035\n\004bmin\030\001 \001(\0132\017.CreateDOM.Vec3\022\035\n\004"
      "bmax\030\002 \001(\0132\017.CreateDOM.Vec3\"l\n\rVisualBin"
      "ding\022\022\n\nvisualName\030\001 \001(\t\022\"\n\tlocalPose\030\002 "
      "\001(\0132\017.CreateDOM.Pose\022#\n\nlocalScale\030\003 \001(\013"
      "2\017.CreateDOM.Vec3\"*\n\014KeyValuePair\022\013\n\003key"
      "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"X\n\024AdditionalPrope"
      "rties\022\020\n\010category\030\001 \001(\t\022.\n\rkeyValuePairs"
      "\030\002 \003(\0132\027.CreateDOM.KeyValuePair\"\215\005\n\004Node"
      "\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022!\n\004type\030\003 \001(\016"
      "2\023.CreateDOM.NodeType\022(\n\006visual\030\004 \001(\0132\030."
      "CreateDOM.VisualBinding\022=\n\024additionalPro"
      "perties\030\005 \003(\0132\037.CreateDOM.AdditionalProp"
      "erties\0225\n\017physicsMaterial\030\006 \001(\0132\032.Create"
      "DOM.PhysicsMaterialH\000\022+\n\nconvexHull\030\007 \001("
      "\0132\025.CreateDOM.ConvexHullH\000\022/\n\014triangleMe"
      "sh\030\010 \001(\0132\027.CreateDOM.TriangleMeshH\000\022-\n\013h"
      "eightField\030\t \001(\0132\026.CreateDOM.HeightField"
      "H\000\022)\n\trigidBody\030\n \001(\0132\024.CreateDOM.RigidB"
      "odyH\000\022!\n\005joint\030\013 \001(\0132\020.CreateDOM.JointH\000"
      "\0225\n\017bodyPairFilters\030\014 \001(\0132\032.CreateDOM.Bo"
      "dyPairFiltersH\000\022;\n\022instanceCollection\030\r "
      "\001(\0132\035.CreateDOM.InstanceCollectionH\000\022+\n\n"
      "collection\030\016 \001(\0132\025.CreateDOM.CollectionH"
      "\000\022!\n\005scene\030\017 \001(\0132\020.CreateDOM.SceneH\000B\t\n\007"
      "subtype\"N\n\tMeshScale\022\036\n\005scale\030\001 \001(\0132\017.Cr"
      "eateDOM.Vec3\022!\n\010rotation\030\002 \001(\0132\017.CreateD"
      "OM.Quat\"\217\001\n\017PhysicsMaterial\022\027\n\017disableFr"
      "iction\030\001 \001(\010\022\035\n\025disableStrongFriction\030\002 "
      "\001(\010\022\027\n\017dynamicFriction\030\003 \001(\002\022\026\n\016staticFr"
      "iction\030\004 \001(\002\022\023\n\013restitution\030\005 \001(\002\"-\n\nCon"
      "vexHull\022\037\n\006points\030\001 \003(\0132\017.CreateDOM.Vec3"
      "\"[\n\014TriangleMesh\022\037\n\006points\030\001 \003(\0132\017.Creat"
      "eDOM.Vec3\022\021\n\ttriangles\030\002 \003(\r\022\027\n\017material"
      "Indices\030\003 \003(\r\"W\n\013HeightField\022\020\n\010rowCount"
      "\030\001 \001(\r\022\023\n\013columnCount\030\002 \001(\r\022\017\n\007samples\030\003"
      " \003(\r\022\020\n\010metaData\030\004 \003(\r\"\200\004\n\010Geometry\022%\n\004t"
      "ype\030\001 \001(\0162\027.CreateDOM.GeometryType\022-\n\013bo"
      "xGeometry\030\002 \001(\0132\026.CreateDOM.BoxGeometryH"
      "\000\0223\n\016sphereGeometry\030\003 \001(\0132\031.CreateDOM.Sp"
      "hereGeometryH\000\0225\n\017capsuleGeometry\030\004 \001(\0132"
      "\032.CreateDOM.CapsuleGeometryH\000\0227\n\020cylinde"
      "rGeometry\030\005 \001(\0132\033.CreateDOM.CylinderGeom"
      "etryH\000\022;\n\022convexHullGeometry\030\006 \001(\0132\035.Cre"
      "ateDOM.ConvexHullGeometryH\000\022\?\n\024triangleM"
      "eshGeometry\030\007 \001(\0132\037.CreateDOM.TriangleMe"
      "shGeometryH\000\022=\n\023heightFieldGeometry\030\010 \001("
      "\0132\036.CreateDOM.HeightFieldGeometryH\000\0221\n\rp"
      "laneGeometry\030\t \001(\0132\030.CreateDOM.PlaneGeom"
      "etryH\000B\t\n\007subtype\"2\n\013BoxGeometry\022#\n\ndime"
      "nsions\030\001 \001(\0132\017.CreateDOM.Vec3\" \n\016SphereG"
      "eometry\022\016\n\006radius\030\001 \001(\002\"1\n\017CapsuleGeomet"
      "ry\022\016\n\006radius\030\001 \001(\002\022\016\n\006height\030\002 \001(\002\"2\n\020Cy"
      "linderGeometry\022\016\n\006radius\030\001 \001(\002\022\016\n\006height"
      "\030\002 \001(\002\"M\n\022ConvexHullGeometry\022#\n\005scale\030\001 "
      "\001(\0132\024.CreateDOM.MeshScale\022\022\n\nconvexMesh\030"
      "\002 \001(\t\"f\n\024TriangleMeshGeometry\022#\n\005scale\030\001"
      " \001(\0132\024.CreateDOM.MeshScale\022\024\n\014triangleMe"
      "sh\030\002 \001(\t\022\023\n\013doubleSided\030\003 \001(\010\"{\n\023HeightF"
      "ieldGeometry\022\023\n\013heightField\030\001 \001(\t\022\023\n\013hei"
      "ghtScale\030\002 \001(\002\022\020\n\010rowScale\030\003 \001(\002\022\023\n\013colu"
      "mnScale\030\004 \001(\002\022\023\n\013doubleSided\030\005 \001(\010\"\017\n\rPl"
      "aneGeometry\"\221\001\n\020GeometryInstance\022%\n\010geom"
      "etry\030\001 \001(\0132\023.CreateDOM.Geometry\022\021\n\tmater"
      "ials\030\002 \003(\t\022\"\n\tlocalPose\030\003 \001(\0132\017.CreateDO"
      "M.Pose\022\037\n\027collisionFilterSettings\030\004 \001(\t\""
      "\323\001\n\tRigidBody\0226\n\021geometryInstances\030\001 \003(\013"
      "2\033.CreateDOM.GeometryInstance\022#\n\nglobalP"
      "ose\030\002 \001(\0132\017.CreateDOM.Pose\022-\n\013rigidStati"
      "c\030\003 \001(\0132\026.CreateDOM.RigidStaticH\000\022/\n\014rig"
      "idDynamic\030\004 \001(\0132\027.CreateDOM.RigidDynamic"
      "H\000B\t\n\007subtype\"\r\n\013RigidStatic\"\306\002\n\014RigidDy"
      "namic\022\026\n\016disableGravity\030\001 \001(\010\022.\n\025centerO"
      "fMassLocalPose\030\002 \001(\0132\017.CreateDOM.Pose\022\014\n"
      "\004mass\030\003 \001(\002\022/\n\026massSpaceInertiaTensor\030\004 "
      "\001(\0132\017.CreateDOM.Vec3\022\'\n\016linearVelocity\030\005"
      " \001(\0132\017.CreateDOM.Vec3\022(\n\017angularVelocity"
      "\030\006 \001(\0132\017.CreateDOM.Vec3\022\025\n\rlinearDamping"
      "\030\007 \001(\002\022\026\n\016angularDamping\030\010 \001(\002\022\032\n\022maxAng"
      "ularVelocity\030\t \001(\002\022\021\n\tkinematic\030\n \001(\010\"\357\003"
      "\n\005Joint\022\r\n\005body0\030\001 \001(\t\022\r\n\005body1\030\002 \001(\t\022#\n"
      "\nlocalpose0\030\003 \001(\0132\017.CreateDOM.Pose\022#\n\nlo"
      "calpose1\030\004 \001(\0132\017.CreateDOM.Pose\022\030\n\020colli"
      "sionEnabled\030\005 \001(\010\022+\n\nfixedJoint\030\006 \001(\0132\025."
      "CreateDOM.FixedJointH\000\0223\n\016sphericalJoint"
      "\030\007 \001(\0132\031.CreateDOM.SphericalJointH\000\022+\n\nh"
      "ingeJoint\030\010 \001(\0132\025.CreateDOM.HingeJointH\000"
      "\0223\n\016prismaticJoint\030\t \001(\0132\031.CreateDOM.Pri"
      "smaticJointH\000\0221\n\rdistanceJoint\030\n \001(\0132\030.C"
      "reateDOM.DistanceJointH\000\022;\n\022ballAndSocke"
      "tJoint\030\013 \001(\0132\035.CreateDOM.BallAndSocketJo"
      "intH\000\022%\n\007d6Joint\030\014 \001(\0132\022.CreateDOM.D6Joi"
      "ntH\000B\t\n\007subtype\"\014\n\nFixedJoint\"0\n\016Spheric"
      "alJoint\022\016\n\006limitY\030\001 \001(\002\022\016\n\006limitZ\030\002 \001(\002\""
      "0\n\nHingeJoint\022\017\n\007limtLow\030\001 \001(\002\022\021\n\tlimitH"
      "igh\030\002 \001(\002\"5\n\016PrismaticJoint\022\020\n\010limitLow\030"
      "\001 \001(\002\022\021\n\tlimitHigh\030\002 \001(\002\":\n\rDistanceJoin"
      "t\022\023\n\013distanceLow\030\001 \001(\002\022\024\n\014distanceHigh\030\002"
      " \001(\002\"[\n\022BallAndSocketJoint\022\021\n\tlimitXLow\030"
      "\001 \001(\002\022\022\n\nlimitXHigh\030\002 \001(\002\022\016\n\006limitY\030\003 \001("
      "\002\022\016\n\006limitZ\030\004 \001(\002\"\t\n\007D6Joint\".\n\016BodyPair"
      "Filter\022\r\n\005bodyA\030\001 \001(\t\022\r\n\005bodyB\030\002 \001(\t\"\?\n\017"
      "BodyPairFilters\022,\n\tbodyPairs\030\001 \003(\0132\031.Cre"
      "ateDOM.BodyPairFilter\"g\n\022InstanceCollect"
      "ion\022\022\n\ncollection\030\001 \001(\t\022\035\n\004pose\030\002 \001(\0132\017."
      "CreateDOM.Pose\022\036\n\005scale\030\003 \001(\0132\017.CreateDO"
      "M.Vec3\",\n\nCollection\022\036\n\005nodes\030\001 \003(\0132\017.Cr"
      "eateDOM.Node\"I\n\005Scene\022 \n\007gravity\030\001 \001(\0132\017"
      ".CreateDOM.Vec3\022\036\n\005nodes\030\002 \003(\0132\017.CreateD"
      "OM.Node\"S\n\nPhysicsDOM\022$\n\013collections\030\001 \003"
      "(\0132\017.CreateDOM.Node\022\037\n\006scenes\030\002 \003(\0132\017.Cr"
      "eateDOM.Node*\307\003\n\010NodeType\022\013\n\007NT_NODE\020\000\022\027"
      "\n\023NT_PHYSICS_MATERIAL\020\001\022\030\n\024NT_GEOMETRY_I"
      "NSTANCE\020\002\022\023\n\017NT_TRIANGLEMESH\020\003\022\021\n\rNT_CON"
      "VEXHULL\020\004\022\022\n\016NT_HEIGHTFIELD\020\005\022\021\n\rNT_RIGI"
      "D_BODY\020\006\022\023\n\017NT_RIGID_STATIC\020\007\022\024\n\020NT_RIGI"
      "D_DYNAMIC\020\010\022\030\n\024NT_BODY_PAIR_FILTERS\020\t\022\014\n"
      "\010NT_JOINT\020\n\022\022\n\016NT_FIXED_JOINT\020\013\022\026\n\022NT_SP"
      "HERICAL_JOINT\020\014\022\022\n\016NT_HINGE_JOINT\020\r\022\026\n\022N"
      "T_PRISMATIC_JOINT\020\016\022\025\n\021NT_DISTANCE_JOINT"
      "\020\017\022\034\n\030NT_BALL_AND_SOCKET_JOINT\020\020\022\017\n\013NT_D"
      "6_JOINT\020\021\022\032\n\026NT_INSTANCE_COLLECTION\020\022\022\021\n"
      "\rNT_COLLECTION\020\023\022\014\n\010NT_SCENE\020\024*\334\001\n\014Geome"
      "tryType\022\023\n\017GT_BOX_GEOMETRY\020\000\022\026\n\022GT_SPHER"
      "E_GEOMETRY\020\001\022\027\n\023GT_CAPSULE_GEOMETRY\020\002\022\025\n"
      "\021GT_PLANE_GEOMETRY\020\003\022\030\n\024GT_CYLINDER_GEOM"
      "ETRY\020\004\022\032\n\026GT_CONVEXHULL_GEOMETRY\020\005\022\034\n\030GT"
      "_TRIANGLEMESH_GEOMETRY\020\006\022\033\n\027GT_HEIGHTFIE"
      "LD_GEOMETRY\020\007b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5341);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PhysicsDOM.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_PhysicsDOM_2eproto

const ::google::protobuf::EnumDescriptor* NodeType_descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_enum_descriptors[0];
}
bool NodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GeometryType_descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_enum_descriptors[1];
}
bool GeometryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec3::kXFieldNumber;
const int Vec3::kYFieldNumber;
const int Vec3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec3::Vec3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:CreateDOM.Vec3)
}

void Vec3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _cached_size_ = 0;
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:CreateDOM.Vec3)
  SharedDtor();
}

void Vec3::SharedDtor() {
}

void Vec3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec3::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vec3& Vec3::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vec3* Vec3::New(::google::protobuf::Arena* arena) const {
  Vec3* n = new Vec3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.Vec3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.Vec3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.Vec3)
  return false;
#undef DO_
}

void Vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.Vec3)
}

::google::protobuf::uint8* Vec3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.Vec3)
  return target;
}

size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.Vec3)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vec3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.Vec3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.Vec3)
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vec3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  return true;
}

void Vec3::Swap(Vec3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vec3::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vec3

// float x = 1;
void Vec3::clear_x() {
  x_ = 0;
}
float Vec3::x() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Vec3.x)
  return x_;
}
void Vec3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.Vec3.x)
}

// float y = 2;
void Vec3::clear_y() {
  y_ = 0;
}
float Vec3::y() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Vec3.y)
  return y_;
}
void Vec3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.Vec3.y)
}

// float z = 3;
void Vec3::clear_z() {
  z_ = 0;
}
float Vec3::z() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Vec3.z)
  return z_;
}
void Vec3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.Vec3.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quat::kXFieldNumber;
const int Quat::kYFieldNumber;
const int Quat::kZFieldNumber;
const int Quat::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quat::Quat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.Quat)
}
Quat::Quat(const Quat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:CreateDOM.Quat)
}

void Quat::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _cached_size_ = 0;
}

Quat::~Quat() {
  // @@protoc_insertion_point(destructor:CreateDOM.Quat)
  SharedDtor();
}

void Quat::SharedDtor() {
}

void Quat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quat::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Quat& Quat::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

Quat* Quat::New(::google::protobuf::Arena* arena) const {
  Quat* n = new Quat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quat::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.Quat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear();
}

bool Quat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.Quat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float w = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.Quat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.Quat)
  return false;
#undef DO_
}

void Quat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.Quat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // float w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.Quat)
}

::google::protobuf::uint8* Quat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.Quat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // float w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.Quat)
  return target;
}

size_t Quat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.Quat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float w = 4;
  if (this->w() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.Quat)
  GOOGLE_DCHECK_NE(&from, this);
  const Quat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.Quat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.Quat)
    MergeFrom(*source);
  }
}

void Quat::MergeFrom(const Quat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.Quat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void Quat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.Quat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quat::CopyFrom(const Quat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.Quat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quat::IsInitialized() const {
  return true;
}

void Quat::Swap(Quat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quat::InternalSwap(Quat* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quat::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Quat

// float x = 1;
void Quat::clear_x() {
  x_ = 0;
}
float Quat::x() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Quat.x)
  return x_;
}
void Quat::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.Quat.x)
}

// float y = 2;
void Quat::clear_y() {
  y_ = 0;
}
float Quat::y() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Quat.y)
  return y_;
}
void Quat::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.Quat.y)
}

// float z = 3;
void Quat::clear_z() {
  z_ = 0;
}
float Quat::z() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Quat.z)
  return z_;
}
void Quat::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.Quat.z)
}

// float w = 4;
void Quat::clear_w() {
  w_ = 0;
}
float Quat::w() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Quat.w)
  return w_;
}
void Quat::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.Quat.w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Plane::kNFieldNumber;
const int Plane::kDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Plane::Plane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.Plane)
}
Plane::Plane(const Plane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_n()) {
    n_ = new ::CreateDOM::Vec3(*from.n_);
  } else {
    n_ = NULL;
  }
  d_ = from.d_;
  // @@protoc_insertion_point(copy_constructor:CreateDOM.Plane)
}

void Plane::SharedCtor() {
  ::memset(&n_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&d_) -
      reinterpret_cast<char*>(&n_)) + sizeof(d_));
  _cached_size_ = 0;
}

Plane::~Plane() {
  // @@protoc_insertion_point(destructor:CreateDOM.Plane)
  SharedDtor();
}

void Plane::SharedDtor() {
  if (this != internal_default_instance()) delete n_;
}

void Plane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plane::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Plane& Plane::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

Plane* Plane::New(::google::protobuf::Arena* arena) const {
  Plane* n = new Plane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Plane::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.Plane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && n_ != NULL) {
    delete n_;
  }
  n_ = NULL;
  d_ = 0;
  _internal_metadata_.Clear();
}

bool Plane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.Plane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CreateDOM.Vec3 n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_n()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float d = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.Plane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.Plane)
  return false;
#undef DO_
}

void Plane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.Plane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.Vec3 n = 1;
  if (this->has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->n_, output);
  }

  // float d = 2;
  if (this->d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->d(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.Plane)
}

::google::protobuf::uint8* Plane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.Plane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.Vec3 n = 1;
  if (this->has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->n_, deterministic, target);
  }

  // float d = 2;
  if (this->d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->d(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.Plane)
  return target;
}

size_t Plane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.Plane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .CreateDOM.Vec3 n = 1;
  if (this->has_n()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->n_);
  }

  // float d = 2;
  if (this->d() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.Plane)
  GOOGLE_DCHECK_NE(&from, this);
  const Plane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Plane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.Plane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.Plane)
    MergeFrom(*source);
  }
}

void Plane::MergeFrom(const Plane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.Plane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_n()) {
    mutable_n()->::CreateDOM::Vec3::MergeFrom(from.n());
  }
  if (from.d() != 0) {
    set_d(from.d());
  }
}

void Plane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.Plane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plane::CopyFrom(const Plane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.Plane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plane::IsInitialized() const {
  return true;
}

void Plane::Swap(Plane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Plane::InternalSwap(Plane* other) {
  using std::swap;
  swap(n_, other->n_);
  swap(d_, other->d_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Plane::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Plane

// .CreateDOM.Vec3 n = 1;
bool Plane::has_n() const {
  return this != internal_default_instance() && n_ != NULL;
}
void Plane::clear_n() {
  if (GetArenaNoVirtual() == NULL && n_ != NULL) delete n_;
  n_ = NULL;
}
const ::CreateDOM::Vec3& Plane::n() const {
  const ::CreateDOM::Vec3* p = n_;
  // @@protoc_insertion_point(field_get:CreateDOM.Plane.n)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Vec3*>(
      &::CreateDOM::_Vec3_default_instance_);
}
::CreateDOM::Vec3* Plane::mutable_n() {
  
  if (n_ == NULL) {
    n_ = new ::CreateDOM::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Plane.n)
  return n_;
}
::CreateDOM::Vec3* Plane::release_n() {
  // @@protoc_insertion_point(field_release:CreateDOM.Plane.n)
  
  ::CreateDOM::Vec3* temp = n_;
  n_ = NULL;
  return temp;
}
void Plane::set_allocated_n(::CreateDOM::Vec3* n) {
  delete n_;
  n_ = n;
  if (n) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Plane.n)
}

// float d = 2;
void Plane::clear_d() {
  d_ = 0;
}
float Plane::d() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Plane.d)
  return d_;
}
void Plane::set_d(float value) {
  
  d_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.Plane.d)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kQFieldNumber;
const int Pose::kPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_q()) {
    q_ = new ::CreateDOM::Quat(*from.q_);
  } else {
    q_ = NULL;
  }
  if (from.has_p()) {
    p_ = new ::CreateDOM::Vec3(*from.p_);
  } else {
    p_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.Pose)
}

void Pose::SharedCtor() {
  ::memset(&q_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p_) -
      reinterpret_cast<char*>(&q_)) + sizeof(p_));
  _cached_size_ = 0;
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:CreateDOM.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete p_;
}

void Pose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose& Pose::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pose* Pose::New(::google::protobuf::Arena* arena) const {
  Pose* n = new Pose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && q_ != NULL) {
    delete q_;
  }
  q_ = NULL;
  if (GetArenaNoVirtual() == NULL && p_ != NULL) {
    delete p_;
  }
  p_ = NULL;
  _internal_metadata_.Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.Pose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CreateDOM.Quat q = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_q()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Vec3 p = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.Quat q = 1;
  if (this->has_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->q_, output);
  }

  // .CreateDOM.Vec3 p = 2;
  if (this->has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->p_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.Quat q = 1;
  if (this->has_q()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->q_, deterministic, target);
  }

  // .CreateDOM.Vec3 p = 2;
  if (this->has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->p_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.Pose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .CreateDOM.Quat q = 1;
  if (this->has_q()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->q_);
  }

  // .CreateDOM.Vec3 p = 2;
  if (this->has_p()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->p_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_q()) {
    mutable_q()->::CreateDOM::Quat::MergeFrom(from.q());
  }
  if (from.has_p()) {
    mutable_p()->::CreateDOM::Vec3::MergeFrom(from.p());
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  using std::swap;
  swap(q_, other->q_);
  swap(p_, other->p_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose

// .CreateDOM.Quat q = 1;
bool Pose::has_q() const {
  return this != internal_default_instance() && q_ != NULL;
}
void Pose::clear_q() {
  if (GetArenaNoVirtual() == NULL && q_ != NULL) delete q_;
  q_ = NULL;
}
const ::CreateDOM::Quat& Pose::q() const {
  const ::CreateDOM::Quat* p = q_;
  // @@protoc_insertion_point(field_get:CreateDOM.Pose.q)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Quat*>(
      &::CreateDOM::_Quat_default_instance_);
}
::CreateDOM::Quat* Pose::mutable_q() {
  
  if (q_ == NULL) {
    q_ = new ::CreateDOM::Quat;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Pose.q)
  return q_;
}
::CreateDOM::Quat* Pose::release_q() {
  // @@protoc_insertion_point(field_release:CreateDOM.Pose.q)
  
  ::CreateDOM::Quat* temp = q_;
  q_ = NULL;
  return temp;
}
void Pose::set_allocated_q(::CreateDOM::Quat* q) {
  delete q_;
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Pose.q)
}

// .CreateDOM.Vec3 p = 2;
bool Pose::has_p() const {
  return this != internal_default_instance() && p_ != NULL;
}
void Pose::clear_p() {
  if (GetArenaNoVirtual() == NULL && p_ != NULL) delete p_;
  p_ = NULL;
}
const ::CreateDOM::Vec3& Pose::p() const {
  const ::CreateDOM::Vec3* p = p_;
  // @@protoc_insertion_point(field_get:CreateDOM.Pose.p)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Vec3*>(
      &::CreateDOM::_Vec3_default_instance_);
}
::CreateDOM::Vec3* Pose::mutable_p() {
  
  if (p_ == NULL) {
    p_ = new ::CreateDOM::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Pose.p)
  return p_;
}
::CreateDOM::Vec3* Pose::release_p() {
  // @@protoc_insertion_point(field_release:CreateDOM.Pose.p)
  
  ::CreateDOM::Vec3* temp = p_;
  p_ = NULL;
  return temp;
}
void Pose::set_allocated_p(::CreateDOM::Vec3* p) {
  delete p_;
  p_ = p;
  if (p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Pose.p)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bounds3::kBminFieldNumber;
const int Bounds3::kBmaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bounds3::Bounds3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.Bounds3)
}
Bounds3::Bounds3(const Bounds3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bmin()) {
    bmin_ = new ::CreateDOM::Vec3(*from.bmin_);
  } else {
    bmin_ = NULL;
  }
  if (from.has_bmax()) {
    bmax_ = new ::CreateDOM::Vec3(*from.bmax_);
  } else {
    bmax_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.Bounds3)
}

void Bounds3::SharedCtor() {
  ::memset(&bmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bmax_) -
      reinterpret_cast<char*>(&bmin_)) + sizeof(bmax_));
  _cached_size_ = 0;
}

Bounds3::~Bounds3() {
  // @@protoc_insertion_point(destructor:CreateDOM.Bounds3)
  SharedDtor();
}

void Bounds3::SharedDtor() {
  if (this != internal_default_instance()) delete bmin_;
  if (this != internal_default_instance()) delete bmax_;
}

void Bounds3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bounds3::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bounds3& Bounds3::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

Bounds3* Bounds3::New(::google::protobuf::Arena* arena) const {
  Bounds3* n = new Bounds3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bounds3::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.Bounds3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && bmin_ != NULL) {
    delete bmin_;
  }
  bmin_ = NULL;
  if (GetArenaNoVirtual() == NULL && bmax_ != NULL) {
    delete bmax_;
  }
  bmax_ = NULL;
  _internal_metadata_.Clear();
}

bool Bounds3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.Bounds3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CreateDOM.Vec3 bmin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bmin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Vec3 bmax = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bmax()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.Bounds3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.Bounds3)
  return false;
#undef DO_
}

void Bounds3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.Bounds3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.Vec3 bmin = 1;
  if (this->has_bmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->bmin_, output);
  }

  // .CreateDOM.Vec3 bmax = 2;
  if (this->has_bmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bmax_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.Bounds3)
}

::google::protobuf::uint8* Bounds3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.Bounds3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.Vec3 bmin = 1;
  if (this->has_bmin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->bmin_, deterministic, target);
  }

  // .CreateDOM.Vec3 bmax = 2;
  if (this->has_bmax()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->bmax_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.Bounds3)
  return target;
}

size_t Bounds3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.Bounds3)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .CreateDOM.Vec3 bmin = 1;
  if (this->has_bmin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bmin_);
  }

  // .CreateDOM.Vec3 bmax = 2;
  if (this->has_bmax()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bmax_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bounds3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.Bounds3)
  GOOGLE_DCHECK_NE(&from, this);
  const Bounds3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bounds3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.Bounds3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.Bounds3)
    MergeFrom(*source);
  }
}

void Bounds3::MergeFrom(const Bounds3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.Bounds3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bmin()) {
    mutable_bmin()->::CreateDOM::Vec3::MergeFrom(from.bmin());
  }
  if (from.has_bmax()) {
    mutable_bmax()->::CreateDOM::Vec3::MergeFrom(from.bmax());
  }
}

void Bounds3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.Bounds3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bounds3::CopyFrom(const Bounds3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.Bounds3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bounds3::IsInitialized() const {
  return true;
}

void Bounds3::Swap(Bounds3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bounds3::InternalSwap(Bounds3* other) {
  using std::swap;
  swap(bmin_, other->bmin_);
  swap(bmax_, other->bmax_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bounds3::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Bounds3

// .CreateDOM.Vec3 bmin = 1;
bool Bounds3::has_bmin() const {
  return this != internal_default_instance() && bmin_ != NULL;
}
void Bounds3::clear_bmin() {
  if (GetArenaNoVirtual() == NULL && bmin_ != NULL) delete bmin_;
  bmin_ = NULL;
}
const ::CreateDOM::Vec3& Bounds3::bmin() const {
  const ::CreateDOM::Vec3* p = bmin_;
  // @@protoc_insertion_point(field_get:CreateDOM.Bounds3.bmin)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Vec3*>(
      &::CreateDOM::_Vec3_default_instance_);
}
::CreateDOM::Vec3* Bounds3::mutable_bmin() {
  
  if (bmin_ == NULL) {
    bmin_ = new ::CreateDOM::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Bounds3.bmin)
  return bmin_;
}
::CreateDOM::Vec3* Bounds3::release_bmin() {
  // @@protoc_insertion_point(field_release:CreateDOM.Bounds3.bmin)
  
  ::CreateDOM::Vec3* temp = bmin_;
  bmin_ = NULL;
  return temp;
}
void Bounds3::set_allocated_bmin(::CreateDOM::Vec3* bmin) {
  delete bmin_;
  bmin_ = bmin;
  if (bmin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Bounds3.bmin)
}

// .CreateDOM.Vec3 bmax = 2;
bool Bounds3::has_bmax() const {
  return this != internal_default_instance() && bmax_ != NULL;
}
void Bounds3::clear_bmax() {
  if (GetArenaNoVirtual() == NULL && bmax_ != NULL) delete bmax_;
  bmax_ = NULL;
}
const ::CreateDOM::Vec3& Bounds3::bmax() const {
  const ::CreateDOM::Vec3* p = bmax_;
  // @@protoc_insertion_point(field_get:CreateDOM.Bounds3.bmax)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Vec3*>(
      &::CreateDOM::_Vec3_default_instance_);
}
::CreateDOM::Vec3* Bounds3::mutable_bmax() {
  
  if (bmax_ == NULL) {
    bmax_ = new ::CreateDOM::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Bounds3.bmax)
  return bmax_;
}
::CreateDOM::Vec3* Bounds3::release_bmax() {
  // @@protoc_insertion_point(field_release:CreateDOM.Bounds3.bmax)
  
  ::CreateDOM::Vec3* temp = bmax_;
  bmax_ = NULL;
  return temp;
}
void Bounds3::set_allocated_bmax(::CreateDOM::Vec3* bmax) {
  delete bmax_;
  bmax_ = bmax;
  if (bmax) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Bounds3.bmax)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisualBinding::kVisualNameFieldNumber;
const int VisualBinding::kLocalPoseFieldNumber;
const int VisualBinding::kLocalScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisualBinding::VisualBinding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.VisualBinding)
}
VisualBinding::VisualBinding(const VisualBinding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  visualname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.visualname().size() > 0) {
    visualname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.visualname_);
  }
  if (from.has_localpose()) {
    localpose_ = new ::CreateDOM::Pose(*from.localpose_);
  } else {
    localpose_ = NULL;
  }
  if (from.has_localscale()) {
    localscale_ = new ::CreateDOM::Vec3(*from.localscale_);
  } else {
    localscale_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.VisualBinding)
}

void VisualBinding::SharedCtor() {
  visualname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&localpose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&localscale_) -
      reinterpret_cast<char*>(&localpose_)) + sizeof(localscale_));
  _cached_size_ = 0;
}

VisualBinding::~VisualBinding() {
  // @@protoc_insertion_point(destructor:CreateDOM.VisualBinding)
  SharedDtor();
}

void VisualBinding::SharedDtor() {
  visualname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete localpose_;
  if (this != internal_default_instance()) delete localscale_;
}

void VisualBinding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisualBinding::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VisualBinding& VisualBinding::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

VisualBinding* VisualBinding::New(::google::protobuf::Arena* arena) const {
  VisualBinding* n = new VisualBinding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisualBinding::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.VisualBinding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visualname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && localpose_ != NULL) {
    delete localpose_;
  }
  localpose_ = NULL;
  if (GetArenaNoVirtual() == NULL && localscale_ != NULL) {
    delete localscale_;
  }
  localscale_ = NULL;
  _internal_metadata_.Clear();
}

bool VisualBinding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.VisualBinding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string visualName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_visualname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->visualname().data(), static_cast<int>(this->visualname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.VisualBinding.visualName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Pose localPose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localpose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Vec3 localScale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localscale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.VisualBinding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.VisualBinding)
  return false;
#undef DO_
}

void VisualBinding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.VisualBinding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string visualName = 1;
  if (this->visualname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->visualname().data(), static_cast<int>(this->visualname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.VisualBinding.visualName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->visualname(), output);
  }

  // .CreateDOM.Pose localPose = 2;
  if (this->has_localpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->localpose_, output);
  }

  // .CreateDOM.Vec3 localScale = 3;
  if (this->has_localscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->localscale_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.VisualBinding)
}

::google::protobuf::uint8* VisualBinding::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.VisualBinding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string visualName = 1;
  if (this->visualname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->visualname().data(), static_cast<int>(this->visualname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.VisualBinding.visualName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->visualname(), target);
  }

  // .CreateDOM.Pose localPose = 2;
  if (this->has_localpose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->localpose_, deterministic, target);
  }

  // .CreateDOM.Vec3 localScale = 3;
  if (this->has_localscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->localscale_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.VisualBinding)
  return target;
}

size_t VisualBinding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.VisualBinding)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string visualName = 1;
  if (this->visualname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->visualname());
  }

  // .CreateDOM.Pose localPose = 2;
  if (this->has_localpose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->localpose_);
  }

  // .CreateDOM.Vec3 localScale = 3;
  if (this->has_localscale()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->localscale_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisualBinding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.VisualBinding)
  GOOGLE_DCHECK_NE(&from, this);
  const VisualBinding* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VisualBinding>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.VisualBinding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.VisualBinding)
    MergeFrom(*source);
  }
}

void VisualBinding::MergeFrom(const VisualBinding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.VisualBinding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.visualname().size() > 0) {

    visualname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.visualname_);
  }
  if (from.has_localpose()) {
    mutable_localpose()->::CreateDOM::Pose::MergeFrom(from.localpose());
  }
  if (from.has_localscale()) {
    mutable_localscale()->::CreateDOM::Vec3::MergeFrom(from.localscale());
  }
}

void VisualBinding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.VisualBinding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualBinding::CopyFrom(const VisualBinding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.VisualBinding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualBinding::IsInitialized() const {
  return true;
}

void VisualBinding::Swap(VisualBinding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisualBinding::InternalSwap(VisualBinding* other) {
  using std::swap;
  visualname_.Swap(&other->visualname_);
  swap(localpose_, other->localpose_);
  swap(localscale_, other->localscale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisualBinding::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VisualBinding

// string visualName = 1;
void VisualBinding::clear_visualname() {
  visualname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VisualBinding::visualname() const {
  // @@protoc_insertion_point(field_get:CreateDOM.VisualBinding.visualName)
  return visualname_.GetNoArena();
}
void VisualBinding::set_visualname(const ::std::string& value) {
  
  visualname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.VisualBinding.visualName)
}
#if LANG_CXX11
void VisualBinding::set_visualname(::std::string&& value) {
  
  visualname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.VisualBinding.visualName)
}
#endif
void VisualBinding::set_visualname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  visualname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.VisualBinding.visualName)
}
void VisualBinding::set_visualname(const char* value, size_t size) {
  
  visualname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.VisualBinding.visualName)
}
::std::string* VisualBinding::mutable_visualname() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.VisualBinding.visualName)
  return visualname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VisualBinding::release_visualname() {
  // @@protoc_insertion_point(field_release:CreateDOM.VisualBinding.visualName)
  
  return visualname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VisualBinding::set_allocated_visualname(::std::string* visualname) {
  if (visualname != NULL) {
    
  } else {
    
  }
  visualname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), visualname);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.VisualBinding.visualName)
}

// .CreateDOM.Pose localPose = 2;
bool VisualBinding::has_localpose() const {
  return this != internal_default_instance() && localpose_ != NULL;
}
void VisualBinding::clear_localpose() {
  if (GetArenaNoVirtual() == NULL && localpose_ != NULL) delete localpose_;
  localpose_ = NULL;
}
const ::CreateDOM::Pose& VisualBinding::localpose() const {
  const ::CreateDOM::Pose* p = localpose_;
  // @@protoc_insertion_point(field_get:CreateDOM.VisualBinding.localPose)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Pose*>(
      &::CreateDOM::_Pose_default_instance_);
}
::CreateDOM::Pose* VisualBinding::mutable_localpose() {
  
  if (localpose_ == NULL) {
    localpose_ = new ::CreateDOM::Pose;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.VisualBinding.localPose)
  return localpose_;
}
::CreateDOM::Pose* VisualBinding::release_localpose() {
  // @@protoc_insertion_point(field_release:CreateDOM.VisualBinding.localPose)
  
  ::CreateDOM::Pose* temp = localpose_;
  localpose_ = NULL;
  return temp;
}
void VisualBinding::set_allocated_localpose(::CreateDOM::Pose* localpose) {
  delete localpose_;
  localpose_ = localpose;
  if (localpose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.VisualBinding.localPose)
}

// .CreateDOM.Vec3 localScale = 3;
bool VisualBinding::has_localscale() const {
  return this != internal_default_instance() && localscale_ != NULL;
}
void VisualBinding::clear_localscale() {
  if (GetArenaNoVirtual() == NULL && localscale_ != NULL) delete localscale_;
  localscale_ = NULL;
}
const ::CreateDOM::Vec3& VisualBinding::localscale() const {
  const ::CreateDOM::Vec3* p = localscale_;
  // @@protoc_insertion_point(field_get:CreateDOM.VisualBinding.localScale)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Vec3*>(
      &::CreateDOM::_Vec3_default_instance_);
}
::CreateDOM::Vec3* VisualBinding::mutable_localscale() {
  
  if (localscale_ == NULL) {
    localscale_ = new ::CreateDOM::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.VisualBinding.localScale)
  return localscale_;
}
::CreateDOM::Vec3* VisualBinding::release_localscale() {
  // @@protoc_insertion_point(field_release:CreateDOM.VisualBinding.localScale)
  
  ::CreateDOM::Vec3* temp = localscale_;
  localscale_ = NULL;
  return temp;
}
void VisualBinding::set_allocated_localscale(::CreateDOM::Vec3* localscale) {
  delete localscale_;
  localscale_ = localscale;
  if (localscale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.VisualBinding.localScale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValuePair::kKeyFieldNumber;
const int KeyValuePair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValuePair::KeyValuePair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.KeyValuePair)
}
KeyValuePair::KeyValuePair(const KeyValuePair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.KeyValuePair)
}

void KeyValuePair::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KeyValuePair::~KeyValuePair() {
  // @@protoc_insertion_point(destructor:CreateDOM.KeyValuePair)
  SharedDtor();
}

void KeyValuePair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValuePair::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyValuePair& KeyValuePair::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyValuePair* KeyValuePair::New(::google::protobuf::Arena* arena) const {
  KeyValuePair* n = new KeyValuePair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValuePair::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.KeyValuePair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool KeyValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.KeyValuePair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.KeyValuePair.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.KeyValuePair.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.KeyValuePair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.KeyValuePair)
  return false;
#undef DO_
}

void KeyValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.KeyValuePair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.KeyValuePair.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.KeyValuePair.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.KeyValuePair)
}

::google::protobuf::uint8* KeyValuePair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.KeyValuePair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.KeyValuePair.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.KeyValuePair.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.KeyValuePair)
  return target;
}

size_t KeyValuePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.KeyValuePair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValuePair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.KeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValuePair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValuePair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.KeyValuePair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.KeyValuePair)
    MergeFrom(*source);
  }
}

void KeyValuePair::MergeFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.KeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KeyValuePair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValuePair::CopyFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuePair::IsInitialized() const {
  return true;
}

void KeyValuePair::Swap(KeyValuePair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValuePair::InternalSwap(KeyValuePair* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValuePair::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValuePair

// string key = 1;
void KeyValuePair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:CreateDOM.KeyValuePair.key)
  return key_.GetNoArena();
}
void KeyValuePair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.KeyValuePair.key)
}
#if LANG_CXX11
void KeyValuePair::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.KeyValuePair.key)
}
#endif
void KeyValuePair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.KeyValuePair.key)
}
void KeyValuePair::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.KeyValuePair.key)
}
::std::string* KeyValuePair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.KeyValuePair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:CreateDOM.KeyValuePair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValuePair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.KeyValuePair.key)
}

// string value = 2;
void KeyValuePair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:CreateDOM.KeyValuePair.value)
  return value_.GetNoArena();
}
void KeyValuePair::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.KeyValuePair.value)
}
#if LANG_CXX11
void KeyValuePair::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.KeyValuePair.value)
}
#endif
void KeyValuePair::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.KeyValuePair.value)
}
void KeyValuePair::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.KeyValuePair.value)
}
::std::string* KeyValuePair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.KeyValuePair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:CreateDOM.KeyValuePair.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValuePair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.KeyValuePair.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdditionalProperties::kCategoryFieldNumber;
const int AdditionalProperties::kKeyValuePairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdditionalProperties::AdditionalProperties()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.AdditionalProperties)
}
AdditionalProperties::AdditionalProperties(const AdditionalProperties& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keyvaluepairs_(from.keyvaluepairs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.category().size() > 0) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.AdditionalProperties)
}

void AdditionalProperties::SharedCtor() {
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AdditionalProperties::~AdditionalProperties() {
  // @@protoc_insertion_point(destructor:CreateDOM.AdditionalProperties)
  SharedDtor();
}

void AdditionalProperties::SharedDtor() {
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AdditionalProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdditionalProperties::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AdditionalProperties& AdditionalProperties::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

AdditionalProperties* AdditionalProperties::New(::google::protobuf::Arena* arena) const {
  AdditionalProperties* n = new AdditionalProperties;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdditionalProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.AdditionalProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyvaluepairs_.Clear();
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AdditionalProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.AdditionalProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string category = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->category().data(), static_cast<int>(this->category().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.AdditionalProperties.category"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CreateDOM.KeyValuePair keyValuePairs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyvaluepairs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.AdditionalProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.AdditionalProperties)
  return false;
#undef DO_
}

void AdditionalProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.AdditionalProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string category = 1;
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.AdditionalProperties.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->category(), output);
  }

  // repeated .CreateDOM.KeyValuePair keyValuePairs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keyvaluepairs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->keyvaluepairs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.AdditionalProperties)
}

::google::protobuf::uint8* AdditionalProperties::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.AdditionalProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string category = 1;
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.AdditionalProperties.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->category(), target);
  }

  // repeated .CreateDOM.KeyValuePair keyValuePairs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keyvaluepairs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->keyvaluepairs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.AdditionalProperties)
  return target;
}

size_t AdditionalProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.AdditionalProperties)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CreateDOM.KeyValuePair keyValuePairs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->keyvaluepairs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keyvaluepairs(static_cast<int>(i)));
    }
  }

  // string category = 1;
  if (this->category().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdditionalProperties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.AdditionalProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const AdditionalProperties* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdditionalProperties>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.AdditionalProperties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.AdditionalProperties)
    MergeFrom(*source);
  }
}

void AdditionalProperties::MergeFrom(const AdditionalProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.AdditionalProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keyvaluepairs_.MergeFrom(from.keyvaluepairs_);
  if (from.category().size() > 0) {

    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
}

void AdditionalProperties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.AdditionalProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalProperties::CopyFrom(const AdditionalProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.AdditionalProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalProperties::IsInitialized() const {
  return true;
}

void AdditionalProperties::Swap(AdditionalProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdditionalProperties::InternalSwap(AdditionalProperties* other) {
  using std::swap;
  keyvaluepairs_.InternalSwap(&other->keyvaluepairs_);
  category_.Swap(&other->category_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdditionalProperties::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdditionalProperties

// string category = 1;
void AdditionalProperties::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AdditionalProperties::category() const {
  // @@protoc_insertion_point(field_get:CreateDOM.AdditionalProperties.category)
  return category_.GetNoArena();
}
void AdditionalProperties::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.AdditionalProperties.category)
}
#if LANG_CXX11
void AdditionalProperties::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.AdditionalProperties.category)
}
#endif
void AdditionalProperties::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.AdditionalProperties.category)
}
void AdditionalProperties::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.AdditionalProperties.category)
}
::std::string* AdditionalProperties::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.AdditionalProperties.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AdditionalProperties::release_category() {
  // @@protoc_insertion_point(field_release:CreateDOM.AdditionalProperties.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AdditionalProperties::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.AdditionalProperties.category)
}

// repeated .CreateDOM.KeyValuePair keyValuePairs = 2;
int AdditionalProperties::keyvaluepairs_size() const {
  return keyvaluepairs_.size();
}
void AdditionalProperties::clear_keyvaluepairs() {
  keyvaluepairs_.Clear();
}
const ::CreateDOM::KeyValuePair& AdditionalProperties::keyvaluepairs(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.AdditionalProperties.keyValuePairs)
  return keyvaluepairs_.Get(index);
}
::CreateDOM::KeyValuePair* AdditionalProperties::mutable_keyvaluepairs(int index) {
  // @@protoc_insertion_point(field_mutable:CreateDOM.AdditionalProperties.keyValuePairs)
  return keyvaluepairs_.Mutable(index);
}
::CreateDOM::KeyValuePair* AdditionalProperties::add_keyvaluepairs() {
  // @@protoc_insertion_point(field_add:CreateDOM.AdditionalProperties.keyValuePairs)
  return keyvaluepairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::CreateDOM::KeyValuePair >*
AdditionalProperties::mutable_keyvaluepairs() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.AdditionalProperties.keyValuePairs)
  return &keyvaluepairs_;
}
const ::google::protobuf::RepeatedPtrField< ::CreateDOM::KeyValuePair >&
AdditionalProperties::keyvaluepairs() const {
  // @@protoc_insertion_point(field_list:CreateDOM.AdditionalProperties.keyValuePairs)
  return keyvaluepairs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kIdFieldNumber;
const int Node::kNameFieldNumber;
const int Node::kTypeFieldNumber;
const int Node::kVisualFieldNumber;
const int Node::kAdditionalPropertiesFieldNumber;
const int Node::kPhysicsMaterialFieldNumber;
const int Node::kConvexHullFieldNumber;
const int Node::kTriangleMeshFieldNumber;
const int Node::kHeightFieldFieldNumber;
const int Node::kRigidBodyFieldNumber;
const int Node::kJointFieldNumber;
const int Node::kBodyPairFiltersFieldNumber;
const int Node::kInstanceCollectionFieldNumber;
const int Node::kCollectionFieldNumber;
const int Node::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      additionalproperties_(from.additionalproperties_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_visual()) {
    visual_ = new ::CreateDOM::VisualBinding(*from.visual_);
  } else {
    visual_ = NULL;
  }
  type_ = from.type_;
  clear_has_subtype();
  switch (from.subtype_case()) {
    case kPhysicsMaterial: {
      mutable_physicsmaterial()->::CreateDOM::PhysicsMaterial::MergeFrom(from.physicsmaterial());
      break;
    }
    case kConvexHull: {
      mutable_convexhull()->::CreateDOM::ConvexHull::MergeFrom(from.convexhull());
      break;
    }
    case kTriangleMesh: {
      mutable_trianglemesh()->::CreateDOM::TriangleMesh::MergeFrom(from.trianglemesh());
      break;
    }
    case kHeightField: {
      mutable_heightfield()->::CreateDOM::HeightField::MergeFrom(from.heightfield());
      break;
    }
    case kRigidBody: {
      mutable_rigidbody()->::CreateDOM::RigidBody::MergeFrom(from.rigidbody());
      break;
    }
    case kJoint: {
      mutable_joint()->::CreateDOM::Joint::MergeFrom(from.joint());
      break;
    }
    case kBodyPairFilters: {
      mutable_bodypairfilters()->::CreateDOM::BodyPairFilters::MergeFrom(from.bodypairfilters());
      break;
    }
    case kInstanceCollection: {
      mutable_instancecollection()->::CreateDOM::InstanceCollection::MergeFrom(from.instancecollection());
      break;
    }
    case kCollection: {
      mutable_collection()->::CreateDOM::Collection::MergeFrom(from.collection());
      break;
    }
    case kScene: {
      mutable_scene()->::CreateDOM::Scene::MergeFrom(from.scene());
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.Node)
}

void Node::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&visual_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&visual_)) + sizeof(type_));
  clear_has_subtype();
  _cached_size_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:CreateDOM.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete visual_;
  if (has_subtype()) {
    clear_subtype();
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node& Node::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::clear_subtype() {
// @@protoc_insertion_point(one_of_clear_start:CreateDOM.Node)
  switch (subtype_case()) {
    case kPhysicsMaterial: {
      delete subtype_.physicsmaterial_;
      break;
    }
    case kConvexHull: {
      delete subtype_.convexhull_;
      break;
    }
    case kTriangleMesh: {
      delete subtype_.trianglemesh_;
      break;
    }
    case kHeightField: {
      delete subtype_.heightfield_;
      break;
    }
    case kRigidBody: {
      delete subtype_.rigidbody_;
      break;
    }
    case kJoint: {
      delete subtype_.joint_;
      break;
    }
    case kBodyPairFilters: {
      delete subtype_.bodypairfilters_;
      break;
    }
    case kInstanceCollection: {
      delete subtype_.instancecollection_;
      break;
    }
    case kCollection: {
      delete subtype_.collection_;
      break;
    }
    case kScene: {
      delete subtype_.scene_;
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUBTYPE_NOT_SET;
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additionalproperties_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && visual_ != NULL) {
    delete visual_;
  }
  visual_ = NULL;
  type_ = 0;
  clear_subtype();
  _internal_metadata_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.Node.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.Node.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.NodeType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::CreateDOM::NodeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.VisualBinding visual = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visual()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CreateDOM.AdditionalProperties additionalProperties = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additionalproperties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.PhysicsMaterial physicsMaterial = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_physicsmaterial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.ConvexHull convexHull = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convexhull()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.TriangleMesh triangleMesh = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trianglemesh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.HeightField heightField = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heightfield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.RigidBody rigidBody = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rigidbody()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Joint joint = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.BodyPairFilters bodyPairFilters = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bodypairfilters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.InstanceCollection instanceCollection = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instancecollection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Collection collection = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Scene scene = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.Node.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.Node.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .CreateDOM.NodeType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // .CreateDOM.VisualBinding visual = 4;
  if (this->has_visual()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->visual_, output);
  }

  // repeated .CreateDOM.AdditionalProperties additionalProperties = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additionalproperties_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->additionalproperties(static_cast<int>(i)), output);
  }

  // .CreateDOM.PhysicsMaterial physicsMaterial = 6;
  if (has_physicsmaterial()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *subtype_.physicsmaterial_, output);
  }

  // .CreateDOM.ConvexHull convexHull = 7;
  if (has_convexhull()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *subtype_.convexhull_, output);
  }

  // .CreateDOM.TriangleMesh triangleMesh = 8;
  if (has_trianglemesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *subtype_.trianglemesh_, output);
  }

  // .CreateDOM.HeightField heightField = 9;
  if (has_heightfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *subtype_.heightfield_, output);
  }

  // .CreateDOM.RigidBody rigidBody = 10;
  if (has_rigidbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *subtype_.rigidbody_, output);
  }

  // .CreateDOM.Joint joint = 11;
  if (has_joint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *subtype_.joint_, output);
  }

  // .CreateDOM.BodyPairFilters bodyPairFilters = 12;
  if (has_bodypairfilters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *subtype_.bodypairfilters_, output);
  }

  // .CreateDOM.InstanceCollection instanceCollection = 13;
  if (has_instancecollection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *subtype_.instancecollection_, output);
  }

  // .CreateDOM.Collection collection = 14;
  if (has_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *subtype_.collection_, output);
  }

  // .CreateDOM.Scene scene = 15;
  if (has_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *subtype_.scene_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.Node.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.Node.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .CreateDOM.NodeType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // .CreateDOM.VisualBinding visual = 4;
  if (this->has_visual()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->visual_, deterministic, target);
  }

  // repeated .CreateDOM.AdditionalProperties additionalProperties = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additionalproperties_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->additionalproperties(static_cast<int>(i)), deterministic, target);
  }

  // .CreateDOM.PhysicsMaterial physicsMaterial = 6;
  if (has_physicsmaterial()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *subtype_.physicsmaterial_, deterministic, target);
  }

  // .CreateDOM.ConvexHull convexHull = 7;
  if (has_convexhull()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *subtype_.convexhull_, deterministic, target);
  }

  // .CreateDOM.TriangleMesh triangleMesh = 8;
  if (has_trianglemesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *subtype_.trianglemesh_, deterministic, target);
  }

  // .CreateDOM.HeightField heightField = 9;
  if (has_heightfield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *subtype_.heightfield_, deterministic, target);
  }

  // .CreateDOM.RigidBody rigidBody = 10;
  if (has_rigidbody()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *subtype_.rigidbody_, deterministic, target);
  }

  // .CreateDOM.Joint joint = 11;
  if (has_joint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *subtype_.joint_, deterministic, target);
  }

  // .CreateDOM.BodyPairFilters bodyPairFilters = 12;
  if (has_bodypairfilters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *subtype_.bodypairfilters_, deterministic, target);
  }

  // .CreateDOM.InstanceCollection instanceCollection = 13;
  if (has_instancecollection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *subtype_.instancecollection_, deterministic, target);
  }

  // .CreateDOM.Collection collection = 14;
  if (has_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *subtype_.collection_, deterministic, target);
  }

  // .CreateDOM.Scene scene = 15;
  if (has_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *subtype_.scene_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.Node)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CreateDOM.AdditionalProperties additionalProperties = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->additionalproperties_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->additionalproperties(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .CreateDOM.VisualBinding visual = 4;
  if (this->has_visual()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->visual_);
  }

  // .CreateDOM.NodeType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (subtype_case()) {
    // .CreateDOM.PhysicsMaterial physicsMaterial = 6;
    case kPhysicsMaterial: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.physicsmaterial_);
      break;
    }
    // .CreateDOM.ConvexHull convexHull = 7;
    case kConvexHull: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.convexhull_);
      break;
    }
    // .CreateDOM.TriangleMesh triangleMesh = 8;
    case kTriangleMesh: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.trianglemesh_);
      break;
    }
    // .CreateDOM.HeightField heightField = 9;
    case kHeightField: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.heightfield_);
      break;
    }
    // .CreateDOM.RigidBody rigidBody = 10;
    case kRigidBody: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.rigidbody_);
      break;
    }
    // .CreateDOM.Joint joint = 11;
    case kJoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.joint_);
      break;
    }
    // .CreateDOM.BodyPairFilters bodyPairFilters = 12;
    case kBodyPairFilters: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.bodypairfilters_);
      break;
    }
    // .CreateDOM.InstanceCollection instanceCollection = 13;
    case kInstanceCollection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.instancecollection_);
      break;
    }
    // .CreateDOM.Collection collection = 14;
    case kCollection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.collection_);
      break;
    }
    // .CreateDOM.Scene scene = 15;
    case kScene: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.scene_);
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additionalproperties_.MergeFrom(from.additionalproperties_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_visual()) {
    mutable_visual()->::CreateDOM::VisualBinding::MergeFrom(from.visual());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.subtype_case()) {
    case kPhysicsMaterial: {
      mutable_physicsmaterial()->::CreateDOM::PhysicsMaterial::MergeFrom(from.physicsmaterial());
      break;
    }
    case kConvexHull: {
      mutable_convexhull()->::CreateDOM::ConvexHull::MergeFrom(from.convexhull());
      break;
    }
    case kTriangleMesh: {
      mutable_trianglemesh()->::CreateDOM::TriangleMesh::MergeFrom(from.trianglemesh());
      break;
    }
    case kHeightField: {
      mutable_heightfield()->::CreateDOM::HeightField::MergeFrom(from.heightfield());
      break;
    }
    case kRigidBody: {
      mutable_rigidbody()->::CreateDOM::RigidBody::MergeFrom(from.rigidbody());
      break;
    }
    case kJoint: {
      mutable_joint()->::CreateDOM::Joint::MergeFrom(from.joint());
      break;
    }
    case kBodyPairFilters: {
      mutable_bodypairfilters()->::CreateDOM::BodyPairFilters::MergeFrom(from.bodypairfilters());
      break;
    }
    case kInstanceCollection: {
      mutable_instancecollection()->::CreateDOM::InstanceCollection::MergeFrom(from.instancecollection());
      break;
    }
    case kCollection: {
      mutable_collection()->::CreateDOM::Collection::MergeFrom(from.collection());
      break;
    }
    case kScene: {
      mutable_scene()->::CreateDOM::Scene::MergeFrom(from.scene());
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  additionalproperties_.InternalSwap(&other->additionalproperties_);
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  swap(visual_, other->visual_);
  swap(type_, other->type_);
  swap(subtype_, other->subtype_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// string id = 1;
void Node::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Node.id)
  return id_.GetNoArena();
}
void Node::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.Node.id)
}
#if LANG_CXX11
void Node::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.Node.id)
}
#endif
void Node::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.Node.id)
}
void Node::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.Node.id)
}
::std::string* Node::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.Node.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node::release_id() {
  // @@protoc_insertion_point(field_release:CreateDOM.Node.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Node.id)
}

// string name = 2;
void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Node.name)
  return name_.GetNoArena();
}
void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.Node.name)
}
#if LANG_CXX11
void Node::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.Node.name)
}
#endif
void Node::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.Node.name)
}
void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.Node.name)
}
::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:CreateDOM.Node.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Node.name)
}

// .CreateDOM.NodeType type = 3;
void Node::clear_type() {
  type_ = 0;
}
::CreateDOM::NodeType Node::type() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Node.type)
  return static_cast< ::CreateDOM::NodeType >(type_);
}
void Node::set_type(::CreateDOM::NodeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.Node.type)
}

// .CreateDOM.VisualBinding visual = 4;
bool Node::has_visual() const {
  return this != internal_default_instance() && visual_ != NULL;
}
void Node::clear_visual() {
  if (GetArenaNoVirtual() == NULL && visual_ != NULL) delete visual_;
  visual_ = NULL;
}
const ::CreateDOM::VisualBinding& Node::visual() const {
  const ::CreateDOM::VisualBinding* p = visual_;
  // @@protoc_insertion_point(field_get:CreateDOM.Node.visual)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::VisualBinding*>(
      &::CreateDOM::_VisualBinding_default_instance_);
}
::CreateDOM::VisualBinding* Node::mutable_visual() {
  
  if (visual_ == NULL) {
    visual_ = new ::CreateDOM::VisualBinding;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Node.visual)
  return visual_;
}
::CreateDOM::VisualBinding* Node::release_visual() {
  // @@protoc_insertion_point(field_release:CreateDOM.Node.visual)
  
  ::CreateDOM::VisualBinding* temp = visual_;
  visual_ = NULL;
  return temp;
}
void Node::set_allocated_visual(::CreateDOM::VisualBinding* visual) {
  delete visual_;
  visual_ = visual;
  if (visual) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Node.visual)
}

// repeated .CreateDOM.AdditionalProperties additionalProperties = 5;
int Node::additionalproperties_size() const {
  return additionalproperties_.size();
}
void Node::clear_additionalproperties() {
  additionalproperties_.Clear();
}
const ::CreateDOM::AdditionalProperties& Node::additionalproperties(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.Node.additionalProperties)
  return additionalproperties_.Get(index);
}
::CreateDOM::AdditionalProperties* Node::mutable_additionalproperties(int index) {
  // @@protoc_insertion_point(field_mutable:CreateDOM.Node.additionalProperties)
  return additionalproperties_.Mutable(index);
}
::CreateDOM::AdditionalProperties* Node::add_additionalproperties() {
  // @@protoc_insertion_point(field_add:CreateDOM.Node.additionalProperties)
  return additionalproperties_.Add();
}
::google::protobuf::RepeatedPtrField< ::CreateDOM::AdditionalProperties >*
Node::mutable_additionalproperties() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.Node.additionalProperties)
  return &additionalproperties_;
}
const ::google::protobuf::RepeatedPtrField< ::CreateDOM::AdditionalProperties >&
Node::additionalproperties() const {
  // @@protoc_insertion_point(field_list:CreateDOM.Node.additionalProperties)
  return additionalproperties_;
}

// .CreateDOM.PhysicsMaterial physicsMaterial = 6;
bool Node::has_physicsmaterial() const {
  return subtype_case() == kPhysicsMaterial;
}
void Node::set_has_physicsmaterial() {
  _oneof_case_[0] = kPhysicsMaterial;
}
void Node::clear_physicsmaterial() {
  if (has_physicsmaterial()) {
    delete subtype_.physicsmaterial_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::PhysicsMaterial& Node::physicsmaterial() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Node.physicsMaterial)
  return has_physicsmaterial()
      ? *subtype_.physicsmaterial_
      : ::CreateDOM::PhysicsMaterial::default_instance();
}
::CreateDOM::PhysicsMaterial* Node::mutable_physicsmaterial() {
  if (!has_physicsmaterial()) {
    clear_subtype();
    set_has_physicsmaterial();
    subtype_.physicsmaterial_ = new ::CreateDOM::PhysicsMaterial;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Node.physicsMaterial)
  return subtype_.physicsmaterial_;
}
::CreateDOM::PhysicsMaterial* Node::release_physicsmaterial() {
  // @@protoc_insertion_point(field_release:CreateDOM.Node.physicsMaterial)
  if (has_physicsmaterial()) {
    clear_has_subtype();
    ::CreateDOM::PhysicsMaterial* temp = subtype_.physicsmaterial_;
    subtype_.physicsmaterial_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Node::set_allocated_physicsmaterial(::CreateDOM::PhysicsMaterial* physicsmaterial) {
  clear_subtype();
  if (physicsmaterial) {
    set_has_physicsmaterial();
    subtype_.physicsmaterial_ = physicsmaterial;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Node.physicsMaterial)
}

// .CreateDOM.ConvexHull convexHull = 7;
bool Node::has_convexhull() const {
  return subtype_case() == kConvexHull;
}
void Node::set_has_convexhull() {
  _oneof_case_[0] = kConvexHull;
}
void Node::clear_convexhull() {
  if (has_convexhull()) {
    delete subtype_.convexhull_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::ConvexHull& Node::convexhull() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Node.convexHull)
  return has_convexhull()
      ? *subtype_.convexhull_
      : ::CreateDOM::ConvexHull::default_instance();
}
::CreateDOM::ConvexHull* Node::mutable_convexhull() {
  if (!has_convexhull()) {
    clear_subtype();
    set_has_convexhull();
    subtype_.convexhull_ = new ::CreateDOM::ConvexHull;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Node.convexHull)
  return subtype_.convexhull_;
}
::CreateDOM::ConvexHull* Node::release_convexhull() {
  // @@protoc_insertion_point(field_release:CreateDOM.Node.convexHull)
  if (has_convexhull()) {
    clear_has_subtype();
    ::CreateDOM::ConvexHull* temp = subtype_.convexhull_;
    subtype_.convexhull_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Node::set_allocated_convexhull(::CreateDOM::ConvexHull* convexhull) {
  clear_subtype();
  if (convexhull) {
    set_has_convexhull();
    subtype_.convexhull_ = convexhull;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Node.convexHull)
}

// .CreateDOM.TriangleMesh triangleMesh = 8;
bool Node::has_trianglemesh() const {
  return subtype_case() == kTriangleMesh;
}
void Node::set_has_trianglemesh() {
  _oneof_case_[0] = kTriangleMesh;
}
void Node::clear_trianglemesh() {
  if (has_trianglemesh()) {
    delete subtype_.trianglemesh_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::TriangleMesh& Node::trianglemesh() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Node.triangleMesh)
  return has_trianglemesh()
      ? *subtype_.trianglemesh_
      : ::CreateDOM::TriangleMesh::default_instance();
}
::CreateDOM::TriangleMesh* Node::mutable_trianglemesh() {
  if (!has_trianglemesh()) {
    clear_subtype();
    set_has_trianglemesh();
    subtype_.trianglemesh_ = new ::CreateDOM::TriangleMesh;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Node.triangleMesh)
  return subtype_.trianglemesh_;
}
::CreateDOM::TriangleMesh* Node::release_trianglemesh() {
  // @@protoc_insertion_point(field_release:CreateDOM.Node.triangleMesh)
  if (has_trianglemesh()) {
    clear_has_subtype();
    ::CreateDOM::TriangleMesh* temp = subtype_.trianglemesh_;
    subtype_.trianglemesh_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Node::set_allocated_trianglemesh(::CreateDOM::TriangleMesh* trianglemesh) {
  clear_subtype();
  if (trianglemesh) {
    set_has_trianglemesh();
    subtype_.trianglemesh_ = trianglemesh;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Node.triangleMesh)
}

// .CreateDOM.HeightField heightField = 9;
bool Node::has_heightfield() const {
  return subtype_case() == kHeightField;
}
void Node::set_has_heightfield() {
  _oneof_case_[0] = kHeightField;
}
void Node::clear_heightfield() {
  if (has_heightfield()) {
    delete subtype_.heightfield_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::HeightField& Node::heightfield() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Node.heightField)
  return has_heightfield()
      ? *subtype_.heightfield_
      : ::CreateDOM::HeightField::default_instance();
}
::CreateDOM::HeightField* Node::mutable_heightfield() {
  if (!has_heightfield()) {
    clear_subtype();
    set_has_heightfield();
    subtype_.heightfield_ = new ::CreateDOM::HeightField;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Node.heightField)
  return subtype_.heightfield_;
}
::CreateDOM::HeightField* Node::release_heightfield() {
  // @@protoc_insertion_point(field_release:CreateDOM.Node.heightField)
  if (has_heightfield()) {
    clear_has_subtype();
    ::CreateDOM::HeightField* temp = subtype_.heightfield_;
    subtype_.heightfield_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Node::set_allocated_heightfield(::CreateDOM::HeightField* heightfield) {
  clear_subtype();
  if (heightfield) {
    set_has_heightfield();
    subtype_.heightfield_ = heightfield;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Node.heightField)
}

// .CreateDOM.RigidBody rigidBody = 10;
bool Node::has_rigidbody() const {
  return subtype_case() == kRigidBody;
}
void Node::set_has_rigidbody() {
  _oneof_case_[0] = kRigidBody;
}
void Node::clear_rigidbody() {
  if (has_rigidbody()) {
    delete subtype_.rigidbody_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::RigidBody& Node::rigidbody() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Node.rigidBody)
  return has_rigidbody()
      ? *subtype_.rigidbody_
      : ::CreateDOM::RigidBody::default_instance();
}
::CreateDOM::RigidBody* Node::mutable_rigidbody() {
  if (!has_rigidbody()) {
    clear_subtype();
    set_has_rigidbody();
    subtype_.rigidbody_ = new ::CreateDOM::RigidBody;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Node.rigidBody)
  return subtype_.rigidbody_;
}
::CreateDOM::RigidBody* Node::release_rigidbody() {
  // @@protoc_insertion_point(field_release:CreateDOM.Node.rigidBody)
  if (has_rigidbody()) {
    clear_has_subtype();
    ::CreateDOM::RigidBody* temp = subtype_.rigidbody_;
    subtype_.rigidbody_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Node::set_allocated_rigidbody(::CreateDOM::RigidBody* rigidbody) {
  clear_subtype();
  if (rigidbody) {
    set_has_rigidbody();
    subtype_.rigidbody_ = rigidbody;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Node.rigidBody)
}

// .CreateDOM.Joint joint = 11;
bool Node::has_joint() const {
  return subtype_case() == kJoint;
}
void Node::set_has_joint() {
  _oneof_case_[0] = kJoint;
}
void Node::clear_joint() {
  if (has_joint()) {
    delete subtype_.joint_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::Joint& Node::joint() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Node.joint)
  return has_joint()
      ? *subtype_.joint_
      : ::CreateDOM::Joint::default_instance();
}
::CreateDOM::Joint* Node::mutable_joint() {
  if (!has_joint()) {
    clear_subtype();
    set_has_joint();
    subtype_.joint_ = new ::CreateDOM::Joint;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Node.joint)
  return subtype_.joint_;
}
::CreateDOM::Joint* Node::release_joint() {
  // @@protoc_insertion_point(field_release:CreateDOM.Node.joint)
  if (has_joint()) {
    clear_has_subtype();
    ::CreateDOM::Joint* temp = subtype_.joint_;
    subtype_.joint_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Node::set_allocated_joint(::CreateDOM::Joint* joint) {
  clear_subtype();
  if (joint) {
    set_has_joint();
    subtype_.joint_ = joint;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Node.joint)
}

// .CreateDOM.BodyPairFilters bodyPairFilters = 12;
bool Node::has_bodypairfilters() const {
  return subtype_case() == kBodyPairFilters;
}
void Node::set_has_bodypairfilters() {
  _oneof_case_[0] = kBodyPairFilters;
}
void Node::clear_bodypairfilters() {
  if (has_bodypairfilters()) {
    delete subtype_.bodypairfilters_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::BodyPairFilters& Node::bodypairfilters() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Node.bodyPairFilters)
  return has_bodypairfilters()
      ? *subtype_.bodypairfilters_
      : ::CreateDOM::BodyPairFilters::default_instance();
}
::CreateDOM::BodyPairFilters* Node::mutable_bodypairfilters() {
  if (!has_bodypairfilters()) {
    clear_subtype();
    set_has_bodypairfilters();
    subtype_.bodypairfilters_ = new ::CreateDOM::BodyPairFilters;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Node.bodyPairFilters)
  return subtype_.bodypairfilters_;
}
::CreateDOM::BodyPairFilters* Node::release_bodypairfilters() {
  // @@protoc_insertion_point(field_release:CreateDOM.Node.bodyPairFilters)
  if (has_bodypairfilters()) {
    clear_has_subtype();
    ::CreateDOM::BodyPairFilters* temp = subtype_.bodypairfilters_;
    subtype_.bodypairfilters_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Node::set_allocated_bodypairfilters(::CreateDOM::BodyPairFilters* bodypairfilters) {
  clear_subtype();
  if (bodypairfilters) {
    set_has_bodypairfilters();
    subtype_.bodypairfilters_ = bodypairfilters;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Node.bodyPairFilters)
}

// .CreateDOM.InstanceCollection instanceCollection = 13;
bool Node::has_instancecollection() const {
  return subtype_case() == kInstanceCollection;
}
void Node::set_has_instancecollection() {
  _oneof_case_[0] = kInstanceCollection;
}
void Node::clear_instancecollection() {
  if (has_instancecollection()) {
    delete subtype_.instancecollection_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::InstanceCollection& Node::instancecollection() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Node.instanceCollection)
  return has_instancecollection()
      ? *subtype_.instancecollection_
      : ::CreateDOM::InstanceCollection::default_instance();
}
::CreateDOM::InstanceCollection* Node::mutable_instancecollection() {
  if (!has_instancecollection()) {
    clear_subtype();
    set_has_instancecollection();
    subtype_.instancecollection_ = new ::CreateDOM::InstanceCollection;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Node.instanceCollection)
  return subtype_.instancecollection_;
}
::CreateDOM::InstanceCollection* Node::release_instancecollection() {
  // @@protoc_insertion_point(field_release:CreateDOM.Node.instanceCollection)
  if (has_instancecollection()) {
    clear_has_subtype();
    ::CreateDOM::InstanceCollection* temp = subtype_.instancecollection_;
    subtype_.instancecollection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Node::set_allocated_instancecollection(::CreateDOM::InstanceCollection* instancecollection) {
  clear_subtype();
  if (instancecollection) {
    set_has_instancecollection();
    subtype_.instancecollection_ = instancecollection;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Node.instanceCollection)
}

// .CreateDOM.Collection collection = 14;
bool Node::has_collection() const {
  return subtype_case() == kCollection;
}
void Node::set_has_collection() {
  _oneof_case_[0] = kCollection;
}
void Node::clear_collection() {
  if (has_collection()) {
    delete subtype_.collection_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::Collection& Node::collection() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Node.collection)
  return has_collection()
      ? *subtype_.collection_
      : ::CreateDOM::Collection::default_instance();
}
::CreateDOM::Collection* Node::mutable_collection() {
  if (!has_collection()) {
    clear_subtype();
    set_has_collection();
    subtype_.collection_ = new ::CreateDOM::Collection;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Node.collection)
  return subtype_.collection_;
}
::CreateDOM::Collection* Node::release_collection() {
  // @@protoc_insertion_point(field_release:CreateDOM.Node.collection)
  if (has_collection()) {
    clear_has_subtype();
    ::CreateDOM::Collection* temp = subtype_.collection_;
    subtype_.collection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Node::set_allocated_collection(::CreateDOM::Collection* collection) {
  clear_subtype();
  if (collection) {
    set_has_collection();
    subtype_.collection_ = collection;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Node.collection)
}

// .CreateDOM.Scene scene = 15;
bool Node::has_scene() const {
  return subtype_case() == kScene;
}
void Node::set_has_scene() {
  _oneof_case_[0] = kScene;
}
void Node::clear_scene() {
  if (has_scene()) {
    delete subtype_.scene_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::Scene& Node::scene() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Node.scene)
  return has_scene()
      ? *subtype_.scene_
      : ::CreateDOM::Scene::default_instance();
}
::CreateDOM::Scene* Node::mutable_scene() {
  if (!has_scene()) {
    clear_subtype();
    set_has_scene();
    subtype_.scene_ = new ::CreateDOM::Scene;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Node.scene)
  return subtype_.scene_;
}
::CreateDOM::Scene* Node::release_scene() {
  // @@protoc_insertion_point(field_release:CreateDOM.Node.scene)
  if (has_scene()) {
    clear_has_subtype();
    ::CreateDOM::Scene* temp = subtype_.scene_;
    subtype_.scene_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Node::set_allocated_scene(::CreateDOM::Scene* scene) {
  clear_subtype();
  if (scene) {
    set_has_scene();
    subtype_.scene_ = scene;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Node.scene)
}

bool Node::has_subtype() const {
  return subtype_case() != SUBTYPE_NOT_SET;
}
void Node::clear_has_subtype() {
  _oneof_case_[0] = SUBTYPE_NOT_SET;
}
Node::SubtypeCase Node::subtype_case() const {
  return Node::SubtypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeshScale::kScaleFieldNumber;
const int MeshScale::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeshScale::MeshScale()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.MeshScale)
}
MeshScale::MeshScale(const MeshScale& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scale()) {
    scale_ = new ::CreateDOM::Vec3(*from.scale_);
  } else {
    scale_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::CreateDOM::Quat(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.MeshScale)
}

void MeshScale::SharedCtor() {
  ::memset(&scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(rotation_));
  _cached_size_ = 0;
}

MeshScale::~MeshScale() {
  // @@protoc_insertion_point(destructor:CreateDOM.MeshScale)
  SharedDtor();
}

void MeshScale::SharedDtor() {
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete rotation_;
}

void MeshScale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeshScale::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MeshScale& MeshScale::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

MeshScale* MeshScale::New(::google::protobuf::Arena* arena) const {
  MeshScale* n = new MeshScale;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MeshScale::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.MeshScale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && scale_ != NULL) {
    delete scale_;
  }
  scale_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
  _internal_metadata_.Clear();
}

bool MeshScale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.MeshScale)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CreateDOM.Vec3 scale = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Quat rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.MeshScale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.MeshScale)
  return false;
#undef DO_
}

void MeshScale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.MeshScale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.Vec3 scale = 1;
  if (this->has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->scale_, output);
  }

  // .CreateDOM.Quat rotation = 2;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rotation_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.MeshScale)
}

::google::protobuf::uint8* MeshScale::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.MeshScale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.Vec3 scale = 1;
  if (this->has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->scale_, deterministic, target);
  }

  // .CreateDOM.Quat rotation = 2;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->rotation_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.MeshScale)
  return target;
}

size_t MeshScale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.MeshScale)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .CreateDOM.Vec3 scale = 1;
  if (this->has_scale()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scale_);
  }

  // .CreateDOM.Quat rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeshScale::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.MeshScale)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshScale* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeshScale>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.MeshScale)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.MeshScale)
    MergeFrom(*source);
  }
}

void MeshScale::MergeFrom(const MeshScale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.MeshScale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scale()) {
    mutable_scale()->::CreateDOM::Vec3::MergeFrom(from.scale());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::CreateDOM::Quat::MergeFrom(from.rotation());
  }
}

void MeshScale::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.MeshScale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshScale::CopyFrom(const MeshScale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.MeshScale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshScale::IsInitialized() const {
  return true;
}

void MeshScale::Swap(MeshScale* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeshScale::InternalSwap(MeshScale* other) {
  using std::swap;
  swap(scale_, other->scale_);
  swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MeshScale::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MeshScale

// .CreateDOM.Vec3 scale = 1;
bool MeshScale::has_scale() const {
  return this != internal_default_instance() && scale_ != NULL;
}
void MeshScale::clear_scale() {
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) delete scale_;
  scale_ = NULL;
}
const ::CreateDOM::Vec3& MeshScale::scale() const {
  const ::CreateDOM::Vec3* p = scale_;
  // @@protoc_insertion_point(field_get:CreateDOM.MeshScale.scale)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Vec3*>(
      &::CreateDOM::_Vec3_default_instance_);
}
::CreateDOM::Vec3* MeshScale::mutable_scale() {
  
  if (scale_ == NULL) {
    scale_ = new ::CreateDOM::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.MeshScale.scale)
  return scale_;
}
::CreateDOM::Vec3* MeshScale::release_scale() {
  // @@protoc_insertion_point(field_release:CreateDOM.MeshScale.scale)
  
  ::CreateDOM::Vec3* temp = scale_;
  scale_ = NULL;
  return temp;
}
void MeshScale::set_allocated_scale(::CreateDOM::Vec3* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.MeshScale.scale)
}

// .CreateDOM.Quat rotation = 2;
bool MeshScale::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
void MeshScale::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
const ::CreateDOM::Quat& MeshScale::rotation() const {
  const ::CreateDOM::Quat* p = rotation_;
  // @@protoc_insertion_point(field_get:CreateDOM.MeshScale.rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Quat*>(
      &::CreateDOM::_Quat_default_instance_);
}
::CreateDOM::Quat* MeshScale::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::CreateDOM::Quat;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.MeshScale.rotation)
  return rotation_;
}
::CreateDOM::Quat* MeshScale::release_rotation() {
  // @@protoc_insertion_point(field_release:CreateDOM.MeshScale.rotation)
  
  ::CreateDOM::Quat* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void MeshScale::set_allocated_rotation(::CreateDOM::Quat* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.MeshScale.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhysicsMaterial::kDisableFrictionFieldNumber;
const int PhysicsMaterial::kDisableStrongFrictionFieldNumber;
const int PhysicsMaterial::kDynamicFrictionFieldNumber;
const int PhysicsMaterial::kStaticFrictionFieldNumber;
const int PhysicsMaterial::kRestitutionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhysicsMaterial::PhysicsMaterial()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.PhysicsMaterial)
}
PhysicsMaterial::PhysicsMaterial(const PhysicsMaterial& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&disablefriction_, &from.disablefriction_,
    static_cast<size_t>(reinterpret_cast<char*>(&restitution_) -
    reinterpret_cast<char*>(&disablefriction_)) + sizeof(restitution_));
  // @@protoc_insertion_point(copy_constructor:CreateDOM.PhysicsMaterial)
}

void PhysicsMaterial::SharedCtor() {
  ::memset(&disablefriction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restitution_) -
      reinterpret_cast<char*>(&disablefriction_)) + sizeof(restitution_));
  _cached_size_ = 0;
}

PhysicsMaterial::~PhysicsMaterial() {
  // @@protoc_insertion_point(destructor:CreateDOM.PhysicsMaterial)
  SharedDtor();
}

void PhysicsMaterial::SharedDtor() {
}

void PhysicsMaterial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhysicsMaterial::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhysicsMaterial& PhysicsMaterial::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

PhysicsMaterial* PhysicsMaterial::New(::google::protobuf::Arena* arena) const {
  PhysicsMaterial* n = new PhysicsMaterial;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhysicsMaterial::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.PhysicsMaterial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&disablefriction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restitution_) -
      reinterpret_cast<char*>(&disablefriction_)) + sizeof(restitution_));
  _internal_metadata_.Clear();
}

bool PhysicsMaterial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.PhysicsMaterial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool disableFriction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disablefriction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disableStrongFriction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disablestrongfriction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dynamicFriction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dynamicfriction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float staticFriction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &staticfriction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float restitution = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &restitution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.PhysicsMaterial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.PhysicsMaterial)
  return false;
#undef DO_
}

void PhysicsMaterial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.PhysicsMaterial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disableFriction = 1;
  if (this->disablefriction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disablefriction(), output);
  }

  // bool disableStrongFriction = 2;
  if (this->disablestrongfriction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->disablestrongfriction(), output);
  }

  // float dynamicFriction = 3;
  if (this->dynamicfriction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dynamicfriction(), output);
  }

  // float staticFriction = 4;
  if (this->staticfriction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->staticfriction(), output);
  }

  // float restitution = 5;
  if (this->restitution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->restitution(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.PhysicsMaterial)
}

::google::protobuf::uint8* PhysicsMaterial::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.PhysicsMaterial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disableFriction = 1;
  if (this->disablefriction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disablefriction(), target);
  }

  // bool disableStrongFriction = 2;
  if (this->disablestrongfriction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->disablestrongfriction(), target);
  }

  // float dynamicFriction = 3;
  if (this->dynamicfriction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dynamicfriction(), target);
  }

  // float staticFriction = 4;
  if (this->staticfriction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->staticfriction(), target);
  }

  // float restitution = 5;
  if (this->restitution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->restitution(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.PhysicsMaterial)
  return target;
}

size_t PhysicsMaterial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.PhysicsMaterial)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool disableFriction = 1;
  if (this->disablefriction() != 0) {
    total_size += 1 + 1;
  }

  // bool disableStrongFriction = 2;
  if (this->disablestrongfriction() != 0) {
    total_size += 1 + 1;
  }

  // float dynamicFriction = 3;
  if (this->dynamicfriction() != 0) {
    total_size += 1 + 4;
  }

  // float staticFriction = 4;
  if (this->staticfriction() != 0) {
    total_size += 1 + 4;
  }

  // float restitution = 5;
  if (this->restitution() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhysicsMaterial::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.PhysicsMaterial)
  GOOGLE_DCHECK_NE(&from, this);
  const PhysicsMaterial* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhysicsMaterial>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.PhysicsMaterial)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.PhysicsMaterial)
    MergeFrom(*source);
  }
}

void PhysicsMaterial::MergeFrom(const PhysicsMaterial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.PhysicsMaterial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.disablefriction() != 0) {
    set_disablefriction(from.disablefriction());
  }
  if (from.disablestrongfriction() != 0) {
    set_disablestrongfriction(from.disablestrongfriction());
  }
  if (from.dynamicfriction() != 0) {
    set_dynamicfriction(from.dynamicfriction());
  }
  if (from.staticfriction() != 0) {
    set_staticfriction(from.staticfriction());
  }
  if (from.restitution() != 0) {
    set_restitution(from.restitution());
  }
}

void PhysicsMaterial::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.PhysicsMaterial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicsMaterial::CopyFrom(const PhysicsMaterial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.PhysicsMaterial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicsMaterial::IsInitialized() const {
  return true;
}

void PhysicsMaterial::Swap(PhysicsMaterial* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhysicsMaterial::InternalSwap(PhysicsMaterial* other) {
  using std::swap;
  swap(disablefriction_, other->disablefriction_);
  swap(disablestrongfriction_, other->disablestrongfriction_);
  swap(dynamicfriction_, other->dynamicfriction_);
  swap(staticfriction_, other->staticfriction_);
  swap(restitution_, other->restitution_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhysicsMaterial::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhysicsMaterial

// bool disableFriction = 1;
void PhysicsMaterial::clear_disablefriction() {
  disablefriction_ = false;
}
bool PhysicsMaterial::disablefriction() const {
  // @@protoc_insertion_point(field_get:CreateDOM.PhysicsMaterial.disableFriction)
  return disablefriction_;
}
void PhysicsMaterial::set_disablefriction(bool value) {
  
  disablefriction_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.PhysicsMaterial.disableFriction)
}

// bool disableStrongFriction = 2;
void PhysicsMaterial::clear_disablestrongfriction() {
  disablestrongfriction_ = false;
}
bool PhysicsMaterial::disablestrongfriction() const {
  // @@protoc_insertion_point(field_get:CreateDOM.PhysicsMaterial.disableStrongFriction)
  return disablestrongfriction_;
}
void PhysicsMaterial::set_disablestrongfriction(bool value) {
  
  disablestrongfriction_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.PhysicsMaterial.disableStrongFriction)
}

// float dynamicFriction = 3;
void PhysicsMaterial::clear_dynamicfriction() {
  dynamicfriction_ = 0;
}
float PhysicsMaterial::dynamicfriction() const {
  // @@protoc_insertion_point(field_get:CreateDOM.PhysicsMaterial.dynamicFriction)
  return dynamicfriction_;
}
void PhysicsMaterial::set_dynamicfriction(float value) {
  
  dynamicfriction_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.PhysicsMaterial.dynamicFriction)
}

// float staticFriction = 4;
void PhysicsMaterial::clear_staticfriction() {
  staticfriction_ = 0;
}
float PhysicsMaterial::staticfriction() const {
  // @@protoc_insertion_point(field_get:CreateDOM.PhysicsMaterial.staticFriction)
  return staticfriction_;
}
void PhysicsMaterial::set_staticfriction(float value) {
  
  staticfriction_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.PhysicsMaterial.staticFriction)
}

// float restitution = 5;
void PhysicsMaterial::clear_restitution() {
  restitution_ = 0;
}
float PhysicsMaterial::restitution() const {
  // @@protoc_insertion_point(field_get:CreateDOM.PhysicsMaterial.restitution)
  return restitution_;
}
void PhysicsMaterial::set_restitution(float value) {
  
  restitution_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.PhysicsMaterial.restitution)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvexHull::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvexHull::ConvexHull()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.ConvexHull)
}
ConvexHull::ConvexHull(const ConvexHull& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CreateDOM.ConvexHull)
}

void ConvexHull::SharedCtor() {
  _cached_size_ = 0;
}

ConvexHull::~ConvexHull() {
  // @@protoc_insertion_point(destructor:CreateDOM.ConvexHull)
  SharedDtor();
}

void ConvexHull::SharedDtor() {
}

void ConvexHull::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvexHull::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConvexHull& ConvexHull::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConvexHull* ConvexHull::New(::google::protobuf::Arena* arena) const {
  ConvexHull* n = new ConvexHull;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConvexHull::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.ConvexHull)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear();
}

bool ConvexHull::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.ConvexHull)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CreateDOM.Vec3 points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.ConvexHull)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.ConvexHull)
  return false;
#undef DO_
}

void ConvexHull::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.ConvexHull)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CreateDOM.Vec3 points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.ConvexHull)
}

::google::protobuf::uint8* ConvexHull::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.ConvexHull)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CreateDOM.Vec3 points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.ConvexHull)
  return target;
}

size_t ConvexHull::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.ConvexHull)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CreateDOM.Vec3 points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvexHull::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.ConvexHull)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvexHull* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvexHull>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.ConvexHull)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.ConvexHull)
    MergeFrom(*source);
  }
}

void ConvexHull::MergeFrom(const ConvexHull& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.ConvexHull)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void ConvexHull::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.ConvexHull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvexHull::CopyFrom(const ConvexHull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.ConvexHull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvexHull::IsInitialized() const {
  return true;
}

void ConvexHull::Swap(ConvexHull* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvexHull::InternalSwap(ConvexHull* other) {
  using std::swap;
  points_.InternalSwap(&other->points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvexHull::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvexHull

// repeated .CreateDOM.Vec3 points = 1;
int ConvexHull::points_size() const {
  return points_.size();
}
void ConvexHull::clear_points() {
  points_.Clear();
}
const ::CreateDOM::Vec3& ConvexHull::points(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.ConvexHull.points)
  return points_.Get(index);
}
::CreateDOM::Vec3* ConvexHull::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:CreateDOM.ConvexHull.points)
  return points_.Mutable(index);
}
::CreateDOM::Vec3* ConvexHull::add_points() {
  // @@protoc_insertion_point(field_add:CreateDOM.ConvexHull.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::CreateDOM::Vec3 >*
ConvexHull::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.ConvexHull.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::CreateDOM::Vec3 >&
ConvexHull::points() const {
  // @@protoc_insertion_point(field_list:CreateDOM.ConvexHull.points)
  return points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TriangleMesh::kPointsFieldNumber;
const int TriangleMesh::kTrianglesFieldNumber;
const int TriangleMesh::kMaterialIndicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TriangleMesh::TriangleMesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.TriangleMesh)
}
TriangleMesh::TriangleMesh(const TriangleMesh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      triangles_(from.triangles_),
      materialindices_(from.materialindices_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CreateDOM.TriangleMesh)
}

void TriangleMesh::SharedCtor() {
  _cached_size_ = 0;
}

TriangleMesh::~TriangleMesh() {
  // @@protoc_insertion_point(destructor:CreateDOM.TriangleMesh)
  SharedDtor();
}

void TriangleMesh::SharedDtor() {
}

void TriangleMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriangleMesh::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TriangleMesh& TriangleMesh::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

TriangleMesh* TriangleMesh::New(::google::protobuf::Arena* arena) const {
  TriangleMesh* n = new TriangleMesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TriangleMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.TriangleMesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  triangles_.Clear();
  materialindices_.Clear();
  _internal_metadata_.Clear();
}

bool TriangleMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.TriangleMesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CreateDOM.Vec3 points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 triangles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_triangles())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_triangles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 materialIndices = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_materialindices())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_materialindices())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.TriangleMesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.TriangleMesh)
  return false;
#undef DO_
}

void TriangleMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.TriangleMesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CreateDOM.Vec3 points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(static_cast<int>(i)), output);
  }

  // repeated uint32 triangles = 2;
  if (this->triangles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _triangles_cached_byte_size_));
  }
  for (int i = 0, n = this->triangles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->triangles(i), output);
  }

  // repeated uint32 materialIndices = 3;
  if (this->materialindices_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _materialindices_cached_byte_size_));
  }
  for (int i = 0, n = this->materialindices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->materialindices(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.TriangleMesh)
}

::google::protobuf::uint8* TriangleMesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.TriangleMesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CreateDOM.Vec3 points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->points(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 triangles = 2;
  if (this->triangles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _triangles_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->triangles_, target);
  }

  // repeated uint32 materialIndices = 3;
  if (this->materialindices_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _materialindices_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->materialindices_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.TriangleMesh)
  return target;
}

size_t TriangleMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.TriangleMesh)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CreateDOM.Vec3 points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(static_cast<int>(i)));
    }
  }

  // repeated uint32 triangles = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->triangles_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _triangles_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 materialIndices = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->materialindices_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _materialindices_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriangleMesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.TriangleMesh)
  GOOGLE_DCHECK_NE(&from, this);
  const TriangleMesh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TriangleMesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.TriangleMesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.TriangleMesh)
    MergeFrom(*source);
  }
}

void TriangleMesh::MergeFrom(const TriangleMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.TriangleMesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  triangles_.MergeFrom(from.triangles_);
  materialindices_.MergeFrom(from.materialindices_);
}

void TriangleMesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.TriangleMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriangleMesh::CopyFrom(const TriangleMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.TriangleMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriangleMesh::IsInitialized() const {
  return true;
}

void TriangleMesh::Swap(TriangleMesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TriangleMesh::InternalSwap(TriangleMesh* other) {
  using std::swap;
  points_.InternalSwap(&other->points_);
  triangles_.InternalSwap(&other->triangles_);
  materialindices_.InternalSwap(&other->materialindices_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TriangleMesh::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TriangleMesh

// repeated .CreateDOM.Vec3 points = 1;
int TriangleMesh::points_size() const {
  return points_.size();
}
void TriangleMesh::clear_points() {
  points_.Clear();
}
const ::CreateDOM::Vec3& TriangleMesh::points(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.TriangleMesh.points)
  return points_.Get(index);
}
::CreateDOM::Vec3* TriangleMesh::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:CreateDOM.TriangleMesh.points)
  return points_.Mutable(index);
}
::CreateDOM::Vec3* TriangleMesh::add_points() {
  // @@protoc_insertion_point(field_add:CreateDOM.TriangleMesh.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::CreateDOM::Vec3 >*
TriangleMesh::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.TriangleMesh.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::CreateDOM::Vec3 >&
TriangleMesh::points() const {
  // @@protoc_insertion_point(field_list:CreateDOM.TriangleMesh.points)
  return points_;
}

// repeated uint32 triangles = 2;
int TriangleMesh::triangles_size() const {
  return triangles_.size();
}
void TriangleMesh::clear_triangles() {
  triangles_.Clear();
}
::google::protobuf::uint32 TriangleMesh::triangles(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.TriangleMesh.triangles)
  return triangles_.Get(index);
}
void TriangleMesh::set_triangles(int index, ::google::protobuf::uint32 value) {
  triangles_.Set(index, value);
  // @@protoc_insertion_point(field_set:CreateDOM.TriangleMesh.triangles)
}
void TriangleMesh::add_triangles(::google::protobuf::uint32 value) {
  triangles_.Add(value);
  // @@protoc_insertion_point(field_add:CreateDOM.TriangleMesh.triangles)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TriangleMesh::triangles() const {
  // @@protoc_insertion_point(field_list:CreateDOM.TriangleMesh.triangles)
  return triangles_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TriangleMesh::mutable_triangles() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.TriangleMesh.triangles)
  return &triangles_;
}

// repeated uint32 materialIndices = 3;
int TriangleMesh::materialindices_size() const {
  return materialindices_.size();
}
void TriangleMesh::clear_materialindices() {
  materialindices_.Clear();
}
::google::protobuf::uint32 TriangleMesh::materialindices(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.TriangleMesh.materialIndices)
  return materialindices_.Get(index);
}
void TriangleMesh::set_materialindices(int index, ::google::protobuf::uint32 value) {
  materialindices_.Set(index, value);
  // @@protoc_insertion_point(field_set:CreateDOM.TriangleMesh.materialIndices)
}
void TriangleMesh::add_materialindices(::google::protobuf::uint32 value) {
  materialindices_.Add(value);
  // @@protoc_insertion_point(field_add:CreateDOM.TriangleMesh.materialIndices)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TriangleMesh::materialindices() const {
  // @@protoc_insertion_point(field_list:CreateDOM.TriangleMesh.materialIndices)
  return materialindices_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TriangleMesh::mutable_materialindices() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.TriangleMesh.materialIndices)
  return &materialindices_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeightField::kRowCountFieldNumber;
const int HeightField::kColumnCountFieldNumber;
const int HeightField::kSamplesFieldNumber;
const int HeightField::kMetaDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeightField::HeightField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.HeightField)
}
HeightField::HeightField(const HeightField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      samples_(from.samples_),
      metadata_(from.metadata_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rowcount_, &from.rowcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&columncount_) -
    reinterpret_cast<char*>(&rowcount_)) + sizeof(columncount_));
  // @@protoc_insertion_point(copy_constructor:CreateDOM.HeightField)
}

void HeightField::SharedCtor() {
  ::memset(&rowcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&columncount_) -
      reinterpret_cast<char*>(&rowcount_)) + sizeof(columncount_));
  _cached_size_ = 0;
}

HeightField::~HeightField() {
  // @@protoc_insertion_point(destructor:CreateDOM.HeightField)
  SharedDtor();
}

void HeightField::SharedDtor() {
}

void HeightField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeightField::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeightField& HeightField::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeightField* HeightField::New(::google::protobuf::Arena* arena) const {
  HeightField* n = new HeightField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeightField::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.HeightField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  metadata_.Clear();
  ::memset(&rowcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&columncount_) -
      reinterpret_cast<char*>(&rowcount_)) + sizeof(columncount_));
  _internal_metadata_.Clear();
}

bool HeightField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.HeightField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 rowCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rowcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 columnCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &columncount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 samples = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_samples())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_samples())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 metaData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_metadata())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_metadata())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.HeightField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.HeightField)
  return false;
#undef DO_
}

void HeightField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.HeightField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rowCount = 1;
  if (this->rowcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rowcount(), output);
  }

  // uint32 columnCount = 2;
  if (this->columncount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->columncount(), output);
  }

  // repeated uint32 samples = 3;
  if (this->samples_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _samples_cached_byte_size_));
  }
  for (int i = 0, n = this->samples_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->samples(i), output);
  }

  // repeated uint32 metaData = 4;
  if (this->metadata_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _metadata_cached_byte_size_));
  }
  for (int i = 0, n = this->metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->metadata(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.HeightField)
}

::google::protobuf::uint8* HeightField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.HeightField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rowCount = 1;
  if (this->rowcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rowcount(), target);
  }

  // uint32 columnCount = 2;
  if (this->columncount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->columncount(), target);
  }

  // repeated uint32 samples = 3;
  if (this->samples_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _samples_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->samples_, target);
  }

  // repeated uint32 metaData = 4;
  if (this->metadata_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _metadata_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->metadata_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.HeightField)
  return target;
}

size_t HeightField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.HeightField)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 samples = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->samples_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _samples_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 metaData = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->metadata_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _metadata_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 rowCount = 1;
  if (this->rowcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rowcount());
  }

  // uint32 columnCount = 2;
  if (this->columncount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->columncount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeightField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.HeightField)
  GOOGLE_DCHECK_NE(&from, this);
  const HeightField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeightField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.HeightField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.HeightField)
    MergeFrom(*source);
  }
}

void HeightField::MergeFrom(const HeightField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.HeightField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
  metadata_.MergeFrom(from.metadata_);
  if (from.rowcount() != 0) {
    set_rowcount(from.rowcount());
  }
  if (from.columncount() != 0) {
    set_columncount(from.columncount());
  }
}

void HeightField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.HeightField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightField::CopyFrom(const HeightField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.HeightField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightField::IsInitialized() const {
  return true;
}

void HeightField::Swap(HeightField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeightField::InternalSwap(HeightField* other) {
  using std::swap;
  samples_.InternalSwap(&other->samples_);
  metadata_.InternalSwap(&other->metadata_);
  swap(rowcount_, other->rowcount_);
  swap(columncount_, other->columncount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeightField::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeightField

// uint32 rowCount = 1;
void HeightField::clear_rowcount() {
  rowcount_ = 0u;
}
::google::protobuf::uint32 HeightField::rowcount() const {
  // @@protoc_insertion_point(field_get:CreateDOM.HeightField.rowCount)
  return rowcount_;
}
void HeightField::set_rowcount(::google::protobuf::uint32 value) {
  
  rowcount_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.HeightField.rowCount)
}

// uint32 columnCount = 2;
void HeightField::clear_columncount() {
  columncount_ = 0u;
}
::google::protobuf::uint32 HeightField::columncount() const {
  // @@protoc_insertion_point(field_get:CreateDOM.HeightField.columnCount)
  return columncount_;
}
void HeightField::set_columncount(::google::protobuf::uint32 value) {
  
  columncount_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.HeightField.columnCount)
}

// repeated uint32 samples = 3;
int HeightField::samples_size() const {
  return samples_.size();
}
void HeightField::clear_samples() {
  samples_.Clear();
}
::google::protobuf::uint32 HeightField::samples(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.HeightField.samples)
  return samples_.Get(index);
}
void HeightField::set_samples(int index, ::google::protobuf::uint32 value) {
  samples_.Set(index, value);
  // @@protoc_insertion_point(field_set:CreateDOM.HeightField.samples)
}
void HeightField::add_samples(::google::protobuf::uint32 value) {
  samples_.Add(value);
  // @@protoc_insertion_point(field_add:CreateDOM.HeightField.samples)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HeightField::samples() const {
  // @@protoc_insertion_point(field_list:CreateDOM.HeightField.samples)
  return samples_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HeightField::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.HeightField.samples)
  return &samples_;
}

// repeated uint32 metaData = 4;
int HeightField::metadata_size() const {
  return metadata_.size();
}
void HeightField::clear_metadata() {
  metadata_.Clear();
}
::google::protobuf::uint32 HeightField::metadata(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.HeightField.metaData)
  return metadata_.Get(index);
}
void HeightField::set_metadata(int index, ::google::protobuf::uint32 value) {
  metadata_.Set(index, value);
  // @@protoc_insertion_point(field_set:CreateDOM.HeightField.metaData)
}
void HeightField::add_metadata(::google::protobuf::uint32 value) {
  metadata_.Add(value);
  // @@protoc_insertion_point(field_add:CreateDOM.HeightField.metaData)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HeightField::metadata() const {
  // @@protoc_insertion_point(field_list:CreateDOM.HeightField.metaData)
  return metadata_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HeightField::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.HeightField.metaData)
  return &metadata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Geometry::kTypeFieldNumber;
const int Geometry::kBoxGeometryFieldNumber;
const int Geometry::kSphereGeometryFieldNumber;
const int Geometry::kCapsuleGeometryFieldNumber;
const int Geometry::kCylinderGeometryFieldNumber;
const int Geometry::kConvexHullGeometryFieldNumber;
const int Geometry::kTriangleMeshGeometryFieldNumber;
const int Geometry::kHeightFieldGeometryFieldNumber;
const int Geometry::kPlaneGeometryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Geometry::Geometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.Geometry)
}
Geometry::Geometry(const Geometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_subtype();
  switch (from.subtype_case()) {
    case kBoxGeometry: {
      mutable_boxgeometry()->::CreateDOM::BoxGeometry::MergeFrom(from.boxgeometry());
      break;
    }
    case kSphereGeometry: {
      mutable_spheregeometry()->::CreateDOM::SphereGeometry::MergeFrom(from.spheregeometry());
      break;
    }
    case kCapsuleGeometry: {
      mutable_capsulegeometry()->::CreateDOM::CapsuleGeometry::MergeFrom(from.capsulegeometry());
      break;
    }
    case kCylinderGeometry: {
      mutable_cylindergeometry()->::CreateDOM::CylinderGeometry::MergeFrom(from.cylindergeometry());
      break;
    }
    case kConvexHullGeometry: {
      mutable_convexhullgeometry()->::CreateDOM::ConvexHullGeometry::MergeFrom(from.convexhullgeometry());
      break;
    }
    case kTriangleMeshGeometry: {
      mutable_trianglemeshgeometry()->::CreateDOM::TriangleMeshGeometry::MergeFrom(from.trianglemeshgeometry());
      break;
    }
    case kHeightFieldGeometry: {
      mutable_heightfieldgeometry()->::CreateDOM::HeightFieldGeometry::MergeFrom(from.heightfieldgeometry());
      break;
    }
    case kPlaneGeometry: {
      mutable_planegeometry()->::CreateDOM::PlaneGeometry::MergeFrom(from.planegeometry());
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.Geometry)
}

void Geometry::SharedCtor() {
  type_ = 0;
  clear_has_subtype();
  _cached_size_ = 0;
}

Geometry::~Geometry() {
  // @@protoc_insertion_point(destructor:CreateDOM.Geometry)
  SharedDtor();
}

void Geometry::SharedDtor() {
  if (has_subtype()) {
    clear_subtype();
  }
}

void Geometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Geometry::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Geometry& Geometry::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

Geometry* Geometry::New(::google::protobuf::Arena* arena) const {
  Geometry* n = new Geometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Geometry::clear_subtype() {
// @@protoc_insertion_point(one_of_clear_start:CreateDOM.Geometry)
  switch (subtype_case()) {
    case kBoxGeometry: {
      delete subtype_.boxgeometry_;
      break;
    }
    case kSphereGeometry: {
      delete subtype_.spheregeometry_;
      break;
    }
    case kCapsuleGeometry: {
      delete subtype_.capsulegeometry_;
      break;
    }
    case kCylinderGeometry: {
      delete subtype_.cylindergeometry_;
      break;
    }
    case kConvexHullGeometry: {
      delete subtype_.convexhullgeometry_;
      break;
    }
    case kTriangleMeshGeometry: {
      delete subtype_.trianglemeshgeometry_;
      break;
    }
    case kHeightFieldGeometry: {
      delete subtype_.heightfieldgeometry_;
      break;
    }
    case kPlaneGeometry: {
      delete subtype_.planegeometry_;
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUBTYPE_NOT_SET;
}


void Geometry::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_subtype();
  _internal_metadata_.Clear();
}

bool Geometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.Geometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CreateDOM.GeometryType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::CreateDOM::GeometryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.BoxGeometry boxGeometry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boxgeometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.SphereGeometry sphereGeometry = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spheregeometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.CapsuleGeometry capsuleGeometry = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capsulegeometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.CylinderGeometry cylinderGeometry = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cylindergeometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.ConvexHullGeometry convexHullGeometry = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convexhullgeometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.TriangleMeshGeometry triangleMeshGeometry = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trianglemeshgeometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.HeightFieldGeometry heightFieldGeometry = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heightfieldgeometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.PlaneGeometry planeGeometry = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planegeometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.Geometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.Geometry)
  return false;
#undef DO_
}

void Geometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.GeometryType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .CreateDOM.BoxGeometry boxGeometry = 2;
  if (has_boxgeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *subtype_.boxgeometry_, output);
  }

  // .CreateDOM.SphereGeometry sphereGeometry = 3;
  if (has_spheregeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *subtype_.spheregeometry_, output);
  }

  // .CreateDOM.CapsuleGeometry capsuleGeometry = 4;
  if (has_capsulegeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *subtype_.capsulegeometry_, output);
  }

  // .CreateDOM.CylinderGeometry cylinderGeometry = 5;
  if (has_cylindergeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *subtype_.cylindergeometry_, output);
  }

  // .CreateDOM.ConvexHullGeometry convexHullGeometry = 6;
  if (has_convexhullgeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *subtype_.convexhullgeometry_, output);
  }

  // .CreateDOM.TriangleMeshGeometry triangleMeshGeometry = 7;
  if (has_trianglemeshgeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *subtype_.trianglemeshgeometry_, output);
  }

  // .CreateDOM.HeightFieldGeometry heightFieldGeometry = 8;
  if (has_heightfieldgeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *subtype_.heightfieldgeometry_, output);
  }

  // .CreateDOM.PlaneGeometry planeGeometry = 9;
  if (has_planegeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *subtype_.planegeometry_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.Geometry)
}

::google::protobuf::uint8* Geometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.GeometryType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .CreateDOM.BoxGeometry boxGeometry = 2;
  if (has_boxgeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *subtype_.boxgeometry_, deterministic, target);
  }

  // .CreateDOM.SphereGeometry sphereGeometry = 3;
  if (has_spheregeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *subtype_.spheregeometry_, deterministic, target);
  }

  // .CreateDOM.CapsuleGeometry capsuleGeometry = 4;
  if (has_capsulegeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *subtype_.capsulegeometry_, deterministic, target);
  }

  // .CreateDOM.CylinderGeometry cylinderGeometry = 5;
  if (has_cylindergeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *subtype_.cylindergeometry_, deterministic, target);
  }

  // .CreateDOM.ConvexHullGeometry convexHullGeometry = 6;
  if (has_convexhullgeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *subtype_.convexhullgeometry_, deterministic, target);
  }

  // .CreateDOM.TriangleMeshGeometry triangleMeshGeometry = 7;
  if (has_trianglemeshgeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *subtype_.trianglemeshgeometry_, deterministic, target);
  }

  // .CreateDOM.HeightFieldGeometry heightFieldGeometry = 8;
  if (has_heightfieldgeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *subtype_.heightfieldgeometry_, deterministic, target);
  }

  // .CreateDOM.PlaneGeometry planeGeometry = 9;
  if (has_planegeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *subtype_.planegeometry_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.Geometry)
  return target;
}

size_t Geometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.Geometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .CreateDOM.GeometryType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (subtype_case()) {
    // .CreateDOM.BoxGeometry boxGeometry = 2;
    case kBoxGeometry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.boxgeometry_);
      break;
    }
    // .CreateDOM.SphereGeometry sphereGeometry = 3;
    case kSphereGeometry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.spheregeometry_);
      break;
    }
    // .CreateDOM.CapsuleGeometry capsuleGeometry = 4;
    case kCapsuleGeometry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.capsulegeometry_);
      break;
    }
    // .CreateDOM.CylinderGeometry cylinderGeometry = 5;
    case kCylinderGeometry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.cylindergeometry_);
      break;
    }
    // .CreateDOM.ConvexHullGeometry convexHullGeometry = 6;
    case kConvexHullGeometry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.convexhullgeometry_);
      break;
    }
    // .CreateDOM.TriangleMeshGeometry triangleMeshGeometry = 7;
    case kTriangleMeshGeometry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.trianglemeshgeometry_);
      break;
    }
    // .CreateDOM.HeightFieldGeometry heightFieldGeometry = 8;
    case kHeightFieldGeometry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.heightfieldgeometry_);
      break;
    }
    // .CreateDOM.PlaneGeometry planeGeometry = 9;
    case kPlaneGeometry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.planegeometry_);
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Geometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Geometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Geometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.Geometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.Geometry)
    MergeFrom(*source);
  }
}

void Geometry::MergeFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.subtype_case()) {
    case kBoxGeometry: {
      mutable_boxgeometry()->::CreateDOM::BoxGeometry::MergeFrom(from.boxgeometry());
      break;
    }
    case kSphereGeometry: {
      mutable_spheregeometry()->::CreateDOM::SphereGeometry::MergeFrom(from.spheregeometry());
      break;
    }
    case kCapsuleGeometry: {
      mutable_capsulegeometry()->::CreateDOM::CapsuleGeometry::MergeFrom(from.capsulegeometry());
      break;
    }
    case kCylinderGeometry: {
      mutable_cylindergeometry()->::CreateDOM::CylinderGeometry::MergeFrom(from.cylindergeometry());
      break;
    }
    case kConvexHullGeometry: {
      mutable_convexhullgeometry()->::CreateDOM::ConvexHullGeometry::MergeFrom(from.convexhullgeometry());
      break;
    }
    case kTriangleMeshGeometry: {
      mutable_trianglemeshgeometry()->::CreateDOM::TriangleMeshGeometry::MergeFrom(from.trianglemeshgeometry());
      break;
    }
    case kHeightFieldGeometry: {
      mutable_heightfieldgeometry()->::CreateDOM::HeightFieldGeometry::MergeFrom(from.heightfieldgeometry());
      break;
    }
    case kPlaneGeometry: {
      mutable_planegeometry()->::CreateDOM::PlaneGeometry::MergeFrom(from.planegeometry());
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
}

void Geometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geometry::CopyFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geometry::IsInitialized() const {
  return true;
}

void Geometry::Swap(Geometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Geometry::InternalSwap(Geometry* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(subtype_, other->subtype_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Geometry::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Geometry

// .CreateDOM.GeometryType type = 1;
void Geometry::clear_type() {
  type_ = 0;
}
::CreateDOM::GeometryType Geometry::type() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Geometry.type)
  return static_cast< ::CreateDOM::GeometryType >(type_);
}
void Geometry::set_type(::CreateDOM::GeometryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.Geometry.type)
}

// .CreateDOM.BoxGeometry boxGeometry = 2;
bool Geometry::has_boxgeometry() const {
  return subtype_case() == kBoxGeometry;
}
void Geometry::set_has_boxgeometry() {
  _oneof_case_[0] = kBoxGeometry;
}
void Geometry::clear_boxgeometry() {
  if (has_boxgeometry()) {
    delete subtype_.boxgeometry_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::BoxGeometry& Geometry::boxgeometry() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Geometry.boxGeometry)
  return has_boxgeometry()
      ? *subtype_.boxgeometry_
      : ::CreateDOM::BoxGeometry::default_instance();
}
::CreateDOM::BoxGeometry* Geometry::mutable_boxgeometry() {
  if (!has_boxgeometry()) {
    clear_subtype();
    set_has_boxgeometry();
    subtype_.boxgeometry_ = new ::CreateDOM::BoxGeometry;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Geometry.boxGeometry)
  return subtype_.boxgeometry_;
}
::CreateDOM::BoxGeometry* Geometry::release_boxgeometry() {
  // @@protoc_insertion_point(field_release:CreateDOM.Geometry.boxGeometry)
  if (has_boxgeometry()) {
    clear_has_subtype();
    ::CreateDOM::BoxGeometry* temp = subtype_.boxgeometry_;
    subtype_.boxgeometry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Geometry::set_allocated_boxgeometry(::CreateDOM::BoxGeometry* boxgeometry) {
  clear_subtype();
  if (boxgeometry) {
    set_has_boxgeometry();
    subtype_.boxgeometry_ = boxgeometry;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Geometry.boxGeometry)
}

// .CreateDOM.SphereGeometry sphereGeometry = 3;
bool Geometry::has_spheregeometry() const {
  return subtype_case() == kSphereGeometry;
}
void Geometry::set_has_spheregeometry() {
  _oneof_case_[0] = kSphereGeometry;
}
void Geometry::clear_spheregeometry() {
  if (has_spheregeometry()) {
    delete subtype_.spheregeometry_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::SphereGeometry& Geometry::spheregeometry() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Geometry.sphereGeometry)
  return has_spheregeometry()
      ? *subtype_.spheregeometry_
      : ::CreateDOM::SphereGeometry::default_instance();
}
::CreateDOM::SphereGeometry* Geometry::mutable_spheregeometry() {
  if (!has_spheregeometry()) {
    clear_subtype();
    set_has_spheregeometry();
    subtype_.spheregeometry_ = new ::CreateDOM::SphereGeometry;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Geometry.sphereGeometry)
  return subtype_.spheregeometry_;
}
::CreateDOM::SphereGeometry* Geometry::release_spheregeometry() {
  // @@protoc_insertion_point(field_release:CreateDOM.Geometry.sphereGeometry)
  if (has_spheregeometry()) {
    clear_has_subtype();
    ::CreateDOM::SphereGeometry* temp = subtype_.spheregeometry_;
    subtype_.spheregeometry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Geometry::set_allocated_spheregeometry(::CreateDOM::SphereGeometry* spheregeometry) {
  clear_subtype();
  if (spheregeometry) {
    set_has_spheregeometry();
    subtype_.spheregeometry_ = spheregeometry;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Geometry.sphereGeometry)
}

// .CreateDOM.CapsuleGeometry capsuleGeometry = 4;
bool Geometry::has_capsulegeometry() const {
  return subtype_case() == kCapsuleGeometry;
}
void Geometry::set_has_capsulegeometry() {
  _oneof_case_[0] = kCapsuleGeometry;
}
void Geometry::clear_capsulegeometry() {
  if (has_capsulegeometry()) {
    delete subtype_.capsulegeometry_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::CapsuleGeometry& Geometry::capsulegeometry() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Geometry.capsuleGeometry)
  return has_capsulegeometry()
      ? *subtype_.capsulegeometry_
      : ::CreateDOM::CapsuleGeometry::default_instance();
}
::CreateDOM::CapsuleGeometry* Geometry::mutable_capsulegeometry() {
  if (!has_capsulegeometry()) {
    clear_subtype();
    set_has_capsulegeometry();
    subtype_.capsulegeometry_ = new ::CreateDOM::CapsuleGeometry;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Geometry.capsuleGeometry)
  return subtype_.capsulegeometry_;
}
::CreateDOM::CapsuleGeometry* Geometry::release_capsulegeometry() {
  // @@protoc_insertion_point(field_release:CreateDOM.Geometry.capsuleGeometry)
  if (has_capsulegeometry()) {
    clear_has_subtype();
    ::CreateDOM::CapsuleGeometry* temp = subtype_.capsulegeometry_;
    subtype_.capsulegeometry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Geometry::set_allocated_capsulegeometry(::CreateDOM::CapsuleGeometry* capsulegeometry) {
  clear_subtype();
  if (capsulegeometry) {
    set_has_capsulegeometry();
    subtype_.capsulegeometry_ = capsulegeometry;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Geometry.capsuleGeometry)
}

// .CreateDOM.CylinderGeometry cylinderGeometry = 5;
bool Geometry::has_cylindergeometry() const {
  return subtype_case() == kCylinderGeometry;
}
void Geometry::set_has_cylindergeometry() {
  _oneof_case_[0] = kCylinderGeometry;
}
void Geometry::clear_cylindergeometry() {
  if (has_cylindergeometry()) {
    delete subtype_.cylindergeometry_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::CylinderGeometry& Geometry::cylindergeometry() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Geometry.cylinderGeometry)
  return has_cylindergeometry()
      ? *subtype_.cylindergeometry_
      : ::CreateDOM::CylinderGeometry::default_instance();
}
::CreateDOM::CylinderGeometry* Geometry::mutable_cylindergeometry() {
  if (!has_cylindergeometry()) {
    clear_subtype();
    set_has_cylindergeometry();
    subtype_.cylindergeometry_ = new ::CreateDOM::CylinderGeometry;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Geometry.cylinderGeometry)
  return subtype_.cylindergeometry_;
}
::CreateDOM::CylinderGeometry* Geometry::release_cylindergeometry() {
  // @@protoc_insertion_point(field_release:CreateDOM.Geometry.cylinderGeometry)
  if (has_cylindergeometry()) {
    clear_has_subtype();
    ::CreateDOM::CylinderGeometry* temp = subtype_.cylindergeometry_;
    subtype_.cylindergeometry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Geometry::set_allocated_cylindergeometry(::CreateDOM::CylinderGeometry* cylindergeometry) {
  clear_subtype();
  if (cylindergeometry) {
    set_has_cylindergeometry();
    subtype_.cylindergeometry_ = cylindergeometry;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Geometry.cylinderGeometry)
}

// .CreateDOM.ConvexHullGeometry convexHullGeometry = 6;
bool Geometry::has_convexhullgeometry() const {
  return subtype_case() == kConvexHullGeometry;
}
void Geometry::set_has_convexhullgeometry() {
  _oneof_case_[0] = kConvexHullGeometry;
}
void Geometry::clear_convexhullgeometry() {
  if (has_convexhullgeometry()) {
    delete subtype_.convexhullgeometry_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::ConvexHullGeometry& Geometry::convexhullgeometry() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Geometry.convexHullGeometry)
  return has_convexhullgeometry()
      ? *subtype_.convexhullgeometry_
      : ::CreateDOM::ConvexHullGeometry::default_instance();
}
::CreateDOM::ConvexHullGeometry* Geometry::mutable_convexhullgeometry() {
  if (!has_convexhullgeometry()) {
    clear_subtype();
    set_has_convexhullgeometry();
    subtype_.convexhullgeometry_ = new ::CreateDOM::ConvexHullGeometry;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Geometry.convexHullGeometry)
  return subtype_.convexhullgeometry_;
}
::CreateDOM::ConvexHullGeometry* Geometry::release_convexhullgeometry() {
  // @@protoc_insertion_point(field_release:CreateDOM.Geometry.convexHullGeometry)
  if (has_convexhullgeometry()) {
    clear_has_subtype();
    ::CreateDOM::ConvexHullGeometry* temp = subtype_.convexhullgeometry_;
    subtype_.convexhullgeometry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Geometry::set_allocated_convexhullgeometry(::CreateDOM::ConvexHullGeometry* convexhullgeometry) {
  clear_subtype();
  if (convexhullgeometry) {
    set_has_convexhullgeometry();
    subtype_.convexhullgeometry_ = convexhullgeometry;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Geometry.convexHullGeometry)
}

// .CreateDOM.TriangleMeshGeometry triangleMeshGeometry = 7;
bool Geometry::has_trianglemeshgeometry() const {
  return subtype_case() == kTriangleMeshGeometry;
}
void Geometry::set_has_trianglemeshgeometry() {
  _oneof_case_[0] = kTriangleMeshGeometry;
}
void Geometry::clear_trianglemeshgeometry() {
  if (has_trianglemeshgeometry()) {
    delete subtype_.trianglemeshgeometry_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::TriangleMeshGeometry& Geometry::trianglemeshgeometry() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Geometry.triangleMeshGeometry)
  return has_trianglemeshgeometry()
      ? *subtype_.trianglemeshgeometry_
      : ::CreateDOM::TriangleMeshGeometry::default_instance();
}
::CreateDOM::TriangleMeshGeometry* Geometry::mutable_trianglemeshgeometry() {
  if (!has_trianglemeshgeometry()) {
    clear_subtype();
    set_has_trianglemeshgeometry();
    subtype_.trianglemeshgeometry_ = new ::CreateDOM::TriangleMeshGeometry;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Geometry.triangleMeshGeometry)
  return subtype_.trianglemeshgeometry_;
}
::CreateDOM::TriangleMeshGeometry* Geometry::release_trianglemeshgeometry() {
  // @@protoc_insertion_point(field_release:CreateDOM.Geometry.triangleMeshGeometry)
  if (has_trianglemeshgeometry()) {
    clear_has_subtype();
    ::CreateDOM::TriangleMeshGeometry* temp = subtype_.trianglemeshgeometry_;
    subtype_.trianglemeshgeometry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Geometry::set_allocated_trianglemeshgeometry(::CreateDOM::TriangleMeshGeometry* trianglemeshgeometry) {
  clear_subtype();
  if (trianglemeshgeometry) {
    set_has_trianglemeshgeometry();
    subtype_.trianglemeshgeometry_ = trianglemeshgeometry;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Geometry.triangleMeshGeometry)
}

// .CreateDOM.HeightFieldGeometry heightFieldGeometry = 8;
bool Geometry::has_heightfieldgeometry() const {
  return subtype_case() == kHeightFieldGeometry;
}
void Geometry::set_has_heightfieldgeometry() {
  _oneof_case_[0] = kHeightFieldGeometry;
}
void Geometry::clear_heightfieldgeometry() {
  if (has_heightfieldgeometry()) {
    delete subtype_.heightfieldgeometry_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::HeightFieldGeometry& Geometry::heightfieldgeometry() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Geometry.heightFieldGeometry)
  return has_heightfieldgeometry()
      ? *subtype_.heightfieldgeometry_
      : ::CreateDOM::HeightFieldGeometry::default_instance();
}
::CreateDOM::HeightFieldGeometry* Geometry::mutable_heightfieldgeometry() {
  if (!has_heightfieldgeometry()) {
    clear_subtype();
    set_has_heightfieldgeometry();
    subtype_.heightfieldgeometry_ = new ::CreateDOM::HeightFieldGeometry;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Geometry.heightFieldGeometry)
  return subtype_.heightfieldgeometry_;
}
::CreateDOM::HeightFieldGeometry* Geometry::release_heightfieldgeometry() {
  // @@protoc_insertion_point(field_release:CreateDOM.Geometry.heightFieldGeometry)
  if (has_heightfieldgeometry()) {
    clear_has_subtype();
    ::CreateDOM::HeightFieldGeometry* temp = subtype_.heightfieldgeometry_;
    subtype_.heightfieldgeometry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Geometry::set_allocated_heightfieldgeometry(::CreateDOM::HeightFieldGeometry* heightfieldgeometry) {
  clear_subtype();
  if (heightfieldgeometry) {
    set_has_heightfieldgeometry();
    subtype_.heightfieldgeometry_ = heightfieldgeometry;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Geometry.heightFieldGeometry)
}

// .CreateDOM.PlaneGeometry planeGeometry = 9;
bool Geometry::has_planegeometry() const {
  return subtype_case() == kPlaneGeometry;
}
void Geometry::set_has_planegeometry() {
  _oneof_case_[0] = kPlaneGeometry;
}
void Geometry::clear_planegeometry() {
  if (has_planegeometry()) {
    delete subtype_.planegeometry_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::PlaneGeometry& Geometry::planegeometry() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Geometry.planeGeometry)
  return has_planegeometry()
      ? *subtype_.planegeometry_
      : ::CreateDOM::PlaneGeometry::default_instance();
}
::CreateDOM::PlaneGeometry* Geometry::mutable_planegeometry() {
  if (!has_planegeometry()) {
    clear_subtype();
    set_has_planegeometry();
    subtype_.planegeometry_ = new ::CreateDOM::PlaneGeometry;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Geometry.planeGeometry)
  return subtype_.planegeometry_;
}
::CreateDOM::PlaneGeometry* Geometry::release_planegeometry() {
  // @@protoc_insertion_point(field_release:CreateDOM.Geometry.planeGeometry)
  if (has_planegeometry()) {
    clear_has_subtype();
    ::CreateDOM::PlaneGeometry* temp = subtype_.planegeometry_;
    subtype_.planegeometry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Geometry::set_allocated_planegeometry(::CreateDOM::PlaneGeometry* planegeometry) {
  clear_subtype();
  if (planegeometry) {
    set_has_planegeometry();
    subtype_.planegeometry_ = planegeometry;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Geometry.planeGeometry)
}

bool Geometry::has_subtype() const {
  return subtype_case() != SUBTYPE_NOT_SET;
}
void Geometry::clear_has_subtype() {
  _oneof_case_[0] = SUBTYPE_NOT_SET;
}
Geometry::SubtypeCase Geometry::subtype_case() const {
  return Geometry::SubtypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoxGeometry::kDimensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoxGeometry::BoxGeometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.BoxGeometry)
}
BoxGeometry::BoxGeometry(const BoxGeometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dimensions()) {
    dimensions_ = new ::CreateDOM::Vec3(*from.dimensions_);
  } else {
    dimensions_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.BoxGeometry)
}

void BoxGeometry::SharedCtor() {
  dimensions_ = NULL;
  _cached_size_ = 0;
}

BoxGeometry::~BoxGeometry() {
  // @@protoc_insertion_point(destructor:CreateDOM.BoxGeometry)
  SharedDtor();
}

void BoxGeometry::SharedDtor() {
  if (this != internal_default_instance()) delete dimensions_;
}

void BoxGeometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxGeometry::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoxGeometry& BoxGeometry::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

BoxGeometry* BoxGeometry::New(::google::protobuf::Arena* arena) const {
  BoxGeometry* n = new BoxGeometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoxGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.BoxGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && dimensions_ != NULL) {
    delete dimensions_;
  }
  dimensions_ = NULL;
  _internal_metadata_.Clear();
}

bool BoxGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.BoxGeometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CreateDOM.Vec3 dimensions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dimensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.BoxGeometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.BoxGeometry)
  return false;
#undef DO_
}

void BoxGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.BoxGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.Vec3 dimensions = 1;
  if (this->has_dimensions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->dimensions_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.BoxGeometry)
}

::google::protobuf::uint8* BoxGeometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.BoxGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.Vec3 dimensions = 1;
  if (this->has_dimensions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->dimensions_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.BoxGeometry)
  return target;
}

size_t BoxGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.BoxGeometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .CreateDOM.Vec3 dimensions = 1;
  if (this->has_dimensions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dimensions_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxGeometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.BoxGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxGeometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoxGeometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.BoxGeometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.BoxGeometry)
    MergeFrom(*source);
  }
}

void BoxGeometry::MergeFrom(const BoxGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.BoxGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dimensions()) {
    mutable_dimensions()->::CreateDOM::Vec3::MergeFrom(from.dimensions());
  }
}

void BoxGeometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.BoxGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxGeometry::CopyFrom(const BoxGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.BoxGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxGeometry::IsInitialized() const {
  return true;
}

void BoxGeometry::Swap(BoxGeometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoxGeometry::InternalSwap(BoxGeometry* other) {
  using std::swap;
  swap(dimensions_, other->dimensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoxGeometry::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoxGeometry

// .CreateDOM.Vec3 dimensions = 1;
bool BoxGeometry::has_dimensions() const {
  return this != internal_default_instance() && dimensions_ != NULL;
}
void BoxGeometry::clear_dimensions() {
  if (GetArenaNoVirtual() == NULL && dimensions_ != NULL) delete dimensions_;
  dimensions_ = NULL;
}
const ::CreateDOM::Vec3& BoxGeometry::dimensions() const {
  const ::CreateDOM::Vec3* p = dimensions_;
  // @@protoc_insertion_point(field_get:CreateDOM.BoxGeometry.dimensions)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Vec3*>(
      &::CreateDOM::_Vec3_default_instance_);
}
::CreateDOM::Vec3* BoxGeometry::mutable_dimensions() {
  
  if (dimensions_ == NULL) {
    dimensions_ = new ::CreateDOM::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.BoxGeometry.dimensions)
  return dimensions_;
}
::CreateDOM::Vec3* BoxGeometry::release_dimensions() {
  // @@protoc_insertion_point(field_release:CreateDOM.BoxGeometry.dimensions)
  
  ::CreateDOM::Vec3* temp = dimensions_;
  dimensions_ = NULL;
  return temp;
}
void BoxGeometry::set_allocated_dimensions(::CreateDOM::Vec3* dimensions) {
  delete dimensions_;
  dimensions_ = dimensions;
  if (dimensions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.BoxGeometry.dimensions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SphereGeometry::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SphereGeometry::SphereGeometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.SphereGeometry)
}
SphereGeometry::SphereGeometry(const SphereGeometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:CreateDOM.SphereGeometry)
}

void SphereGeometry::SharedCtor() {
  radius_ = 0;
  _cached_size_ = 0;
}

SphereGeometry::~SphereGeometry() {
  // @@protoc_insertion_point(destructor:CreateDOM.SphereGeometry)
  SharedDtor();
}

void SphereGeometry::SharedDtor() {
}

void SphereGeometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SphereGeometry::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SphereGeometry& SphereGeometry::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

SphereGeometry* SphereGeometry::New(::google::protobuf::Arena* arena) const {
  SphereGeometry* n = new SphereGeometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SphereGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.SphereGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radius_ = 0;
  _internal_metadata_.Clear();
}

bool SphereGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.SphereGeometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float radius = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.SphereGeometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.SphereGeometry)
  return false;
#undef DO_
}

void SphereGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.SphereGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float radius = 1;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->radius(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.SphereGeometry)
}

::google::protobuf::uint8* SphereGeometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.SphereGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float radius = 1;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->radius(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.SphereGeometry)
  return target;
}

size_t SphereGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.SphereGeometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float radius = 1;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SphereGeometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.SphereGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const SphereGeometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SphereGeometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.SphereGeometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.SphereGeometry)
    MergeFrom(*source);
  }
}

void SphereGeometry::MergeFrom(const SphereGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.SphereGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void SphereGeometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.SphereGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SphereGeometry::CopyFrom(const SphereGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.SphereGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SphereGeometry::IsInitialized() const {
  return true;
}

void SphereGeometry::Swap(SphereGeometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SphereGeometry::InternalSwap(SphereGeometry* other) {
  using std::swap;
  swap(radius_, other->radius_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SphereGeometry::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SphereGeometry

// float radius = 1;
void SphereGeometry::clear_radius() {
  radius_ = 0;
}
float SphereGeometry::radius() const {
  // @@protoc_insertion_point(field_get:CreateDOM.SphereGeometry.radius)
  return radius_;
}
void SphereGeometry::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.SphereGeometry.radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CapsuleGeometry::kRadiusFieldNumber;
const int CapsuleGeometry::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CapsuleGeometry::CapsuleGeometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.CapsuleGeometry)
}
CapsuleGeometry::CapsuleGeometry(const CapsuleGeometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:CreateDOM.CapsuleGeometry)
}

void CapsuleGeometry::SharedCtor() {
  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(height_));
  _cached_size_ = 0;
}

CapsuleGeometry::~CapsuleGeometry() {
  // @@protoc_insertion_point(destructor:CreateDOM.CapsuleGeometry)
  SharedDtor();
}

void CapsuleGeometry::SharedDtor() {
}

void CapsuleGeometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CapsuleGeometry::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CapsuleGeometry& CapsuleGeometry::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

CapsuleGeometry* CapsuleGeometry::New(::google::protobuf::Arena* arena) const {
  CapsuleGeometry* n = new CapsuleGeometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CapsuleGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.CapsuleGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool CapsuleGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.CapsuleGeometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float radius = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.CapsuleGeometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.CapsuleGeometry)
  return false;
#undef DO_
}

void CapsuleGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.CapsuleGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float radius = 1;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->radius(), output);
  }

  // float height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.CapsuleGeometry)
}

::google::protobuf::uint8* CapsuleGeometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.CapsuleGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float radius = 1;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->radius(), target);
  }

  // float height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.CapsuleGeometry)
  return target;
}

size_t CapsuleGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.CapsuleGeometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float radius = 1;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // float height = 2;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CapsuleGeometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.CapsuleGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const CapsuleGeometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CapsuleGeometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.CapsuleGeometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.CapsuleGeometry)
    MergeFrom(*source);
  }
}

void CapsuleGeometry::MergeFrom(const CapsuleGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.CapsuleGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void CapsuleGeometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.CapsuleGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapsuleGeometry::CopyFrom(const CapsuleGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.CapsuleGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapsuleGeometry::IsInitialized() const {
  return true;
}

void CapsuleGeometry::Swap(CapsuleGeometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CapsuleGeometry::InternalSwap(CapsuleGeometry* other) {
  using std::swap;
  swap(radius_, other->radius_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CapsuleGeometry::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CapsuleGeometry

// float radius = 1;
void CapsuleGeometry::clear_radius() {
  radius_ = 0;
}
float CapsuleGeometry::radius() const {
  // @@protoc_insertion_point(field_get:CreateDOM.CapsuleGeometry.radius)
  return radius_;
}
void CapsuleGeometry::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.CapsuleGeometry.radius)
}

// float height = 2;
void CapsuleGeometry::clear_height() {
  height_ = 0;
}
float CapsuleGeometry::height() const {
  // @@protoc_insertion_point(field_get:CreateDOM.CapsuleGeometry.height)
  return height_;
}
void CapsuleGeometry::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.CapsuleGeometry.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CylinderGeometry::kRadiusFieldNumber;
const int CylinderGeometry::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CylinderGeometry::CylinderGeometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.CylinderGeometry)
}
CylinderGeometry::CylinderGeometry(const CylinderGeometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:CreateDOM.CylinderGeometry)
}

void CylinderGeometry::SharedCtor() {
  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(height_));
  _cached_size_ = 0;
}

CylinderGeometry::~CylinderGeometry() {
  // @@protoc_insertion_point(destructor:CreateDOM.CylinderGeometry)
  SharedDtor();
}

void CylinderGeometry::SharedDtor() {
}

void CylinderGeometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CylinderGeometry::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CylinderGeometry& CylinderGeometry::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

CylinderGeometry* CylinderGeometry::New(::google::protobuf::Arena* arena) const {
  CylinderGeometry* n = new CylinderGeometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CylinderGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.CylinderGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool CylinderGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.CylinderGeometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float radius = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.CylinderGeometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.CylinderGeometry)
  return false;
#undef DO_
}

void CylinderGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.CylinderGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float radius = 1;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->radius(), output);
  }

  // float height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.CylinderGeometry)
}

::google::protobuf::uint8* CylinderGeometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.CylinderGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float radius = 1;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->radius(), target);
  }

  // float height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.CylinderGeometry)
  return target;
}

size_t CylinderGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.CylinderGeometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float radius = 1;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // float height = 2;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CylinderGeometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.CylinderGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const CylinderGeometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CylinderGeometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.CylinderGeometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.CylinderGeometry)
    MergeFrom(*source);
  }
}

void CylinderGeometry::MergeFrom(const CylinderGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.CylinderGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void CylinderGeometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.CylinderGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CylinderGeometry::CopyFrom(const CylinderGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.CylinderGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CylinderGeometry::IsInitialized() const {
  return true;
}

void CylinderGeometry::Swap(CylinderGeometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CylinderGeometry::InternalSwap(CylinderGeometry* other) {
  using std::swap;
  swap(radius_, other->radius_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CylinderGeometry::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CylinderGeometry

// float radius = 1;
void CylinderGeometry::clear_radius() {
  radius_ = 0;
}
float CylinderGeometry::radius() const {
  // @@protoc_insertion_point(field_get:CreateDOM.CylinderGeometry.radius)
  return radius_;
}
void CylinderGeometry::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.CylinderGeometry.radius)
}

// float height = 2;
void CylinderGeometry::clear_height() {
  height_ = 0;
}
float CylinderGeometry::height() const {
  // @@protoc_insertion_point(field_get:CreateDOM.CylinderGeometry.height)
  return height_;
}
void CylinderGeometry::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.CylinderGeometry.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvexHullGeometry::kScaleFieldNumber;
const int ConvexHullGeometry::kConvexMeshFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvexHullGeometry::ConvexHullGeometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.ConvexHullGeometry)
}
ConvexHullGeometry::ConvexHullGeometry(const ConvexHullGeometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  convexmesh_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.convexmesh().size() > 0) {
    convexmesh_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.convexmesh_);
  }
  if (from.has_scale()) {
    scale_ = new ::CreateDOM::MeshScale(*from.scale_);
  } else {
    scale_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.ConvexHullGeometry)
}

void ConvexHullGeometry::SharedCtor() {
  convexmesh_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = NULL;
  _cached_size_ = 0;
}

ConvexHullGeometry::~ConvexHullGeometry() {
  // @@protoc_insertion_point(destructor:CreateDOM.ConvexHullGeometry)
  SharedDtor();
}

void ConvexHullGeometry::SharedDtor() {
  convexmesh_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scale_;
}

void ConvexHullGeometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvexHullGeometry::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConvexHullGeometry& ConvexHullGeometry::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConvexHullGeometry* ConvexHullGeometry::New(::google::protobuf::Arena* arena) const {
  ConvexHullGeometry* n = new ConvexHullGeometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConvexHullGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.ConvexHullGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  convexmesh_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) {
    delete scale_;
  }
  scale_ = NULL;
  _internal_metadata_.Clear();
}

bool ConvexHullGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.ConvexHullGeometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CreateDOM.MeshScale scale = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string convexMesh = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_convexmesh()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->convexmesh().data(), static_cast<int>(this->convexmesh().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.ConvexHullGeometry.convexMesh"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.ConvexHullGeometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.ConvexHullGeometry)
  return false;
#undef DO_
}

void ConvexHullGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.ConvexHullGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.MeshScale scale = 1;
  if (this->has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->scale_, output);
  }

  // string convexMesh = 2;
  if (this->convexmesh().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->convexmesh().data(), static_cast<int>(this->convexmesh().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.ConvexHullGeometry.convexMesh");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->convexmesh(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.ConvexHullGeometry)
}

::google::protobuf::uint8* ConvexHullGeometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.ConvexHullGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.MeshScale scale = 1;
  if (this->has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->scale_, deterministic, target);
  }

  // string convexMesh = 2;
  if (this->convexmesh().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->convexmesh().data(), static_cast<int>(this->convexmesh().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.ConvexHullGeometry.convexMesh");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->convexmesh(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.ConvexHullGeometry)
  return target;
}

size_t ConvexHullGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.ConvexHullGeometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string convexMesh = 2;
  if (this->convexmesh().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->convexmesh());
  }

  // .CreateDOM.MeshScale scale = 1;
  if (this->has_scale()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scale_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvexHullGeometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.ConvexHullGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvexHullGeometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvexHullGeometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.ConvexHullGeometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.ConvexHullGeometry)
    MergeFrom(*source);
  }
}

void ConvexHullGeometry::MergeFrom(const ConvexHullGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.ConvexHullGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.convexmesh().size() > 0) {

    convexmesh_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.convexmesh_);
  }
  if (from.has_scale()) {
    mutable_scale()->::CreateDOM::MeshScale::MergeFrom(from.scale());
  }
}

void ConvexHullGeometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.ConvexHullGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvexHullGeometry::CopyFrom(const ConvexHullGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.ConvexHullGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvexHullGeometry::IsInitialized() const {
  return true;
}

void ConvexHullGeometry::Swap(ConvexHullGeometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvexHullGeometry::InternalSwap(ConvexHullGeometry* other) {
  using std::swap;
  convexmesh_.Swap(&other->convexmesh_);
  swap(scale_, other->scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvexHullGeometry::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvexHullGeometry

// .CreateDOM.MeshScale scale = 1;
bool ConvexHullGeometry::has_scale() const {
  return this != internal_default_instance() && scale_ != NULL;
}
void ConvexHullGeometry::clear_scale() {
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) delete scale_;
  scale_ = NULL;
}
const ::CreateDOM::MeshScale& ConvexHullGeometry::scale() const {
  const ::CreateDOM::MeshScale* p = scale_;
  // @@protoc_insertion_point(field_get:CreateDOM.ConvexHullGeometry.scale)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::MeshScale*>(
      &::CreateDOM::_MeshScale_default_instance_);
}
::CreateDOM::MeshScale* ConvexHullGeometry::mutable_scale() {
  
  if (scale_ == NULL) {
    scale_ = new ::CreateDOM::MeshScale;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.ConvexHullGeometry.scale)
  return scale_;
}
::CreateDOM::MeshScale* ConvexHullGeometry::release_scale() {
  // @@protoc_insertion_point(field_release:CreateDOM.ConvexHullGeometry.scale)
  
  ::CreateDOM::MeshScale* temp = scale_;
  scale_ = NULL;
  return temp;
}
void ConvexHullGeometry::set_allocated_scale(::CreateDOM::MeshScale* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.ConvexHullGeometry.scale)
}

// string convexMesh = 2;
void ConvexHullGeometry::clear_convexmesh() {
  convexmesh_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConvexHullGeometry::convexmesh() const {
  // @@protoc_insertion_point(field_get:CreateDOM.ConvexHullGeometry.convexMesh)
  return convexmesh_.GetNoArena();
}
void ConvexHullGeometry::set_convexmesh(const ::std::string& value) {
  
  convexmesh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.ConvexHullGeometry.convexMesh)
}
#if LANG_CXX11
void ConvexHullGeometry::set_convexmesh(::std::string&& value) {
  
  convexmesh_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.ConvexHullGeometry.convexMesh)
}
#endif
void ConvexHullGeometry::set_convexmesh(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  convexmesh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.ConvexHullGeometry.convexMesh)
}
void ConvexHullGeometry::set_convexmesh(const char* value, size_t size) {
  
  convexmesh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.ConvexHullGeometry.convexMesh)
}
::std::string* ConvexHullGeometry::mutable_convexmesh() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.ConvexHullGeometry.convexMesh)
  return convexmesh_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConvexHullGeometry::release_convexmesh() {
  // @@protoc_insertion_point(field_release:CreateDOM.ConvexHullGeometry.convexMesh)
  
  return convexmesh_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConvexHullGeometry::set_allocated_convexmesh(::std::string* convexmesh) {
  if (convexmesh != NULL) {
    
  } else {
    
  }
  convexmesh_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), convexmesh);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.ConvexHullGeometry.convexMesh)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TriangleMeshGeometry::kScaleFieldNumber;
const int TriangleMeshGeometry::kTriangleMeshFieldNumber;
const int TriangleMeshGeometry::kDoubleSidedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TriangleMeshGeometry::TriangleMeshGeometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.TriangleMeshGeometry)
}
TriangleMeshGeometry::TriangleMeshGeometry(const TriangleMeshGeometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trianglemesh_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trianglemesh().size() > 0) {
    trianglemesh_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trianglemesh_);
  }
  if (from.has_scale()) {
    scale_ = new ::CreateDOM::MeshScale(*from.scale_);
  } else {
    scale_ = NULL;
  }
  doublesided_ = from.doublesided_;
  // @@protoc_insertion_point(copy_constructor:CreateDOM.TriangleMeshGeometry)
}

void TriangleMeshGeometry::SharedCtor() {
  trianglemesh_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doublesided_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(doublesided_));
  _cached_size_ = 0;
}

TriangleMeshGeometry::~TriangleMeshGeometry() {
  // @@protoc_insertion_point(destructor:CreateDOM.TriangleMeshGeometry)
  SharedDtor();
}

void TriangleMeshGeometry::SharedDtor() {
  trianglemesh_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scale_;
}

void TriangleMeshGeometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriangleMeshGeometry::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TriangleMeshGeometry& TriangleMeshGeometry::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

TriangleMeshGeometry* TriangleMeshGeometry::New(::google::protobuf::Arena* arena) const {
  TriangleMeshGeometry* n = new TriangleMeshGeometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TriangleMeshGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.TriangleMeshGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trianglemesh_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) {
    delete scale_;
  }
  scale_ = NULL;
  doublesided_ = false;
  _internal_metadata_.Clear();
}

bool TriangleMeshGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.TriangleMeshGeometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CreateDOM.MeshScale scale = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string triangleMesh = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trianglemesh()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trianglemesh().data(), static_cast<int>(this->trianglemesh().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.TriangleMeshGeometry.triangleMesh"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool doubleSided = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &doublesided_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.TriangleMeshGeometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.TriangleMeshGeometry)
  return false;
#undef DO_
}

void TriangleMeshGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.TriangleMeshGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.MeshScale scale = 1;
  if (this->has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->scale_, output);
  }

  // string triangleMesh = 2;
  if (this->trianglemesh().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trianglemesh().data(), static_cast<int>(this->trianglemesh().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.TriangleMeshGeometry.triangleMesh");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trianglemesh(), output);
  }

  // bool doubleSided = 3;
  if (this->doublesided() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->doublesided(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.TriangleMeshGeometry)
}

::google::protobuf::uint8* TriangleMeshGeometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.TriangleMeshGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.MeshScale scale = 1;
  if (this->has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->scale_, deterministic, target);
  }

  // string triangleMesh = 2;
  if (this->trianglemesh().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trianglemesh().data(), static_cast<int>(this->trianglemesh().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.TriangleMeshGeometry.triangleMesh");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trianglemesh(), target);
  }

  // bool doubleSided = 3;
  if (this->doublesided() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->doublesided(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.TriangleMeshGeometry)
  return target;
}

size_t TriangleMeshGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.TriangleMeshGeometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string triangleMesh = 2;
  if (this->trianglemesh().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trianglemesh());
  }

  // .CreateDOM.MeshScale scale = 1;
  if (this->has_scale()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scale_);
  }

  // bool doubleSided = 3;
  if (this->doublesided() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriangleMeshGeometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.TriangleMeshGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const TriangleMeshGeometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TriangleMeshGeometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.TriangleMeshGeometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.TriangleMeshGeometry)
    MergeFrom(*source);
  }
}

void TriangleMeshGeometry::MergeFrom(const TriangleMeshGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.TriangleMeshGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trianglemesh().size() > 0) {

    trianglemesh_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trianglemesh_);
  }
  if (from.has_scale()) {
    mutable_scale()->::CreateDOM::MeshScale::MergeFrom(from.scale());
  }
  if (from.doublesided() != 0) {
    set_doublesided(from.doublesided());
  }
}

void TriangleMeshGeometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.TriangleMeshGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriangleMeshGeometry::CopyFrom(const TriangleMeshGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.TriangleMeshGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriangleMeshGeometry::IsInitialized() const {
  return true;
}

void TriangleMeshGeometry::Swap(TriangleMeshGeometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TriangleMeshGeometry::InternalSwap(TriangleMeshGeometry* other) {
  using std::swap;
  trianglemesh_.Swap(&other->trianglemesh_);
  swap(scale_, other->scale_);
  swap(doublesided_, other->doublesided_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TriangleMeshGeometry::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TriangleMeshGeometry

// .CreateDOM.MeshScale scale = 1;
bool TriangleMeshGeometry::has_scale() const {
  return this != internal_default_instance() && scale_ != NULL;
}
void TriangleMeshGeometry::clear_scale() {
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) delete scale_;
  scale_ = NULL;
}
const ::CreateDOM::MeshScale& TriangleMeshGeometry::scale() const {
  const ::CreateDOM::MeshScale* p = scale_;
  // @@protoc_insertion_point(field_get:CreateDOM.TriangleMeshGeometry.scale)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::MeshScale*>(
      &::CreateDOM::_MeshScale_default_instance_);
}
::CreateDOM::MeshScale* TriangleMeshGeometry::mutable_scale() {
  
  if (scale_ == NULL) {
    scale_ = new ::CreateDOM::MeshScale;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.TriangleMeshGeometry.scale)
  return scale_;
}
::CreateDOM::MeshScale* TriangleMeshGeometry::release_scale() {
  // @@protoc_insertion_point(field_release:CreateDOM.TriangleMeshGeometry.scale)
  
  ::CreateDOM::MeshScale* temp = scale_;
  scale_ = NULL;
  return temp;
}
void TriangleMeshGeometry::set_allocated_scale(::CreateDOM::MeshScale* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.TriangleMeshGeometry.scale)
}

// string triangleMesh = 2;
void TriangleMeshGeometry::clear_trianglemesh() {
  trianglemesh_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TriangleMeshGeometry::trianglemesh() const {
  // @@protoc_insertion_point(field_get:CreateDOM.TriangleMeshGeometry.triangleMesh)
  return trianglemesh_.GetNoArena();
}
void TriangleMeshGeometry::set_trianglemesh(const ::std::string& value) {
  
  trianglemesh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.TriangleMeshGeometry.triangleMesh)
}
#if LANG_CXX11
void TriangleMeshGeometry::set_trianglemesh(::std::string&& value) {
  
  trianglemesh_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.TriangleMeshGeometry.triangleMesh)
}
#endif
void TriangleMeshGeometry::set_trianglemesh(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trianglemesh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.TriangleMeshGeometry.triangleMesh)
}
void TriangleMeshGeometry::set_trianglemesh(const char* value, size_t size) {
  
  trianglemesh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.TriangleMeshGeometry.triangleMesh)
}
::std::string* TriangleMeshGeometry::mutable_trianglemesh() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.TriangleMeshGeometry.triangleMesh)
  return trianglemesh_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TriangleMeshGeometry::release_trianglemesh() {
  // @@protoc_insertion_point(field_release:CreateDOM.TriangleMeshGeometry.triangleMesh)
  
  return trianglemesh_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TriangleMeshGeometry::set_allocated_trianglemesh(::std::string* trianglemesh) {
  if (trianglemesh != NULL) {
    
  } else {
    
  }
  trianglemesh_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trianglemesh);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.TriangleMeshGeometry.triangleMesh)
}

// bool doubleSided = 3;
void TriangleMeshGeometry::clear_doublesided() {
  doublesided_ = false;
}
bool TriangleMeshGeometry::doublesided() const {
  // @@protoc_insertion_point(field_get:CreateDOM.TriangleMeshGeometry.doubleSided)
  return doublesided_;
}
void TriangleMeshGeometry::set_doublesided(bool value) {
  
  doublesided_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.TriangleMeshGeometry.doubleSided)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeightFieldGeometry::kHeightFieldFieldNumber;
const int HeightFieldGeometry::kHeightScaleFieldNumber;
const int HeightFieldGeometry::kRowScaleFieldNumber;
const int HeightFieldGeometry::kColumnScaleFieldNumber;
const int HeightFieldGeometry::kDoubleSidedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeightFieldGeometry::HeightFieldGeometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.HeightFieldGeometry)
}
HeightFieldGeometry::HeightFieldGeometry(const HeightFieldGeometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  heightfield_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.heightfield().size() > 0) {
    heightfield_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.heightfield_);
  }
  ::memcpy(&heightscale_, &from.heightscale_,
    static_cast<size_t>(reinterpret_cast<char*>(&doublesided_) -
    reinterpret_cast<char*>(&heightscale_)) + sizeof(doublesided_));
  // @@protoc_insertion_point(copy_constructor:CreateDOM.HeightFieldGeometry)
}

void HeightFieldGeometry::SharedCtor() {
  heightfield_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&heightscale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doublesided_) -
      reinterpret_cast<char*>(&heightscale_)) + sizeof(doublesided_));
  _cached_size_ = 0;
}

HeightFieldGeometry::~HeightFieldGeometry() {
  // @@protoc_insertion_point(destructor:CreateDOM.HeightFieldGeometry)
  SharedDtor();
}

void HeightFieldGeometry::SharedDtor() {
  heightfield_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeightFieldGeometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeightFieldGeometry::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeightFieldGeometry& HeightFieldGeometry::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeightFieldGeometry* HeightFieldGeometry::New(::google::protobuf::Arena* arena) const {
  HeightFieldGeometry* n = new HeightFieldGeometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeightFieldGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.HeightFieldGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heightfield_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&heightscale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doublesided_) -
      reinterpret_cast<char*>(&heightscale_)) + sizeof(doublesided_));
  _internal_metadata_.Clear();
}

bool HeightFieldGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.HeightFieldGeometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string heightField = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heightfield()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->heightfield().data(), static_cast<int>(this->heightfield().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.HeightFieldGeometry.heightField"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heightScale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heightscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rowScale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rowscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float columnScale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &columnscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool doubleSided = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &doublesided_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.HeightFieldGeometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.HeightFieldGeometry)
  return false;
#undef DO_
}

void HeightFieldGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.HeightFieldGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string heightField = 1;
  if (this->heightfield().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->heightfield().data(), static_cast<int>(this->heightfield().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.HeightFieldGeometry.heightField");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->heightfield(), output);
  }

  // float heightScale = 2;
  if (this->heightscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->heightscale(), output);
  }

  // float rowScale = 3;
  if (this->rowscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rowscale(), output);
  }

  // float columnScale = 4;
  if (this->columnscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->columnscale(), output);
  }

  // bool doubleSided = 5;
  if (this->doublesided() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->doublesided(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.HeightFieldGeometry)
}

::google::protobuf::uint8* HeightFieldGeometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.HeightFieldGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string heightField = 1;
  if (this->heightfield().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->heightfield().data(), static_cast<int>(this->heightfield().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.HeightFieldGeometry.heightField");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->heightfield(), target);
  }

  // float heightScale = 2;
  if (this->heightscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->heightscale(), target);
  }

  // float rowScale = 3;
  if (this->rowscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rowscale(), target);
  }

  // float columnScale = 4;
  if (this->columnscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->columnscale(), target);
  }

  // bool doubleSided = 5;
  if (this->doublesided() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->doublesided(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.HeightFieldGeometry)
  return target;
}

size_t HeightFieldGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.HeightFieldGeometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string heightField = 1;
  if (this->heightfield().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->heightfield());
  }

  // float heightScale = 2;
  if (this->heightscale() != 0) {
    total_size += 1 + 4;
  }

  // float rowScale = 3;
  if (this->rowscale() != 0) {
    total_size += 1 + 4;
  }

  // float columnScale = 4;
  if (this->columnscale() != 0) {
    total_size += 1 + 4;
  }

  // bool doubleSided = 5;
  if (this->doublesided() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeightFieldGeometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.HeightFieldGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const HeightFieldGeometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeightFieldGeometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.HeightFieldGeometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.HeightFieldGeometry)
    MergeFrom(*source);
  }
}

void HeightFieldGeometry::MergeFrom(const HeightFieldGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.HeightFieldGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.heightfield().size() > 0) {

    heightfield_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.heightfield_);
  }
  if (from.heightscale() != 0) {
    set_heightscale(from.heightscale());
  }
  if (from.rowscale() != 0) {
    set_rowscale(from.rowscale());
  }
  if (from.columnscale() != 0) {
    set_columnscale(from.columnscale());
  }
  if (from.doublesided() != 0) {
    set_doublesided(from.doublesided());
  }
}

void HeightFieldGeometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.HeightFieldGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightFieldGeometry::CopyFrom(const HeightFieldGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.HeightFieldGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightFieldGeometry::IsInitialized() const {
  return true;
}

void HeightFieldGeometry::Swap(HeightFieldGeometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeightFieldGeometry::InternalSwap(HeightFieldGeometry* other) {
  using std::swap;
  heightfield_.Swap(&other->heightfield_);
  swap(heightscale_, other->heightscale_);
  swap(rowscale_, other->rowscale_);
  swap(columnscale_, other->columnscale_);
  swap(doublesided_, other->doublesided_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeightFieldGeometry::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeightFieldGeometry

// string heightField = 1;
void HeightFieldGeometry::clear_heightfield() {
  heightfield_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeightFieldGeometry::heightfield() const {
  // @@protoc_insertion_point(field_get:CreateDOM.HeightFieldGeometry.heightField)
  return heightfield_.GetNoArena();
}
void HeightFieldGeometry::set_heightfield(const ::std::string& value) {
  
  heightfield_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.HeightFieldGeometry.heightField)
}
#if LANG_CXX11
void HeightFieldGeometry::set_heightfield(::std::string&& value) {
  
  heightfield_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.HeightFieldGeometry.heightField)
}
#endif
void HeightFieldGeometry::set_heightfield(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  heightfield_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.HeightFieldGeometry.heightField)
}
void HeightFieldGeometry::set_heightfield(const char* value, size_t size) {
  
  heightfield_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.HeightFieldGeometry.heightField)
}
::std::string* HeightFieldGeometry::mutable_heightfield() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.HeightFieldGeometry.heightField)
  return heightfield_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeightFieldGeometry::release_heightfield() {
  // @@protoc_insertion_point(field_release:CreateDOM.HeightFieldGeometry.heightField)
  
  return heightfield_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeightFieldGeometry::set_allocated_heightfield(::std::string* heightfield) {
  if (heightfield != NULL) {
    
  } else {
    
  }
  heightfield_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heightfield);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.HeightFieldGeometry.heightField)
}

// float heightScale = 2;
void HeightFieldGeometry::clear_heightscale() {
  heightscale_ = 0;
}
float HeightFieldGeometry::heightscale() const {
  // @@protoc_insertion_point(field_get:CreateDOM.HeightFieldGeometry.heightScale)
  return heightscale_;
}
void HeightFieldGeometry::set_heightscale(float value) {
  
  heightscale_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.HeightFieldGeometry.heightScale)
}

// float rowScale = 3;
void HeightFieldGeometry::clear_rowscale() {
  rowscale_ = 0;
}
float HeightFieldGeometry::rowscale() const {
  // @@protoc_insertion_point(field_get:CreateDOM.HeightFieldGeometry.rowScale)
  return rowscale_;
}
void HeightFieldGeometry::set_rowscale(float value) {
  
  rowscale_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.HeightFieldGeometry.rowScale)
}

// float columnScale = 4;
void HeightFieldGeometry::clear_columnscale() {
  columnscale_ = 0;
}
float HeightFieldGeometry::columnscale() const {
  // @@protoc_insertion_point(field_get:CreateDOM.HeightFieldGeometry.columnScale)
  return columnscale_;
}
void HeightFieldGeometry::set_columnscale(float value) {
  
  columnscale_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.HeightFieldGeometry.columnScale)
}

// bool doubleSided = 5;
void HeightFieldGeometry::clear_doublesided() {
  doublesided_ = false;
}
bool HeightFieldGeometry::doublesided() const {
  // @@protoc_insertion_point(field_get:CreateDOM.HeightFieldGeometry.doubleSided)
  return doublesided_;
}
void HeightFieldGeometry::set_doublesided(bool value) {
  
  doublesided_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.HeightFieldGeometry.doubleSided)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaneGeometry::PlaneGeometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.PlaneGeometry)
}
PlaneGeometry::PlaneGeometry(const PlaneGeometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CreateDOM.PlaneGeometry)
}

void PlaneGeometry::SharedCtor() {
  _cached_size_ = 0;
}

PlaneGeometry::~PlaneGeometry() {
  // @@protoc_insertion_point(destructor:CreateDOM.PlaneGeometry)
  SharedDtor();
}

void PlaneGeometry::SharedDtor() {
}

void PlaneGeometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaneGeometry::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlaneGeometry& PlaneGeometry::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlaneGeometry* PlaneGeometry::New(::google::protobuf::Arena* arena) const {
  PlaneGeometry* n = new PlaneGeometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaneGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.PlaneGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool PlaneGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.PlaneGeometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.PlaneGeometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.PlaneGeometry)
  return false;
#undef DO_
}

void PlaneGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.PlaneGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.PlaneGeometry)
}

::google::protobuf::uint8* PlaneGeometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.PlaneGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.PlaneGeometry)
  return target;
}

size_t PlaneGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.PlaneGeometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaneGeometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.PlaneGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaneGeometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaneGeometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.PlaneGeometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.PlaneGeometry)
    MergeFrom(*source);
  }
}

void PlaneGeometry::MergeFrom(const PlaneGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.PlaneGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlaneGeometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.PlaneGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaneGeometry::CopyFrom(const PlaneGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.PlaneGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaneGeometry::IsInitialized() const {
  return true;
}

void PlaneGeometry::Swap(PlaneGeometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaneGeometry::InternalSwap(PlaneGeometry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaneGeometry::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaneGeometry

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryInstance::kGeometryFieldNumber;
const int GeometryInstance::kMaterialsFieldNumber;
const int GeometryInstance::kLocalPoseFieldNumber;
const int GeometryInstance::kCollisionFilterSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryInstance::GeometryInstance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.GeometryInstance)
}
GeometryInstance::GeometryInstance(const GeometryInstance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      materials_(from.materials_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collisionfiltersettings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collisionfiltersettings().size() > 0) {
    collisionfiltersettings_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collisionfiltersettings_);
  }
  if (from.has_geometry()) {
    geometry_ = new ::CreateDOM::Geometry(*from.geometry_);
  } else {
    geometry_ = NULL;
  }
  if (from.has_localpose()) {
    localpose_ = new ::CreateDOM::Pose(*from.localpose_);
  } else {
    localpose_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.GeometryInstance)
}

void GeometryInstance::SharedCtor() {
  collisionfiltersettings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&geometry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&localpose_) -
      reinterpret_cast<char*>(&geometry_)) + sizeof(localpose_));
  _cached_size_ = 0;
}

GeometryInstance::~GeometryInstance() {
  // @@protoc_insertion_point(destructor:CreateDOM.GeometryInstance)
  SharedDtor();
}

void GeometryInstance::SharedDtor() {
  collisionfiltersettings_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete geometry_;
  if (this != internal_default_instance()) delete localpose_;
}

void GeometryInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeometryInstance::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeometryInstance& GeometryInstance::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

GeometryInstance* GeometryInstance::New(::google::protobuf::Arena* arena) const {
  GeometryInstance* n = new GeometryInstance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeometryInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.GeometryInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  materials_.Clear();
  collisionfiltersettings_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && geometry_ != NULL) {
    delete geometry_;
  }
  geometry_ = NULL;
  if (GetArenaNoVirtual() == NULL && localpose_ != NULL) {
    delete localpose_;
  }
  localpose_ = NULL;
  _internal_metadata_.Clear();
}

bool GeometryInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.GeometryInstance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CreateDOM.Geometry geometry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string materials = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_materials()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->materials(this->materials_size() - 1).data(),
            static_cast<int>(this->materials(this->materials_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.GeometryInstance.materials"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Pose localPose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localpose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collisionFilterSettings = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collisionfiltersettings()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collisionfiltersettings().data(), static_cast<int>(this->collisionfiltersettings().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.GeometryInstance.collisionFilterSettings"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.GeometryInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.GeometryInstance)
  return false;
#undef DO_
}

void GeometryInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.GeometryInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.Geometry geometry = 1;
  if (this->has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->geometry_, output);
  }

  // repeated string materials = 2;
  for (int i = 0, n = this->materials_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->materials(i).data(), static_cast<int>(this->materials(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.GeometryInstance.materials");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->materials(i), output);
  }

  // .CreateDOM.Pose localPose = 3;
  if (this->has_localpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->localpose_, output);
  }

  // string collisionFilterSettings = 4;
  if (this->collisionfiltersettings().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collisionfiltersettings().data(), static_cast<int>(this->collisionfiltersettings().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.GeometryInstance.collisionFilterSettings");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->collisionfiltersettings(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.GeometryInstance)
}

::google::protobuf::uint8* GeometryInstance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.GeometryInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.Geometry geometry = 1;
  if (this->has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->geometry_, deterministic, target);
  }

  // repeated string materials = 2;
  for (int i = 0, n = this->materials_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->materials(i).data(), static_cast<int>(this->materials(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.GeometryInstance.materials");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->materials(i), target);
  }

  // .CreateDOM.Pose localPose = 3;
  if (this->has_localpose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->localpose_, deterministic, target);
  }

  // string collisionFilterSettings = 4;
  if (this->collisionfiltersettings().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collisionfiltersettings().data(), static_cast<int>(this->collisionfiltersettings().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.GeometryInstance.collisionFilterSettings");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->collisionfiltersettings(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.GeometryInstance)
  return target;
}

size_t GeometryInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.GeometryInstance)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string materials = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->materials_size());
  for (int i = 0, n = this->materials_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->materials(i));
  }

  // string collisionFilterSettings = 4;
  if (this->collisionfiltersettings().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collisionfiltersettings());
  }

  // .CreateDOM.Geometry geometry = 1;
  if (this->has_geometry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->geometry_);
  }

  // .CreateDOM.Pose localPose = 3;
  if (this->has_localpose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->localpose_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeometryInstance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.GeometryInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryInstance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeometryInstance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.GeometryInstance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.GeometryInstance)
    MergeFrom(*source);
  }
}

void GeometryInstance::MergeFrom(const GeometryInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.GeometryInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  materials_.MergeFrom(from.materials_);
  if (from.collisionfiltersettings().size() > 0) {

    collisionfiltersettings_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collisionfiltersettings_);
  }
  if (from.has_geometry()) {
    mutable_geometry()->::CreateDOM::Geometry::MergeFrom(from.geometry());
  }
  if (from.has_localpose()) {
    mutable_localpose()->::CreateDOM::Pose::MergeFrom(from.localpose());
  }
}

void GeometryInstance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.GeometryInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryInstance::CopyFrom(const GeometryInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.GeometryInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryInstance::IsInitialized() const {
  return true;
}

void GeometryInstance::Swap(GeometryInstance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryInstance::InternalSwap(GeometryInstance* other) {
  using std::swap;
  materials_.InternalSwap(&other->materials_);
  collisionfiltersettings_.Swap(&other->collisionfiltersettings_);
  swap(geometry_, other->geometry_);
  swap(localpose_, other->localpose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeometryInstance::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeometryInstance

// .CreateDOM.Geometry geometry = 1;
bool GeometryInstance::has_geometry() const {
  return this != internal_default_instance() && geometry_ != NULL;
}
void GeometryInstance::clear_geometry() {
  if (GetArenaNoVirtual() == NULL && geometry_ != NULL) delete geometry_;
  geometry_ = NULL;
}
const ::CreateDOM::Geometry& GeometryInstance::geometry() const {
  const ::CreateDOM::Geometry* p = geometry_;
  // @@protoc_insertion_point(field_get:CreateDOM.GeometryInstance.geometry)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Geometry*>(
      &::CreateDOM::_Geometry_default_instance_);
}
::CreateDOM::Geometry* GeometryInstance::mutable_geometry() {
  
  if (geometry_ == NULL) {
    geometry_ = new ::CreateDOM::Geometry;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.GeometryInstance.geometry)
  return geometry_;
}
::CreateDOM::Geometry* GeometryInstance::release_geometry() {
  // @@protoc_insertion_point(field_release:CreateDOM.GeometryInstance.geometry)
  
  ::CreateDOM::Geometry* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
void GeometryInstance::set_allocated_geometry(::CreateDOM::Geometry* geometry) {
  delete geometry_;
  geometry_ = geometry;
  if (geometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.GeometryInstance.geometry)
}

// repeated string materials = 2;
int GeometryInstance::materials_size() const {
  return materials_.size();
}
void GeometryInstance::clear_materials() {
  materials_.Clear();
}
const ::std::string& GeometryInstance::materials(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.GeometryInstance.materials)
  return materials_.Get(index);
}
::std::string* GeometryInstance::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:CreateDOM.GeometryInstance.materials)
  return materials_.Mutable(index);
}
void GeometryInstance::set_materials(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CreateDOM.GeometryInstance.materials)
  materials_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void GeometryInstance::set_materials(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:CreateDOM.GeometryInstance.materials)
  materials_.Mutable(index)->assign(std::move(value));
}
#endif
void GeometryInstance::set_materials(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  materials_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CreateDOM.GeometryInstance.materials)
}
void GeometryInstance::set_materials(int index, const char* value, size_t size) {
  materials_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.GeometryInstance.materials)
}
::std::string* GeometryInstance::add_materials() {
  // @@protoc_insertion_point(field_add_mutable:CreateDOM.GeometryInstance.materials)
  return materials_.Add();
}
void GeometryInstance::add_materials(const ::std::string& value) {
  materials_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CreateDOM.GeometryInstance.materials)
}
#if LANG_CXX11
void GeometryInstance::add_materials(::std::string&& value) {
  materials_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CreateDOM.GeometryInstance.materials)
}
#endif
void GeometryInstance::add_materials(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  materials_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CreateDOM.GeometryInstance.materials)
}
void GeometryInstance::add_materials(const char* value, size_t size) {
  materials_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CreateDOM.GeometryInstance.materials)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GeometryInstance::materials() const {
  // @@protoc_insertion_point(field_list:CreateDOM.GeometryInstance.materials)
  return materials_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GeometryInstance::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.GeometryInstance.materials)
  return &materials_;
}

// .CreateDOM.Pose localPose = 3;
bool GeometryInstance::has_localpose() const {
  return this != internal_default_instance() && localpose_ != NULL;
}
void GeometryInstance::clear_localpose() {
  if (GetArenaNoVirtual() == NULL && localpose_ != NULL) delete localpose_;
  localpose_ = NULL;
}
const ::CreateDOM::Pose& GeometryInstance::localpose() const {
  const ::CreateDOM::Pose* p = localpose_;
  // @@protoc_insertion_point(field_get:CreateDOM.GeometryInstance.localPose)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Pose*>(
      &::CreateDOM::_Pose_default_instance_);
}
::CreateDOM::Pose* GeometryInstance::mutable_localpose() {
  
  if (localpose_ == NULL) {
    localpose_ = new ::CreateDOM::Pose;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.GeometryInstance.localPose)
  return localpose_;
}
::CreateDOM::Pose* GeometryInstance::release_localpose() {
  // @@protoc_insertion_point(field_release:CreateDOM.GeometryInstance.localPose)
  
  ::CreateDOM::Pose* temp = localpose_;
  localpose_ = NULL;
  return temp;
}
void GeometryInstance::set_allocated_localpose(::CreateDOM::Pose* localpose) {
  delete localpose_;
  localpose_ = localpose;
  if (localpose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.GeometryInstance.localPose)
}

// string collisionFilterSettings = 4;
void GeometryInstance::clear_collisionfiltersettings() {
  collisionfiltersettings_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GeometryInstance::collisionfiltersettings() const {
  // @@protoc_insertion_point(field_get:CreateDOM.GeometryInstance.collisionFilterSettings)
  return collisionfiltersettings_.GetNoArena();
}
void GeometryInstance::set_collisionfiltersettings(const ::std::string& value) {
  
  collisionfiltersettings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.GeometryInstance.collisionFilterSettings)
}
#if LANG_CXX11
void GeometryInstance::set_collisionfiltersettings(::std::string&& value) {
  
  collisionfiltersettings_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.GeometryInstance.collisionFilterSettings)
}
#endif
void GeometryInstance::set_collisionfiltersettings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  collisionfiltersettings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.GeometryInstance.collisionFilterSettings)
}
void GeometryInstance::set_collisionfiltersettings(const char* value, size_t size) {
  
  collisionfiltersettings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.GeometryInstance.collisionFilterSettings)
}
::std::string* GeometryInstance::mutable_collisionfiltersettings() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.GeometryInstance.collisionFilterSettings)
  return collisionfiltersettings_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GeometryInstance::release_collisionfiltersettings() {
  // @@protoc_insertion_point(field_release:CreateDOM.GeometryInstance.collisionFilterSettings)
  
  return collisionfiltersettings_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GeometryInstance::set_allocated_collisionfiltersettings(::std::string* collisionfiltersettings) {
  if (collisionfiltersettings != NULL) {
    
  } else {
    
  }
  collisionfiltersettings_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collisionfiltersettings);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.GeometryInstance.collisionFilterSettings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RigidBody::kGeometryInstancesFieldNumber;
const int RigidBody::kGlobalPoseFieldNumber;
const int RigidBody::kRigidStaticFieldNumber;
const int RigidBody::kRigidDynamicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RigidBody::RigidBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.RigidBody)
}
RigidBody::RigidBody(const RigidBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      geometryinstances_(from.geometryinstances_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_globalpose()) {
    globalpose_ = new ::CreateDOM::Pose(*from.globalpose_);
  } else {
    globalpose_ = NULL;
  }
  clear_has_subtype();
  switch (from.subtype_case()) {
    case kRigidStatic: {
      mutable_rigidstatic()->::CreateDOM::RigidStatic::MergeFrom(from.rigidstatic());
      break;
    }
    case kRigidDynamic: {
      mutable_rigiddynamic()->::CreateDOM::RigidDynamic::MergeFrom(from.rigiddynamic());
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.RigidBody)
}

void RigidBody::SharedCtor() {
  globalpose_ = NULL;
  clear_has_subtype();
  _cached_size_ = 0;
}

RigidBody::~RigidBody() {
  // @@protoc_insertion_point(destructor:CreateDOM.RigidBody)
  SharedDtor();
}

void RigidBody::SharedDtor() {
  if (this != internal_default_instance()) delete globalpose_;
  if (has_subtype()) {
    clear_subtype();
  }
}

void RigidBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RigidBody::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RigidBody& RigidBody::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

RigidBody* RigidBody::New(::google::protobuf::Arena* arena) const {
  RigidBody* n = new RigidBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RigidBody::clear_subtype() {
// @@protoc_insertion_point(one_of_clear_start:CreateDOM.RigidBody)
  switch (subtype_case()) {
    case kRigidStatic: {
      delete subtype_.rigidstatic_;
      break;
    }
    case kRigidDynamic: {
      delete subtype_.rigiddynamic_;
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUBTYPE_NOT_SET;
}


void RigidBody::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.RigidBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geometryinstances_.Clear();
  if (GetArenaNoVirtual() == NULL && globalpose_ != NULL) {
    delete globalpose_;
  }
  globalpose_ = NULL;
  clear_subtype();
  _internal_metadata_.Clear();
}

bool RigidBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.RigidBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CreateDOM.GeometryInstance geometryInstances = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geometryinstances()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Pose globalPose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_globalpose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.RigidStatic rigidStatic = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rigidstatic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.RigidDynamic rigidDynamic = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rigiddynamic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.RigidBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.RigidBody)
  return false;
#undef DO_
}

void RigidBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.RigidBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CreateDOM.GeometryInstance geometryInstances = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geometryinstances_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geometryinstances(static_cast<int>(i)), output);
  }

  // .CreateDOM.Pose globalPose = 2;
  if (this->has_globalpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->globalpose_, output);
  }

  // .CreateDOM.RigidStatic rigidStatic = 3;
  if (has_rigidstatic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *subtype_.rigidstatic_, output);
  }

  // .CreateDOM.RigidDynamic rigidDynamic = 4;
  if (has_rigiddynamic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *subtype_.rigiddynamic_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.RigidBody)
}

::google::protobuf::uint8* RigidBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.RigidBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CreateDOM.GeometryInstance geometryInstances = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geometryinstances_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->geometryinstances(static_cast<int>(i)), deterministic, target);
  }

  // .CreateDOM.Pose globalPose = 2;
  if (this->has_globalpose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->globalpose_, deterministic, target);
  }

  // .CreateDOM.RigidStatic rigidStatic = 3;
  if (has_rigidstatic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *subtype_.rigidstatic_, deterministic, target);
  }

  // .CreateDOM.RigidDynamic rigidDynamic = 4;
  if (has_rigiddynamic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *subtype_.rigiddynamic_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.RigidBody)
  return target;
}

size_t RigidBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.RigidBody)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CreateDOM.GeometryInstance geometryInstances = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->geometryinstances_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometryinstances(static_cast<int>(i)));
    }
  }

  // .CreateDOM.Pose globalPose = 2;
  if (this->has_globalpose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->globalpose_);
  }

  switch (subtype_case()) {
    // .CreateDOM.RigidStatic rigidStatic = 3;
    case kRigidStatic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.rigidstatic_);
      break;
    }
    // .CreateDOM.RigidDynamic rigidDynamic = 4;
    case kRigidDynamic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.rigiddynamic_);
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RigidBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.RigidBody)
  GOOGLE_DCHECK_NE(&from, this);
  const RigidBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RigidBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.RigidBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.RigidBody)
    MergeFrom(*source);
  }
}

void RigidBody::MergeFrom(const RigidBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.RigidBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geometryinstances_.MergeFrom(from.geometryinstances_);
  if (from.has_globalpose()) {
    mutable_globalpose()->::CreateDOM::Pose::MergeFrom(from.globalpose());
  }
  switch (from.subtype_case()) {
    case kRigidStatic: {
      mutable_rigidstatic()->::CreateDOM::RigidStatic::MergeFrom(from.rigidstatic());
      break;
    }
    case kRigidDynamic: {
      mutable_rigiddynamic()->::CreateDOM::RigidDynamic::MergeFrom(from.rigiddynamic());
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
}

void RigidBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.RigidBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RigidBody::CopyFrom(const RigidBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.RigidBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RigidBody::IsInitialized() const {
  return true;
}

void RigidBody::Swap(RigidBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RigidBody::InternalSwap(RigidBody* other) {
  using std::swap;
  geometryinstances_.InternalSwap(&other->geometryinstances_);
  swap(globalpose_, other->globalpose_);
  swap(subtype_, other->subtype_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RigidBody::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RigidBody

// repeated .CreateDOM.GeometryInstance geometryInstances = 1;
int RigidBody::geometryinstances_size() const {
  return geometryinstances_.size();
}
void RigidBody::clear_geometryinstances() {
  geometryinstances_.Clear();
}
const ::CreateDOM::GeometryInstance& RigidBody::geometryinstances(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.RigidBody.geometryInstances)
  return geometryinstances_.Get(index);
}
::CreateDOM::GeometryInstance* RigidBody::mutable_geometryinstances(int index) {
  // @@protoc_insertion_point(field_mutable:CreateDOM.RigidBody.geometryInstances)
  return geometryinstances_.Mutable(index);
}
::CreateDOM::GeometryInstance* RigidBody::add_geometryinstances() {
  // @@protoc_insertion_point(field_add:CreateDOM.RigidBody.geometryInstances)
  return geometryinstances_.Add();
}
::google::protobuf::RepeatedPtrField< ::CreateDOM::GeometryInstance >*
RigidBody::mutable_geometryinstances() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.RigidBody.geometryInstances)
  return &geometryinstances_;
}
const ::google::protobuf::RepeatedPtrField< ::CreateDOM::GeometryInstance >&
RigidBody::geometryinstances() const {
  // @@protoc_insertion_point(field_list:CreateDOM.RigidBody.geometryInstances)
  return geometryinstances_;
}

// .CreateDOM.Pose globalPose = 2;
bool RigidBody::has_globalpose() const {
  return this != internal_default_instance() && globalpose_ != NULL;
}
void RigidBody::clear_globalpose() {
  if (GetArenaNoVirtual() == NULL && globalpose_ != NULL) delete globalpose_;
  globalpose_ = NULL;
}
const ::CreateDOM::Pose& RigidBody::globalpose() const {
  const ::CreateDOM::Pose* p = globalpose_;
  // @@protoc_insertion_point(field_get:CreateDOM.RigidBody.globalPose)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Pose*>(
      &::CreateDOM::_Pose_default_instance_);
}
::CreateDOM::Pose* RigidBody::mutable_globalpose() {
  
  if (globalpose_ == NULL) {
    globalpose_ = new ::CreateDOM::Pose;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.RigidBody.globalPose)
  return globalpose_;
}
::CreateDOM::Pose* RigidBody::release_globalpose() {
  // @@protoc_insertion_point(field_release:CreateDOM.RigidBody.globalPose)
  
  ::CreateDOM::Pose* temp = globalpose_;
  globalpose_ = NULL;
  return temp;
}
void RigidBody::set_allocated_globalpose(::CreateDOM::Pose* globalpose) {
  delete globalpose_;
  globalpose_ = globalpose;
  if (globalpose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.RigidBody.globalPose)
}

// .CreateDOM.RigidStatic rigidStatic = 3;
bool RigidBody::has_rigidstatic() const {
  return subtype_case() == kRigidStatic;
}
void RigidBody::set_has_rigidstatic() {
  _oneof_case_[0] = kRigidStatic;
}
void RigidBody::clear_rigidstatic() {
  if (has_rigidstatic()) {
    delete subtype_.rigidstatic_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::RigidStatic& RigidBody::rigidstatic() const {
  // @@protoc_insertion_point(field_get:CreateDOM.RigidBody.rigidStatic)
  return has_rigidstatic()
      ? *subtype_.rigidstatic_
      : ::CreateDOM::RigidStatic::default_instance();
}
::CreateDOM::RigidStatic* RigidBody::mutable_rigidstatic() {
  if (!has_rigidstatic()) {
    clear_subtype();
    set_has_rigidstatic();
    subtype_.rigidstatic_ = new ::CreateDOM::RigidStatic;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.RigidBody.rigidStatic)
  return subtype_.rigidstatic_;
}
::CreateDOM::RigidStatic* RigidBody::release_rigidstatic() {
  // @@protoc_insertion_point(field_release:CreateDOM.RigidBody.rigidStatic)
  if (has_rigidstatic()) {
    clear_has_subtype();
    ::CreateDOM::RigidStatic* temp = subtype_.rigidstatic_;
    subtype_.rigidstatic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RigidBody::set_allocated_rigidstatic(::CreateDOM::RigidStatic* rigidstatic) {
  clear_subtype();
  if (rigidstatic) {
    set_has_rigidstatic();
    subtype_.rigidstatic_ = rigidstatic;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.RigidBody.rigidStatic)
}

// .CreateDOM.RigidDynamic rigidDynamic = 4;
bool RigidBody::has_rigiddynamic() const {
  return subtype_case() == kRigidDynamic;
}
void RigidBody::set_has_rigiddynamic() {
  _oneof_case_[0] = kRigidDynamic;
}
void RigidBody::clear_rigiddynamic() {
  if (has_rigiddynamic()) {
    delete subtype_.rigiddynamic_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::RigidDynamic& RigidBody::rigiddynamic() const {
  // @@protoc_insertion_point(field_get:CreateDOM.RigidBody.rigidDynamic)
  return has_rigiddynamic()
      ? *subtype_.rigiddynamic_
      : ::CreateDOM::RigidDynamic::default_instance();
}
::CreateDOM::RigidDynamic* RigidBody::mutable_rigiddynamic() {
  if (!has_rigiddynamic()) {
    clear_subtype();
    set_has_rigiddynamic();
    subtype_.rigiddynamic_ = new ::CreateDOM::RigidDynamic;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.RigidBody.rigidDynamic)
  return subtype_.rigiddynamic_;
}
::CreateDOM::RigidDynamic* RigidBody::release_rigiddynamic() {
  // @@protoc_insertion_point(field_release:CreateDOM.RigidBody.rigidDynamic)
  if (has_rigiddynamic()) {
    clear_has_subtype();
    ::CreateDOM::RigidDynamic* temp = subtype_.rigiddynamic_;
    subtype_.rigiddynamic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RigidBody::set_allocated_rigiddynamic(::CreateDOM::RigidDynamic* rigiddynamic) {
  clear_subtype();
  if (rigiddynamic) {
    set_has_rigiddynamic();
    subtype_.rigiddynamic_ = rigiddynamic;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.RigidBody.rigidDynamic)
}

bool RigidBody::has_subtype() const {
  return subtype_case() != SUBTYPE_NOT_SET;
}
void RigidBody::clear_has_subtype() {
  _oneof_case_[0] = SUBTYPE_NOT_SET;
}
RigidBody::SubtypeCase RigidBody::subtype_case() const {
  return RigidBody::SubtypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RigidStatic::RigidStatic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.RigidStatic)
}
RigidStatic::RigidStatic(const RigidStatic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CreateDOM.RigidStatic)
}

void RigidStatic::SharedCtor() {
  _cached_size_ = 0;
}

RigidStatic::~RigidStatic() {
  // @@protoc_insertion_point(destructor:CreateDOM.RigidStatic)
  SharedDtor();
}

void RigidStatic::SharedDtor() {
}

void RigidStatic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RigidStatic::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RigidStatic& RigidStatic::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

RigidStatic* RigidStatic::New(::google::protobuf::Arena* arena) const {
  RigidStatic* n = new RigidStatic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RigidStatic::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.RigidStatic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RigidStatic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.RigidStatic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.RigidStatic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.RigidStatic)
  return false;
#undef DO_
}

void RigidStatic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.RigidStatic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.RigidStatic)
}

::google::protobuf::uint8* RigidStatic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.RigidStatic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.RigidStatic)
  return target;
}

size_t RigidStatic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.RigidStatic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RigidStatic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.RigidStatic)
  GOOGLE_DCHECK_NE(&from, this);
  const RigidStatic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RigidStatic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.RigidStatic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.RigidStatic)
    MergeFrom(*source);
  }
}

void RigidStatic::MergeFrom(const RigidStatic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.RigidStatic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RigidStatic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.RigidStatic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RigidStatic::CopyFrom(const RigidStatic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.RigidStatic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RigidStatic::IsInitialized() const {
  return true;
}

void RigidStatic::Swap(RigidStatic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RigidStatic::InternalSwap(RigidStatic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RigidStatic::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RigidStatic

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RigidDynamic::kDisableGravityFieldNumber;
const int RigidDynamic::kCenterOfMassLocalPoseFieldNumber;
const int RigidDynamic::kMassFieldNumber;
const int RigidDynamic::kMassSpaceInertiaTensorFieldNumber;
const int RigidDynamic::kLinearVelocityFieldNumber;
const int RigidDynamic::kAngularVelocityFieldNumber;
const int RigidDynamic::kLinearDampingFieldNumber;
const int RigidDynamic::kAngularDampingFieldNumber;
const int RigidDynamic::kMaxAngularVelocityFieldNumber;
const int RigidDynamic::kKinematicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RigidDynamic::RigidDynamic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.RigidDynamic)
}
RigidDynamic::RigidDynamic(const RigidDynamic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_centerofmasslocalpose()) {
    centerofmasslocalpose_ = new ::CreateDOM::Pose(*from.centerofmasslocalpose_);
  } else {
    centerofmasslocalpose_ = NULL;
  }
  if (from.has_massspaceinertiatensor()) {
    massspaceinertiatensor_ = new ::CreateDOM::Vec3(*from.massspaceinertiatensor_);
  } else {
    massspaceinertiatensor_ = NULL;
  }
  if (from.has_linearvelocity()) {
    linearvelocity_ = new ::CreateDOM::Vec3(*from.linearvelocity_);
  } else {
    linearvelocity_ = NULL;
  }
  if (from.has_angularvelocity()) {
    angularvelocity_ = new ::CreateDOM::Vec3(*from.angularvelocity_);
  } else {
    angularvelocity_ = NULL;
  }
  ::memcpy(&mass_, &from.mass_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxangularvelocity_) -
    reinterpret_cast<char*>(&mass_)) + sizeof(maxangularvelocity_));
  // @@protoc_insertion_point(copy_constructor:CreateDOM.RigidDynamic)
}

void RigidDynamic::SharedCtor() {
  ::memset(&centerofmasslocalpose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxangularvelocity_) -
      reinterpret_cast<char*>(&centerofmasslocalpose_)) + sizeof(maxangularvelocity_));
  _cached_size_ = 0;
}

RigidDynamic::~RigidDynamic() {
  // @@protoc_insertion_point(destructor:CreateDOM.RigidDynamic)
  SharedDtor();
}

void RigidDynamic::SharedDtor() {
  if (this != internal_default_instance()) delete centerofmasslocalpose_;
  if (this != internal_default_instance()) delete massspaceinertiatensor_;
  if (this != internal_default_instance()) delete linearvelocity_;
  if (this != internal_default_instance()) delete angularvelocity_;
}

void RigidDynamic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RigidDynamic::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RigidDynamic& RigidDynamic::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

RigidDynamic* RigidDynamic::New(::google::protobuf::Arena* arena) const {
  RigidDynamic* n = new RigidDynamic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RigidDynamic::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.RigidDynamic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && centerofmasslocalpose_ != NULL) {
    delete centerofmasslocalpose_;
  }
  centerofmasslocalpose_ = NULL;
  if (GetArenaNoVirtual() == NULL && massspaceinertiatensor_ != NULL) {
    delete massspaceinertiatensor_;
  }
  massspaceinertiatensor_ = NULL;
  if (GetArenaNoVirtual() == NULL && linearvelocity_ != NULL) {
    delete linearvelocity_;
  }
  linearvelocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && angularvelocity_ != NULL) {
    delete angularvelocity_;
  }
  angularvelocity_ = NULL;
  ::memset(&mass_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxangularvelocity_) -
      reinterpret_cast<char*>(&mass_)) + sizeof(maxangularvelocity_));
  _internal_metadata_.Clear();
}

bool RigidDynamic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.RigidDynamic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool disableGravity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disablegravity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Pose centerOfMassLocalPose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centerofmasslocalpose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float mass = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Vec3 massSpaceInertiaTensor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_massspaceinertiatensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Vec3 linearVelocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linearvelocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Vec3 angularVelocity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angularvelocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float linearDamping = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lineardamping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angularDamping = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angulardamping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float maxAngularVelocity = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxangularvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool kinematic = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kinematic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.RigidDynamic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.RigidDynamic)
  return false;
#undef DO_
}

void RigidDynamic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.RigidDynamic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disableGravity = 1;
  if (this->disablegravity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disablegravity(), output);
  }

  // .CreateDOM.Pose centerOfMassLocalPose = 2;
  if (this->has_centerofmasslocalpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->centerofmasslocalpose_, output);
  }

  // float mass = 3;
  if (this->mass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mass(), output);
  }

  // .CreateDOM.Vec3 massSpaceInertiaTensor = 4;
  if (this->has_massspaceinertiatensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->massspaceinertiatensor_, output);
  }

  // .CreateDOM.Vec3 linearVelocity = 5;
  if (this->has_linearvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->linearvelocity_, output);
  }

  // .CreateDOM.Vec3 angularVelocity = 6;
  if (this->has_angularvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->angularvelocity_, output);
  }

  // float linearDamping = 7;
  if (this->lineardamping() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->lineardamping(), output);
  }

  // float angularDamping = 8;
  if (this->angulardamping() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->angulardamping(), output);
  }

  // float maxAngularVelocity = 9;
  if (this->maxangularvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->maxangularvelocity(), output);
  }

  // bool kinematic = 10;
  if (this->kinematic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->kinematic(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.RigidDynamic)
}

::google::protobuf::uint8* RigidDynamic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.RigidDynamic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disableGravity = 1;
  if (this->disablegravity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disablegravity(), target);
  }

  // .CreateDOM.Pose centerOfMassLocalPose = 2;
  if (this->has_centerofmasslocalpose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->centerofmasslocalpose_, deterministic, target);
  }

  // float mass = 3;
  if (this->mass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mass(), target);
  }

  // .CreateDOM.Vec3 massSpaceInertiaTensor = 4;
  if (this->has_massspaceinertiatensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->massspaceinertiatensor_, deterministic, target);
  }

  // .CreateDOM.Vec3 linearVelocity = 5;
  if (this->has_linearvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->linearvelocity_, deterministic, target);
  }

  // .CreateDOM.Vec3 angularVelocity = 6;
  if (this->has_angularvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->angularvelocity_, deterministic, target);
  }

  // float linearDamping = 7;
  if (this->lineardamping() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->lineardamping(), target);
  }

  // float angularDamping = 8;
  if (this->angulardamping() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->angulardamping(), target);
  }

  // float maxAngularVelocity = 9;
  if (this->maxangularvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->maxangularvelocity(), target);
  }

  // bool kinematic = 10;
  if (this->kinematic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->kinematic(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.RigidDynamic)
  return target;
}

size_t RigidDynamic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.RigidDynamic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .CreateDOM.Pose centerOfMassLocalPose = 2;
  if (this->has_centerofmasslocalpose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->centerofmasslocalpose_);
  }

  // .CreateDOM.Vec3 massSpaceInertiaTensor = 4;
  if (this->has_massspaceinertiatensor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->massspaceinertiatensor_);
  }

  // .CreateDOM.Vec3 linearVelocity = 5;
  if (this->has_linearvelocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linearvelocity_);
  }

  // .CreateDOM.Vec3 angularVelocity = 6;
  if (this->has_angularvelocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angularvelocity_);
  }

  // float mass = 3;
  if (this->mass() != 0) {
    total_size += 1 + 4;
  }

  // bool disableGravity = 1;
  if (this->disablegravity() != 0) {
    total_size += 1 + 1;
  }

  // bool kinematic = 10;
  if (this->kinematic() != 0) {
    total_size += 1 + 1;
  }

  // float linearDamping = 7;
  if (this->lineardamping() != 0) {
    total_size += 1 + 4;
  }

  // float angularDamping = 8;
  if (this->angulardamping() != 0) {
    total_size += 1 + 4;
  }

  // float maxAngularVelocity = 9;
  if (this->maxangularvelocity() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RigidDynamic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.RigidDynamic)
  GOOGLE_DCHECK_NE(&from, this);
  const RigidDynamic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RigidDynamic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.RigidDynamic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.RigidDynamic)
    MergeFrom(*source);
  }
}

void RigidDynamic::MergeFrom(const RigidDynamic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.RigidDynamic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_centerofmasslocalpose()) {
    mutable_centerofmasslocalpose()->::CreateDOM::Pose::MergeFrom(from.centerofmasslocalpose());
  }
  if (from.has_massspaceinertiatensor()) {
    mutable_massspaceinertiatensor()->::CreateDOM::Vec3::MergeFrom(from.massspaceinertiatensor());
  }
  if (from.has_linearvelocity()) {
    mutable_linearvelocity()->::CreateDOM::Vec3::MergeFrom(from.linearvelocity());
  }
  if (from.has_angularvelocity()) {
    mutable_angularvelocity()->::CreateDOM::Vec3::MergeFrom(from.angularvelocity());
  }
  if (from.mass() != 0) {
    set_mass(from.mass());
  }
  if (from.disablegravity() != 0) {
    set_disablegravity(from.disablegravity());
  }
  if (from.kinematic() != 0) {
    set_kinematic(from.kinematic());
  }
  if (from.lineardamping() != 0) {
    set_lineardamping(from.lineardamping());
  }
  if (from.angulardamping() != 0) {
    set_angulardamping(from.angulardamping());
  }
  if (from.maxangularvelocity() != 0) {
    set_maxangularvelocity(from.maxangularvelocity());
  }
}

void RigidDynamic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.RigidDynamic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RigidDynamic::CopyFrom(const RigidDynamic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.RigidDynamic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RigidDynamic::IsInitialized() const {
  return true;
}

void RigidDynamic::Swap(RigidDynamic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RigidDynamic::InternalSwap(RigidDynamic* other) {
  using std::swap;
  swap(centerofmasslocalpose_, other->centerofmasslocalpose_);
  swap(massspaceinertiatensor_, other->massspaceinertiatensor_);
  swap(linearvelocity_, other->linearvelocity_);
  swap(angularvelocity_, other->angularvelocity_);
  swap(mass_, other->mass_);
  swap(disablegravity_, other->disablegravity_);
  swap(kinematic_, other->kinematic_);
  swap(lineardamping_, other->lineardamping_);
  swap(angulardamping_, other->angulardamping_);
  swap(maxangularvelocity_, other->maxangularvelocity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RigidDynamic::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RigidDynamic

// bool disableGravity = 1;
void RigidDynamic::clear_disablegravity() {
  disablegravity_ = false;
}
bool RigidDynamic::disablegravity() const {
  // @@protoc_insertion_point(field_get:CreateDOM.RigidDynamic.disableGravity)
  return disablegravity_;
}
void RigidDynamic::set_disablegravity(bool value) {
  
  disablegravity_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.RigidDynamic.disableGravity)
}

// .CreateDOM.Pose centerOfMassLocalPose = 2;
bool RigidDynamic::has_centerofmasslocalpose() const {
  return this != internal_default_instance() && centerofmasslocalpose_ != NULL;
}
void RigidDynamic::clear_centerofmasslocalpose() {
  if (GetArenaNoVirtual() == NULL && centerofmasslocalpose_ != NULL) delete centerofmasslocalpose_;
  centerofmasslocalpose_ = NULL;
}
const ::CreateDOM::Pose& RigidDynamic::centerofmasslocalpose() const {
  const ::CreateDOM::Pose* p = centerofmasslocalpose_;
  // @@protoc_insertion_point(field_get:CreateDOM.RigidDynamic.centerOfMassLocalPose)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Pose*>(
      &::CreateDOM::_Pose_default_instance_);
}
::CreateDOM::Pose* RigidDynamic::mutable_centerofmasslocalpose() {
  
  if (centerofmasslocalpose_ == NULL) {
    centerofmasslocalpose_ = new ::CreateDOM::Pose;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.RigidDynamic.centerOfMassLocalPose)
  return centerofmasslocalpose_;
}
::CreateDOM::Pose* RigidDynamic::release_centerofmasslocalpose() {
  // @@protoc_insertion_point(field_release:CreateDOM.RigidDynamic.centerOfMassLocalPose)
  
  ::CreateDOM::Pose* temp = centerofmasslocalpose_;
  centerofmasslocalpose_ = NULL;
  return temp;
}
void RigidDynamic::set_allocated_centerofmasslocalpose(::CreateDOM::Pose* centerofmasslocalpose) {
  delete centerofmasslocalpose_;
  centerofmasslocalpose_ = centerofmasslocalpose;
  if (centerofmasslocalpose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.RigidDynamic.centerOfMassLocalPose)
}

// float mass = 3;
void RigidDynamic::clear_mass() {
  mass_ = 0;
}
float RigidDynamic::mass() const {
  // @@protoc_insertion_point(field_get:CreateDOM.RigidDynamic.mass)
  return mass_;
}
void RigidDynamic::set_mass(float value) {
  
  mass_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.RigidDynamic.mass)
}

// .CreateDOM.Vec3 massSpaceInertiaTensor = 4;
bool RigidDynamic::has_massspaceinertiatensor() const {
  return this != internal_default_instance() && massspaceinertiatensor_ != NULL;
}
void RigidDynamic::clear_massspaceinertiatensor() {
  if (GetArenaNoVirtual() == NULL && massspaceinertiatensor_ != NULL) delete massspaceinertiatensor_;
  massspaceinertiatensor_ = NULL;
}
const ::CreateDOM::Vec3& RigidDynamic::massspaceinertiatensor() const {
  const ::CreateDOM::Vec3* p = massspaceinertiatensor_;
  // @@protoc_insertion_point(field_get:CreateDOM.RigidDynamic.massSpaceInertiaTensor)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Vec3*>(
      &::CreateDOM::_Vec3_default_instance_);
}
::CreateDOM::Vec3* RigidDynamic::mutable_massspaceinertiatensor() {
  
  if (massspaceinertiatensor_ == NULL) {
    massspaceinertiatensor_ = new ::CreateDOM::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.RigidDynamic.massSpaceInertiaTensor)
  return massspaceinertiatensor_;
}
::CreateDOM::Vec3* RigidDynamic::release_massspaceinertiatensor() {
  // @@protoc_insertion_point(field_release:CreateDOM.RigidDynamic.massSpaceInertiaTensor)
  
  ::CreateDOM::Vec3* temp = massspaceinertiatensor_;
  massspaceinertiatensor_ = NULL;
  return temp;
}
void RigidDynamic::set_allocated_massspaceinertiatensor(::CreateDOM::Vec3* massspaceinertiatensor) {
  delete massspaceinertiatensor_;
  massspaceinertiatensor_ = massspaceinertiatensor;
  if (massspaceinertiatensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.RigidDynamic.massSpaceInertiaTensor)
}

// .CreateDOM.Vec3 linearVelocity = 5;
bool RigidDynamic::has_linearvelocity() const {
  return this != internal_default_instance() && linearvelocity_ != NULL;
}
void RigidDynamic::clear_linearvelocity() {
  if (GetArenaNoVirtual() == NULL && linearvelocity_ != NULL) delete linearvelocity_;
  linearvelocity_ = NULL;
}
const ::CreateDOM::Vec3& RigidDynamic::linearvelocity() const {
  const ::CreateDOM::Vec3* p = linearvelocity_;
  // @@protoc_insertion_point(field_get:CreateDOM.RigidDynamic.linearVelocity)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Vec3*>(
      &::CreateDOM::_Vec3_default_instance_);
}
::CreateDOM::Vec3* RigidDynamic::mutable_linearvelocity() {
  
  if (linearvelocity_ == NULL) {
    linearvelocity_ = new ::CreateDOM::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.RigidDynamic.linearVelocity)
  return linearvelocity_;
}
::CreateDOM::Vec3* RigidDynamic::release_linearvelocity() {
  // @@protoc_insertion_point(field_release:CreateDOM.RigidDynamic.linearVelocity)
  
  ::CreateDOM::Vec3* temp = linearvelocity_;
  linearvelocity_ = NULL;
  return temp;
}
void RigidDynamic::set_allocated_linearvelocity(::CreateDOM::Vec3* linearvelocity) {
  delete linearvelocity_;
  linearvelocity_ = linearvelocity;
  if (linearvelocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.RigidDynamic.linearVelocity)
}

// .CreateDOM.Vec3 angularVelocity = 6;
bool RigidDynamic::has_angularvelocity() const {
  return this != internal_default_instance() && angularvelocity_ != NULL;
}
void RigidDynamic::clear_angularvelocity() {
  if (GetArenaNoVirtual() == NULL && angularvelocity_ != NULL) delete angularvelocity_;
  angularvelocity_ = NULL;
}
const ::CreateDOM::Vec3& RigidDynamic::angularvelocity() const {
  const ::CreateDOM::Vec3* p = angularvelocity_;
  // @@protoc_insertion_point(field_get:CreateDOM.RigidDynamic.angularVelocity)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Vec3*>(
      &::CreateDOM::_Vec3_default_instance_);
}
::CreateDOM::Vec3* RigidDynamic::mutable_angularvelocity() {
  
  if (angularvelocity_ == NULL) {
    angularvelocity_ = new ::CreateDOM::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.RigidDynamic.angularVelocity)
  return angularvelocity_;
}
::CreateDOM::Vec3* RigidDynamic::release_angularvelocity() {
  // @@protoc_insertion_point(field_release:CreateDOM.RigidDynamic.angularVelocity)
  
  ::CreateDOM::Vec3* temp = angularvelocity_;
  angularvelocity_ = NULL;
  return temp;
}
void RigidDynamic::set_allocated_angularvelocity(::CreateDOM::Vec3* angularvelocity) {
  delete angularvelocity_;
  angularvelocity_ = angularvelocity;
  if (angularvelocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.RigidDynamic.angularVelocity)
}

// float linearDamping = 7;
void RigidDynamic::clear_lineardamping() {
  lineardamping_ = 0;
}
float RigidDynamic::lineardamping() const {
  // @@protoc_insertion_point(field_get:CreateDOM.RigidDynamic.linearDamping)
  return lineardamping_;
}
void RigidDynamic::set_lineardamping(float value) {
  
  lineardamping_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.RigidDynamic.linearDamping)
}

// float angularDamping = 8;
void RigidDynamic::clear_angulardamping() {
  angulardamping_ = 0;
}
float RigidDynamic::angulardamping() const {
  // @@protoc_insertion_point(field_get:CreateDOM.RigidDynamic.angularDamping)
  return angulardamping_;
}
void RigidDynamic::set_angulardamping(float value) {
  
  angulardamping_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.RigidDynamic.angularDamping)
}

// float maxAngularVelocity = 9;
void RigidDynamic::clear_maxangularvelocity() {
  maxangularvelocity_ = 0;
}
float RigidDynamic::maxangularvelocity() const {
  // @@protoc_insertion_point(field_get:CreateDOM.RigidDynamic.maxAngularVelocity)
  return maxangularvelocity_;
}
void RigidDynamic::set_maxangularvelocity(float value) {
  
  maxangularvelocity_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.RigidDynamic.maxAngularVelocity)
}

// bool kinematic = 10;
void RigidDynamic::clear_kinematic() {
  kinematic_ = false;
}
bool RigidDynamic::kinematic() const {
  // @@protoc_insertion_point(field_get:CreateDOM.RigidDynamic.kinematic)
  return kinematic_;
}
void RigidDynamic::set_kinematic(bool value) {
  
  kinematic_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.RigidDynamic.kinematic)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Joint::kBody0FieldNumber;
const int Joint::kBody1FieldNumber;
const int Joint::kLocalpose0FieldNumber;
const int Joint::kLocalpose1FieldNumber;
const int Joint::kCollisionEnabledFieldNumber;
const int Joint::kFixedJointFieldNumber;
const int Joint::kSphericalJointFieldNumber;
const int Joint::kHingeJointFieldNumber;
const int Joint::kPrismaticJointFieldNumber;
const int Joint::kDistanceJointFieldNumber;
const int Joint::kBallAndSocketJointFieldNumber;
const int Joint::kD6JointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Joint::Joint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.Joint)
}
Joint::Joint(const Joint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body0().size() > 0) {
    body0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body0_);
  }
  body1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body1().size() > 0) {
    body1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body1_);
  }
  if (from.has_localpose0()) {
    localpose0_ = new ::CreateDOM::Pose(*from.localpose0_);
  } else {
    localpose0_ = NULL;
  }
  if (from.has_localpose1()) {
    localpose1_ = new ::CreateDOM::Pose(*from.localpose1_);
  } else {
    localpose1_ = NULL;
  }
  collisionenabled_ = from.collisionenabled_;
  clear_has_subtype();
  switch (from.subtype_case()) {
    case kFixedJoint: {
      mutable_fixedjoint()->::CreateDOM::FixedJoint::MergeFrom(from.fixedjoint());
      break;
    }
    case kSphericalJoint: {
      mutable_sphericaljoint()->::CreateDOM::SphericalJoint::MergeFrom(from.sphericaljoint());
      break;
    }
    case kHingeJoint: {
      mutable_hingejoint()->::CreateDOM::HingeJoint::MergeFrom(from.hingejoint());
      break;
    }
    case kPrismaticJoint: {
      mutable_prismaticjoint()->::CreateDOM::PrismaticJoint::MergeFrom(from.prismaticjoint());
      break;
    }
    case kDistanceJoint: {
      mutable_distancejoint()->::CreateDOM::DistanceJoint::MergeFrom(from.distancejoint());
      break;
    }
    case kBallAndSocketJoint: {
      mutable_ballandsocketjoint()->::CreateDOM::BallAndSocketJoint::MergeFrom(from.ballandsocketjoint());
      break;
    }
    case kD6Joint: {
      mutable_d6joint()->::CreateDOM::D6Joint::MergeFrom(from.d6joint());
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.Joint)
}

void Joint::SharedCtor() {
  body0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&localpose0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collisionenabled_) -
      reinterpret_cast<char*>(&localpose0_)) + sizeof(collisionenabled_));
  clear_has_subtype();
  _cached_size_ = 0;
}

Joint::~Joint() {
  // @@protoc_insertion_point(destructor:CreateDOM.Joint)
  SharedDtor();
}

void Joint::SharedDtor() {
  body0_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete localpose0_;
  if (this != internal_default_instance()) delete localpose1_;
  if (has_subtype()) {
    clear_subtype();
  }
}

void Joint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Joint::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Joint& Joint::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

Joint* Joint::New(::google::protobuf::Arena* arena) const {
  Joint* n = new Joint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Joint::clear_subtype() {
// @@protoc_insertion_point(one_of_clear_start:CreateDOM.Joint)
  switch (subtype_case()) {
    case kFixedJoint: {
      delete subtype_.fixedjoint_;
      break;
    }
    case kSphericalJoint: {
      delete subtype_.sphericaljoint_;
      break;
    }
    case kHingeJoint: {
      delete subtype_.hingejoint_;
      break;
    }
    case kPrismaticJoint: {
      delete subtype_.prismaticjoint_;
      break;
    }
    case kDistanceJoint: {
      delete subtype_.distancejoint_;
      break;
    }
    case kBallAndSocketJoint: {
      delete subtype_.ballandsocketjoint_;
      break;
    }
    case kD6Joint: {
      delete subtype_.d6joint_;
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUBTYPE_NOT_SET;
}


void Joint::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.Joint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && localpose0_ != NULL) {
    delete localpose0_;
  }
  localpose0_ = NULL;
  if (GetArenaNoVirtual() == NULL && localpose1_ != NULL) {
    delete localpose1_;
  }
  localpose1_ = NULL;
  collisionenabled_ = false;
  clear_subtype();
  _internal_metadata_.Clear();
}

bool Joint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.Joint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string body0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body0()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->body0().data(), static_cast<int>(this->body0().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.Joint.body0"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string body1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->body1().data(), static_cast<int>(this->body1().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.Joint.body1"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Pose localpose0 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localpose0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Pose localpose1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localpose1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool collisionEnabled = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collisionenabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.FixedJoint fixedJoint = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixedjoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.SphericalJoint sphericalJoint = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sphericaljoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.HingeJoint hingeJoint = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hingejoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.PrismaticJoint prismaticJoint = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prismaticjoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.DistanceJoint distanceJoint = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_distancejoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.BallAndSocketJoint ballAndSocketJoint = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ballandsocketjoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.D6Joint d6Joint = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_d6joint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.Joint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.Joint)
  return false;
#undef DO_
}

void Joint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.Joint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string body0 = 1;
  if (this->body0().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body0().data(), static_cast<int>(this->body0().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.Joint.body0");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->body0(), output);
  }

  // string body1 = 2;
  if (this->body1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body1().data(), static_cast<int>(this->body1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.Joint.body1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->body1(), output);
  }

  // .CreateDOM.Pose localpose0 = 3;
  if (this->has_localpose0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->localpose0_, output);
  }

  // .CreateDOM.Pose localpose1 = 4;
  if (this->has_localpose1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->localpose1_, output);
  }

  // bool collisionEnabled = 5;
  if (this->collisionenabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->collisionenabled(), output);
  }

  // .CreateDOM.FixedJoint fixedJoint = 6;
  if (has_fixedjoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *subtype_.fixedjoint_, output);
  }

  // .CreateDOM.SphericalJoint sphericalJoint = 7;
  if (has_sphericaljoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *subtype_.sphericaljoint_, output);
  }

  // .CreateDOM.HingeJoint hingeJoint = 8;
  if (has_hingejoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *subtype_.hingejoint_, output);
  }

  // .CreateDOM.PrismaticJoint prismaticJoint = 9;
  if (has_prismaticjoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *subtype_.prismaticjoint_, output);
  }

  // .CreateDOM.DistanceJoint distanceJoint = 10;
  if (has_distancejoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *subtype_.distancejoint_, output);
  }

  // .CreateDOM.BallAndSocketJoint ballAndSocketJoint = 11;
  if (has_ballandsocketjoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *subtype_.ballandsocketjoint_, output);
  }

  // .CreateDOM.D6Joint d6Joint = 12;
  if (has_d6joint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *subtype_.d6joint_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.Joint)
}

::google::protobuf::uint8* Joint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.Joint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string body0 = 1;
  if (this->body0().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body0().data(), static_cast<int>(this->body0().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.Joint.body0");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->body0(), target);
  }

  // string body1 = 2;
  if (this->body1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body1().data(), static_cast<int>(this->body1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.Joint.body1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->body1(), target);
  }

  // .CreateDOM.Pose localpose0 = 3;
  if (this->has_localpose0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->localpose0_, deterministic, target);
  }

  // .CreateDOM.Pose localpose1 = 4;
  if (this->has_localpose1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->localpose1_, deterministic, target);
  }

  // bool collisionEnabled = 5;
  if (this->collisionenabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->collisionenabled(), target);
  }

  // .CreateDOM.FixedJoint fixedJoint = 6;
  if (has_fixedjoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *subtype_.fixedjoint_, deterministic, target);
  }

  // .CreateDOM.SphericalJoint sphericalJoint = 7;
  if (has_sphericaljoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *subtype_.sphericaljoint_, deterministic, target);
  }

  // .CreateDOM.HingeJoint hingeJoint = 8;
  if (has_hingejoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *subtype_.hingejoint_, deterministic, target);
  }

  // .CreateDOM.PrismaticJoint prismaticJoint = 9;
  if (has_prismaticjoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *subtype_.prismaticjoint_, deterministic, target);
  }

  // .CreateDOM.DistanceJoint distanceJoint = 10;
  if (has_distancejoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *subtype_.distancejoint_, deterministic, target);
  }

  // .CreateDOM.BallAndSocketJoint ballAndSocketJoint = 11;
  if (has_ballandsocketjoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *subtype_.ballandsocketjoint_, deterministic, target);
  }

  // .CreateDOM.D6Joint d6Joint = 12;
  if (has_d6joint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *subtype_.d6joint_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.Joint)
  return target;
}

size_t Joint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.Joint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string body0 = 1;
  if (this->body0().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body0());
  }

  // string body1 = 2;
  if (this->body1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body1());
  }

  // .CreateDOM.Pose localpose0 = 3;
  if (this->has_localpose0()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->localpose0_);
  }

  // .CreateDOM.Pose localpose1 = 4;
  if (this->has_localpose1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->localpose1_);
  }

  // bool collisionEnabled = 5;
  if (this->collisionenabled() != 0) {
    total_size += 1 + 1;
  }

  switch (subtype_case()) {
    // .CreateDOM.FixedJoint fixedJoint = 6;
    case kFixedJoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.fixedjoint_);
      break;
    }
    // .CreateDOM.SphericalJoint sphericalJoint = 7;
    case kSphericalJoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.sphericaljoint_);
      break;
    }
    // .CreateDOM.HingeJoint hingeJoint = 8;
    case kHingeJoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.hingejoint_);
      break;
    }
    // .CreateDOM.PrismaticJoint prismaticJoint = 9;
    case kPrismaticJoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.prismaticjoint_);
      break;
    }
    // .CreateDOM.DistanceJoint distanceJoint = 10;
    case kDistanceJoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.distancejoint_);
      break;
    }
    // .CreateDOM.BallAndSocketJoint ballAndSocketJoint = 11;
    case kBallAndSocketJoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.ballandsocketjoint_);
      break;
    }
    // .CreateDOM.D6Joint d6Joint = 12;
    case kD6Joint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtype_.d6joint_);
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Joint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.Joint)
  GOOGLE_DCHECK_NE(&from, this);
  const Joint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Joint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.Joint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.Joint)
    MergeFrom(*source);
  }
}

void Joint::MergeFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.Joint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body0().size() > 0) {

    body0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body0_);
  }
  if (from.body1().size() > 0) {

    body1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body1_);
  }
  if (from.has_localpose0()) {
    mutable_localpose0()->::CreateDOM::Pose::MergeFrom(from.localpose0());
  }
  if (from.has_localpose1()) {
    mutable_localpose1()->::CreateDOM::Pose::MergeFrom(from.localpose1());
  }
  if (from.collisionenabled() != 0) {
    set_collisionenabled(from.collisionenabled());
  }
  switch (from.subtype_case()) {
    case kFixedJoint: {
      mutable_fixedjoint()->::CreateDOM::FixedJoint::MergeFrom(from.fixedjoint());
      break;
    }
    case kSphericalJoint: {
      mutable_sphericaljoint()->::CreateDOM::SphericalJoint::MergeFrom(from.sphericaljoint());
      break;
    }
    case kHingeJoint: {
      mutable_hingejoint()->::CreateDOM::HingeJoint::MergeFrom(from.hingejoint());
      break;
    }
    case kPrismaticJoint: {
      mutable_prismaticjoint()->::CreateDOM::PrismaticJoint::MergeFrom(from.prismaticjoint());
      break;
    }
    case kDistanceJoint: {
      mutable_distancejoint()->::CreateDOM::DistanceJoint::MergeFrom(from.distancejoint());
      break;
    }
    case kBallAndSocketJoint: {
      mutable_ballandsocketjoint()->::CreateDOM::BallAndSocketJoint::MergeFrom(from.ballandsocketjoint());
      break;
    }
    case kD6Joint: {
      mutable_d6joint()->::CreateDOM::D6Joint::MergeFrom(from.d6joint());
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
}

void Joint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Joint::CopyFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joint::IsInitialized() const {
  return true;
}

void Joint::Swap(Joint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Joint::InternalSwap(Joint* other) {
  using std::swap;
  body0_.Swap(&other->body0_);
  body1_.Swap(&other->body1_);
  swap(localpose0_, other->localpose0_);
  swap(localpose1_, other->localpose1_);
  swap(collisionenabled_, other->collisionenabled_);
  swap(subtype_, other->subtype_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Joint::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Joint

// string body0 = 1;
void Joint::clear_body0() {
  body0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Joint::body0() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Joint.body0)
  return body0_.GetNoArena();
}
void Joint::set_body0(const ::std::string& value) {
  
  body0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.Joint.body0)
}
#if LANG_CXX11
void Joint::set_body0(::std::string&& value) {
  
  body0_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.Joint.body0)
}
#endif
void Joint::set_body0(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.Joint.body0)
}
void Joint::set_body0(const char* value, size_t size) {
  
  body0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.Joint.body0)
}
::std::string* Joint::mutable_body0() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.Joint.body0)
  return body0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Joint::release_body0() {
  // @@protoc_insertion_point(field_release:CreateDOM.Joint.body0)
  
  return body0_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Joint::set_allocated_body0(::std::string* body0) {
  if (body0 != NULL) {
    
  } else {
    
  }
  body0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body0);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Joint.body0)
}

// string body1 = 2;
void Joint::clear_body1() {
  body1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Joint::body1() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Joint.body1)
  return body1_.GetNoArena();
}
void Joint::set_body1(const ::std::string& value) {
  
  body1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.Joint.body1)
}
#if LANG_CXX11
void Joint::set_body1(::std::string&& value) {
  
  body1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.Joint.body1)
}
#endif
void Joint::set_body1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.Joint.body1)
}
void Joint::set_body1(const char* value, size_t size) {
  
  body1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.Joint.body1)
}
::std::string* Joint::mutable_body1() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.Joint.body1)
  return body1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Joint::release_body1() {
  // @@protoc_insertion_point(field_release:CreateDOM.Joint.body1)
  
  return body1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Joint::set_allocated_body1(::std::string* body1) {
  if (body1 != NULL) {
    
  } else {
    
  }
  body1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body1);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Joint.body1)
}

// .CreateDOM.Pose localpose0 = 3;
bool Joint::has_localpose0() const {
  return this != internal_default_instance() && localpose0_ != NULL;
}
void Joint::clear_localpose0() {
  if (GetArenaNoVirtual() == NULL && localpose0_ != NULL) delete localpose0_;
  localpose0_ = NULL;
}
const ::CreateDOM::Pose& Joint::localpose0() const {
  const ::CreateDOM::Pose* p = localpose0_;
  // @@protoc_insertion_point(field_get:CreateDOM.Joint.localpose0)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Pose*>(
      &::CreateDOM::_Pose_default_instance_);
}
::CreateDOM::Pose* Joint::mutable_localpose0() {
  
  if (localpose0_ == NULL) {
    localpose0_ = new ::CreateDOM::Pose;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Joint.localpose0)
  return localpose0_;
}
::CreateDOM::Pose* Joint::release_localpose0() {
  // @@protoc_insertion_point(field_release:CreateDOM.Joint.localpose0)
  
  ::CreateDOM::Pose* temp = localpose0_;
  localpose0_ = NULL;
  return temp;
}
void Joint::set_allocated_localpose0(::CreateDOM::Pose* localpose0) {
  delete localpose0_;
  localpose0_ = localpose0;
  if (localpose0) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Joint.localpose0)
}

// .CreateDOM.Pose localpose1 = 4;
bool Joint::has_localpose1() const {
  return this != internal_default_instance() && localpose1_ != NULL;
}
void Joint::clear_localpose1() {
  if (GetArenaNoVirtual() == NULL && localpose1_ != NULL) delete localpose1_;
  localpose1_ = NULL;
}
const ::CreateDOM::Pose& Joint::localpose1() const {
  const ::CreateDOM::Pose* p = localpose1_;
  // @@protoc_insertion_point(field_get:CreateDOM.Joint.localpose1)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Pose*>(
      &::CreateDOM::_Pose_default_instance_);
}
::CreateDOM::Pose* Joint::mutable_localpose1() {
  
  if (localpose1_ == NULL) {
    localpose1_ = new ::CreateDOM::Pose;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Joint.localpose1)
  return localpose1_;
}
::CreateDOM::Pose* Joint::release_localpose1() {
  // @@protoc_insertion_point(field_release:CreateDOM.Joint.localpose1)
  
  ::CreateDOM::Pose* temp = localpose1_;
  localpose1_ = NULL;
  return temp;
}
void Joint::set_allocated_localpose1(::CreateDOM::Pose* localpose1) {
  delete localpose1_;
  localpose1_ = localpose1;
  if (localpose1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Joint.localpose1)
}

// bool collisionEnabled = 5;
void Joint::clear_collisionenabled() {
  collisionenabled_ = false;
}
bool Joint::collisionenabled() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Joint.collisionEnabled)
  return collisionenabled_;
}
void Joint::set_collisionenabled(bool value) {
  
  collisionenabled_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.Joint.collisionEnabled)
}

// .CreateDOM.FixedJoint fixedJoint = 6;
bool Joint::has_fixedjoint() const {
  return subtype_case() == kFixedJoint;
}
void Joint::set_has_fixedjoint() {
  _oneof_case_[0] = kFixedJoint;
}
void Joint::clear_fixedjoint() {
  if (has_fixedjoint()) {
    delete subtype_.fixedjoint_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::FixedJoint& Joint::fixedjoint() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Joint.fixedJoint)
  return has_fixedjoint()
      ? *subtype_.fixedjoint_
      : ::CreateDOM::FixedJoint::default_instance();
}
::CreateDOM::FixedJoint* Joint::mutable_fixedjoint() {
  if (!has_fixedjoint()) {
    clear_subtype();
    set_has_fixedjoint();
    subtype_.fixedjoint_ = new ::CreateDOM::FixedJoint;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Joint.fixedJoint)
  return subtype_.fixedjoint_;
}
::CreateDOM::FixedJoint* Joint::release_fixedjoint() {
  // @@protoc_insertion_point(field_release:CreateDOM.Joint.fixedJoint)
  if (has_fixedjoint()) {
    clear_has_subtype();
    ::CreateDOM::FixedJoint* temp = subtype_.fixedjoint_;
    subtype_.fixedjoint_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Joint::set_allocated_fixedjoint(::CreateDOM::FixedJoint* fixedjoint) {
  clear_subtype();
  if (fixedjoint) {
    set_has_fixedjoint();
    subtype_.fixedjoint_ = fixedjoint;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Joint.fixedJoint)
}

// .CreateDOM.SphericalJoint sphericalJoint = 7;
bool Joint::has_sphericaljoint() const {
  return subtype_case() == kSphericalJoint;
}
void Joint::set_has_sphericaljoint() {
  _oneof_case_[0] = kSphericalJoint;
}
void Joint::clear_sphericaljoint() {
  if (has_sphericaljoint()) {
    delete subtype_.sphericaljoint_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::SphericalJoint& Joint::sphericaljoint() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Joint.sphericalJoint)
  return has_sphericaljoint()
      ? *subtype_.sphericaljoint_
      : ::CreateDOM::SphericalJoint::default_instance();
}
::CreateDOM::SphericalJoint* Joint::mutable_sphericaljoint() {
  if (!has_sphericaljoint()) {
    clear_subtype();
    set_has_sphericaljoint();
    subtype_.sphericaljoint_ = new ::CreateDOM::SphericalJoint;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Joint.sphericalJoint)
  return subtype_.sphericaljoint_;
}
::CreateDOM::SphericalJoint* Joint::release_sphericaljoint() {
  // @@protoc_insertion_point(field_release:CreateDOM.Joint.sphericalJoint)
  if (has_sphericaljoint()) {
    clear_has_subtype();
    ::CreateDOM::SphericalJoint* temp = subtype_.sphericaljoint_;
    subtype_.sphericaljoint_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Joint::set_allocated_sphericaljoint(::CreateDOM::SphericalJoint* sphericaljoint) {
  clear_subtype();
  if (sphericaljoint) {
    set_has_sphericaljoint();
    subtype_.sphericaljoint_ = sphericaljoint;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Joint.sphericalJoint)
}

// .CreateDOM.HingeJoint hingeJoint = 8;
bool Joint::has_hingejoint() const {
  return subtype_case() == kHingeJoint;
}
void Joint::set_has_hingejoint() {
  _oneof_case_[0] = kHingeJoint;
}
void Joint::clear_hingejoint() {
  if (has_hingejoint()) {
    delete subtype_.hingejoint_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::HingeJoint& Joint::hingejoint() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Joint.hingeJoint)
  return has_hingejoint()
      ? *subtype_.hingejoint_
      : ::CreateDOM::HingeJoint::default_instance();
}
::CreateDOM::HingeJoint* Joint::mutable_hingejoint() {
  if (!has_hingejoint()) {
    clear_subtype();
    set_has_hingejoint();
    subtype_.hingejoint_ = new ::CreateDOM::HingeJoint;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Joint.hingeJoint)
  return subtype_.hingejoint_;
}
::CreateDOM::HingeJoint* Joint::release_hingejoint() {
  // @@protoc_insertion_point(field_release:CreateDOM.Joint.hingeJoint)
  if (has_hingejoint()) {
    clear_has_subtype();
    ::CreateDOM::HingeJoint* temp = subtype_.hingejoint_;
    subtype_.hingejoint_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Joint::set_allocated_hingejoint(::CreateDOM::HingeJoint* hingejoint) {
  clear_subtype();
  if (hingejoint) {
    set_has_hingejoint();
    subtype_.hingejoint_ = hingejoint;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Joint.hingeJoint)
}

// .CreateDOM.PrismaticJoint prismaticJoint = 9;
bool Joint::has_prismaticjoint() const {
  return subtype_case() == kPrismaticJoint;
}
void Joint::set_has_prismaticjoint() {
  _oneof_case_[0] = kPrismaticJoint;
}
void Joint::clear_prismaticjoint() {
  if (has_prismaticjoint()) {
    delete subtype_.prismaticjoint_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::PrismaticJoint& Joint::prismaticjoint() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Joint.prismaticJoint)
  return has_prismaticjoint()
      ? *subtype_.prismaticjoint_
      : ::CreateDOM::PrismaticJoint::default_instance();
}
::CreateDOM::PrismaticJoint* Joint::mutable_prismaticjoint() {
  if (!has_prismaticjoint()) {
    clear_subtype();
    set_has_prismaticjoint();
    subtype_.prismaticjoint_ = new ::CreateDOM::PrismaticJoint;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Joint.prismaticJoint)
  return subtype_.prismaticjoint_;
}
::CreateDOM::PrismaticJoint* Joint::release_prismaticjoint() {
  // @@protoc_insertion_point(field_release:CreateDOM.Joint.prismaticJoint)
  if (has_prismaticjoint()) {
    clear_has_subtype();
    ::CreateDOM::PrismaticJoint* temp = subtype_.prismaticjoint_;
    subtype_.prismaticjoint_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Joint::set_allocated_prismaticjoint(::CreateDOM::PrismaticJoint* prismaticjoint) {
  clear_subtype();
  if (prismaticjoint) {
    set_has_prismaticjoint();
    subtype_.prismaticjoint_ = prismaticjoint;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Joint.prismaticJoint)
}

// .CreateDOM.DistanceJoint distanceJoint = 10;
bool Joint::has_distancejoint() const {
  return subtype_case() == kDistanceJoint;
}
void Joint::set_has_distancejoint() {
  _oneof_case_[0] = kDistanceJoint;
}
void Joint::clear_distancejoint() {
  if (has_distancejoint()) {
    delete subtype_.distancejoint_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::DistanceJoint& Joint::distancejoint() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Joint.distanceJoint)
  return has_distancejoint()
      ? *subtype_.distancejoint_
      : ::CreateDOM::DistanceJoint::default_instance();
}
::CreateDOM::DistanceJoint* Joint::mutable_distancejoint() {
  if (!has_distancejoint()) {
    clear_subtype();
    set_has_distancejoint();
    subtype_.distancejoint_ = new ::CreateDOM::DistanceJoint;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Joint.distanceJoint)
  return subtype_.distancejoint_;
}
::CreateDOM::DistanceJoint* Joint::release_distancejoint() {
  // @@protoc_insertion_point(field_release:CreateDOM.Joint.distanceJoint)
  if (has_distancejoint()) {
    clear_has_subtype();
    ::CreateDOM::DistanceJoint* temp = subtype_.distancejoint_;
    subtype_.distancejoint_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Joint::set_allocated_distancejoint(::CreateDOM::DistanceJoint* distancejoint) {
  clear_subtype();
  if (distancejoint) {
    set_has_distancejoint();
    subtype_.distancejoint_ = distancejoint;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Joint.distanceJoint)
}

// .CreateDOM.BallAndSocketJoint ballAndSocketJoint = 11;
bool Joint::has_ballandsocketjoint() const {
  return subtype_case() == kBallAndSocketJoint;
}
void Joint::set_has_ballandsocketjoint() {
  _oneof_case_[0] = kBallAndSocketJoint;
}
void Joint::clear_ballandsocketjoint() {
  if (has_ballandsocketjoint()) {
    delete subtype_.ballandsocketjoint_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::BallAndSocketJoint& Joint::ballandsocketjoint() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Joint.ballAndSocketJoint)
  return has_ballandsocketjoint()
      ? *subtype_.ballandsocketjoint_
      : ::CreateDOM::BallAndSocketJoint::default_instance();
}
::CreateDOM::BallAndSocketJoint* Joint::mutable_ballandsocketjoint() {
  if (!has_ballandsocketjoint()) {
    clear_subtype();
    set_has_ballandsocketjoint();
    subtype_.ballandsocketjoint_ = new ::CreateDOM::BallAndSocketJoint;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Joint.ballAndSocketJoint)
  return subtype_.ballandsocketjoint_;
}
::CreateDOM::BallAndSocketJoint* Joint::release_ballandsocketjoint() {
  // @@protoc_insertion_point(field_release:CreateDOM.Joint.ballAndSocketJoint)
  if (has_ballandsocketjoint()) {
    clear_has_subtype();
    ::CreateDOM::BallAndSocketJoint* temp = subtype_.ballandsocketjoint_;
    subtype_.ballandsocketjoint_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Joint::set_allocated_ballandsocketjoint(::CreateDOM::BallAndSocketJoint* ballandsocketjoint) {
  clear_subtype();
  if (ballandsocketjoint) {
    set_has_ballandsocketjoint();
    subtype_.ballandsocketjoint_ = ballandsocketjoint;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Joint.ballAndSocketJoint)
}

// .CreateDOM.D6Joint d6Joint = 12;
bool Joint::has_d6joint() const {
  return subtype_case() == kD6Joint;
}
void Joint::set_has_d6joint() {
  _oneof_case_[0] = kD6Joint;
}
void Joint::clear_d6joint() {
  if (has_d6joint()) {
    delete subtype_.d6joint_;
    clear_has_subtype();
  }
}
 const ::CreateDOM::D6Joint& Joint::d6joint() const {
  // @@protoc_insertion_point(field_get:CreateDOM.Joint.d6Joint)
  return has_d6joint()
      ? *subtype_.d6joint_
      : ::CreateDOM::D6Joint::default_instance();
}
::CreateDOM::D6Joint* Joint::mutable_d6joint() {
  if (!has_d6joint()) {
    clear_subtype();
    set_has_d6joint();
    subtype_.d6joint_ = new ::CreateDOM::D6Joint;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Joint.d6Joint)
  return subtype_.d6joint_;
}
::CreateDOM::D6Joint* Joint::release_d6joint() {
  // @@protoc_insertion_point(field_release:CreateDOM.Joint.d6Joint)
  if (has_d6joint()) {
    clear_has_subtype();
    ::CreateDOM::D6Joint* temp = subtype_.d6joint_;
    subtype_.d6joint_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Joint::set_allocated_d6joint(::CreateDOM::D6Joint* d6joint) {
  clear_subtype();
  if (d6joint) {
    set_has_d6joint();
    subtype_.d6joint_ = d6joint;
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Joint.d6Joint)
}

bool Joint::has_subtype() const {
  return subtype_case() != SUBTYPE_NOT_SET;
}
void Joint::clear_has_subtype() {
  _oneof_case_[0] = SUBTYPE_NOT_SET;
}
Joint::SubtypeCase Joint::subtype_case() const {
  return Joint::SubtypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedJoint::FixedJoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.FixedJoint)
}
FixedJoint::FixedJoint(const FixedJoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CreateDOM.FixedJoint)
}

void FixedJoint::SharedCtor() {
  _cached_size_ = 0;
}

FixedJoint::~FixedJoint() {
  // @@protoc_insertion_point(destructor:CreateDOM.FixedJoint)
  SharedDtor();
}

void FixedJoint::SharedDtor() {
}

void FixedJoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedJoint::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FixedJoint& FixedJoint::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

FixedJoint* FixedJoint::New(::google::protobuf::Arena* arena) const {
  FixedJoint* n = new FixedJoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FixedJoint::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.FixedJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool FixedJoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.FixedJoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.FixedJoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.FixedJoint)
  return false;
#undef DO_
}

void FixedJoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.FixedJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.FixedJoint)
}

::google::protobuf::uint8* FixedJoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.FixedJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.FixedJoint)
  return target;
}

size_t FixedJoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.FixedJoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedJoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.FixedJoint)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedJoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedJoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.FixedJoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.FixedJoint)
    MergeFrom(*source);
  }
}

void FixedJoint::MergeFrom(const FixedJoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.FixedJoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FixedJoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.FixedJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedJoint::CopyFrom(const FixedJoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.FixedJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedJoint::IsInitialized() const {
  return true;
}

void FixedJoint::Swap(FixedJoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedJoint::InternalSwap(FixedJoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FixedJoint::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FixedJoint

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SphericalJoint::kLimitYFieldNumber;
const int SphericalJoint::kLimitZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SphericalJoint::SphericalJoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.SphericalJoint)
}
SphericalJoint::SphericalJoint(const SphericalJoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&limity_, &from.limity_,
    static_cast<size_t>(reinterpret_cast<char*>(&limitz_) -
    reinterpret_cast<char*>(&limity_)) + sizeof(limitz_));
  // @@protoc_insertion_point(copy_constructor:CreateDOM.SphericalJoint)
}

void SphericalJoint::SharedCtor() {
  ::memset(&limity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limitz_) -
      reinterpret_cast<char*>(&limity_)) + sizeof(limitz_));
  _cached_size_ = 0;
}

SphericalJoint::~SphericalJoint() {
  // @@protoc_insertion_point(destructor:CreateDOM.SphericalJoint)
  SharedDtor();
}

void SphericalJoint::SharedDtor() {
}

void SphericalJoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SphericalJoint::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SphericalJoint& SphericalJoint::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

SphericalJoint* SphericalJoint::New(::google::protobuf::Arena* arena) const {
  SphericalJoint* n = new SphericalJoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SphericalJoint::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.SphericalJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&limity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limitz_) -
      reinterpret_cast<char*>(&limity_)) + sizeof(limitz_));
  _internal_metadata_.Clear();
}

bool SphericalJoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.SphericalJoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float limitY = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &limity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float limitZ = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &limitz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.SphericalJoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.SphericalJoint)
  return false;
#undef DO_
}

void SphericalJoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.SphericalJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float limitY = 1;
  if (this->limity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->limity(), output);
  }

  // float limitZ = 2;
  if (this->limitz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->limitz(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.SphericalJoint)
}

::google::protobuf::uint8* SphericalJoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.SphericalJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float limitY = 1;
  if (this->limity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->limity(), target);
  }

  // float limitZ = 2;
  if (this->limitz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->limitz(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.SphericalJoint)
  return target;
}

size_t SphericalJoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.SphericalJoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float limitY = 1;
  if (this->limity() != 0) {
    total_size += 1 + 4;
  }

  // float limitZ = 2;
  if (this->limitz() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SphericalJoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.SphericalJoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SphericalJoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SphericalJoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.SphericalJoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.SphericalJoint)
    MergeFrom(*source);
  }
}

void SphericalJoint::MergeFrom(const SphericalJoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.SphericalJoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limity() != 0) {
    set_limity(from.limity());
  }
  if (from.limitz() != 0) {
    set_limitz(from.limitz());
  }
}

void SphericalJoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.SphericalJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SphericalJoint::CopyFrom(const SphericalJoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.SphericalJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SphericalJoint::IsInitialized() const {
  return true;
}

void SphericalJoint::Swap(SphericalJoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SphericalJoint::InternalSwap(SphericalJoint* other) {
  using std::swap;
  swap(limity_, other->limity_);
  swap(limitz_, other->limitz_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SphericalJoint::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SphericalJoint

// float limitY = 1;
void SphericalJoint::clear_limity() {
  limity_ = 0;
}
float SphericalJoint::limity() const {
  // @@protoc_insertion_point(field_get:CreateDOM.SphericalJoint.limitY)
  return limity_;
}
void SphericalJoint::set_limity(float value) {
  
  limity_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.SphericalJoint.limitY)
}

// float limitZ = 2;
void SphericalJoint::clear_limitz() {
  limitz_ = 0;
}
float SphericalJoint::limitz() const {
  // @@protoc_insertion_point(field_get:CreateDOM.SphericalJoint.limitZ)
  return limitz_;
}
void SphericalJoint::set_limitz(float value) {
  
  limitz_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.SphericalJoint.limitZ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HingeJoint::kLimtLowFieldNumber;
const int HingeJoint::kLimitHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HingeJoint::HingeJoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.HingeJoint)
}
HingeJoint::HingeJoint(const HingeJoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&limtlow_, &from.limtlow_,
    static_cast<size_t>(reinterpret_cast<char*>(&limithigh_) -
    reinterpret_cast<char*>(&limtlow_)) + sizeof(limithigh_));
  // @@protoc_insertion_point(copy_constructor:CreateDOM.HingeJoint)
}

void HingeJoint::SharedCtor() {
  ::memset(&limtlow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limithigh_) -
      reinterpret_cast<char*>(&limtlow_)) + sizeof(limithigh_));
  _cached_size_ = 0;
}

HingeJoint::~HingeJoint() {
  // @@protoc_insertion_point(destructor:CreateDOM.HingeJoint)
  SharedDtor();
}

void HingeJoint::SharedDtor() {
}

void HingeJoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HingeJoint::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HingeJoint& HingeJoint::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

HingeJoint* HingeJoint::New(::google::protobuf::Arena* arena) const {
  HingeJoint* n = new HingeJoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HingeJoint::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.HingeJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&limtlow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limithigh_) -
      reinterpret_cast<char*>(&limtlow_)) + sizeof(limithigh_));
  _internal_metadata_.Clear();
}

bool HingeJoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.HingeJoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float limtLow = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &limtlow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float limitHigh = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &limithigh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.HingeJoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.HingeJoint)
  return false;
#undef DO_
}

void HingeJoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.HingeJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float limtLow = 1;
  if (this->limtlow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->limtlow(), output);
  }

  // float limitHigh = 2;
  if (this->limithigh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->limithigh(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.HingeJoint)
}

::google::protobuf::uint8* HingeJoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.HingeJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float limtLow = 1;
  if (this->limtlow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->limtlow(), target);
  }

  // float limitHigh = 2;
  if (this->limithigh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->limithigh(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.HingeJoint)
  return target;
}

size_t HingeJoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.HingeJoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float limtLow = 1;
  if (this->limtlow() != 0) {
    total_size += 1 + 4;
  }

  // float limitHigh = 2;
  if (this->limithigh() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HingeJoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.HingeJoint)
  GOOGLE_DCHECK_NE(&from, this);
  const HingeJoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HingeJoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.HingeJoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.HingeJoint)
    MergeFrom(*source);
  }
}

void HingeJoint::MergeFrom(const HingeJoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.HingeJoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limtlow() != 0) {
    set_limtlow(from.limtlow());
  }
  if (from.limithigh() != 0) {
    set_limithigh(from.limithigh());
  }
}

void HingeJoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.HingeJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HingeJoint::CopyFrom(const HingeJoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.HingeJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HingeJoint::IsInitialized() const {
  return true;
}

void HingeJoint::Swap(HingeJoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HingeJoint::InternalSwap(HingeJoint* other) {
  using std::swap;
  swap(limtlow_, other->limtlow_);
  swap(limithigh_, other->limithigh_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HingeJoint::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HingeJoint

// float limtLow = 1;
void HingeJoint::clear_limtlow() {
  limtlow_ = 0;
}
float HingeJoint::limtlow() const {
  // @@protoc_insertion_point(field_get:CreateDOM.HingeJoint.limtLow)
  return limtlow_;
}
void HingeJoint::set_limtlow(float value) {
  
  limtlow_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.HingeJoint.limtLow)
}

// float limitHigh = 2;
void HingeJoint::clear_limithigh() {
  limithigh_ = 0;
}
float HingeJoint::limithigh() const {
  // @@protoc_insertion_point(field_get:CreateDOM.HingeJoint.limitHigh)
  return limithigh_;
}
void HingeJoint::set_limithigh(float value) {
  
  limithigh_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.HingeJoint.limitHigh)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrismaticJoint::kLimitLowFieldNumber;
const int PrismaticJoint::kLimitHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrismaticJoint::PrismaticJoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.PrismaticJoint)
}
PrismaticJoint::PrismaticJoint(const PrismaticJoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&limitlow_, &from.limitlow_,
    static_cast<size_t>(reinterpret_cast<char*>(&limithigh_) -
    reinterpret_cast<char*>(&limitlow_)) + sizeof(limithigh_));
  // @@protoc_insertion_point(copy_constructor:CreateDOM.PrismaticJoint)
}

void PrismaticJoint::SharedCtor() {
  ::memset(&limitlow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limithigh_) -
      reinterpret_cast<char*>(&limitlow_)) + sizeof(limithigh_));
  _cached_size_ = 0;
}

PrismaticJoint::~PrismaticJoint() {
  // @@protoc_insertion_point(destructor:CreateDOM.PrismaticJoint)
  SharedDtor();
}

void PrismaticJoint::SharedDtor() {
}

void PrismaticJoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrismaticJoint::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrismaticJoint& PrismaticJoint::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

PrismaticJoint* PrismaticJoint::New(::google::protobuf::Arena* arena) const {
  PrismaticJoint* n = new PrismaticJoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrismaticJoint::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.PrismaticJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&limitlow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limithigh_) -
      reinterpret_cast<char*>(&limitlow_)) + sizeof(limithigh_));
  _internal_metadata_.Clear();
}

bool PrismaticJoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.PrismaticJoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float limitLow = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &limitlow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float limitHigh = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &limithigh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.PrismaticJoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.PrismaticJoint)
  return false;
#undef DO_
}

void PrismaticJoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.PrismaticJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float limitLow = 1;
  if (this->limitlow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->limitlow(), output);
  }

  // float limitHigh = 2;
  if (this->limithigh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->limithigh(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.PrismaticJoint)
}

::google::protobuf::uint8* PrismaticJoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.PrismaticJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float limitLow = 1;
  if (this->limitlow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->limitlow(), target);
  }

  // float limitHigh = 2;
  if (this->limithigh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->limithigh(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.PrismaticJoint)
  return target;
}

size_t PrismaticJoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.PrismaticJoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float limitLow = 1;
  if (this->limitlow() != 0) {
    total_size += 1 + 4;
  }

  // float limitHigh = 2;
  if (this->limithigh() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrismaticJoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.PrismaticJoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PrismaticJoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrismaticJoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.PrismaticJoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.PrismaticJoint)
    MergeFrom(*source);
  }
}

void PrismaticJoint::MergeFrom(const PrismaticJoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.PrismaticJoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limitlow() != 0) {
    set_limitlow(from.limitlow());
  }
  if (from.limithigh() != 0) {
    set_limithigh(from.limithigh());
  }
}

void PrismaticJoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.PrismaticJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrismaticJoint::CopyFrom(const PrismaticJoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.PrismaticJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrismaticJoint::IsInitialized() const {
  return true;
}

void PrismaticJoint::Swap(PrismaticJoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrismaticJoint::InternalSwap(PrismaticJoint* other) {
  using std::swap;
  swap(limitlow_, other->limitlow_);
  swap(limithigh_, other->limithigh_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrismaticJoint::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrismaticJoint

// float limitLow = 1;
void PrismaticJoint::clear_limitlow() {
  limitlow_ = 0;
}
float PrismaticJoint::limitlow() const {
  // @@protoc_insertion_point(field_get:CreateDOM.PrismaticJoint.limitLow)
  return limitlow_;
}
void PrismaticJoint::set_limitlow(float value) {
  
  limitlow_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.PrismaticJoint.limitLow)
}

// float limitHigh = 2;
void PrismaticJoint::clear_limithigh() {
  limithigh_ = 0;
}
float PrismaticJoint::limithigh() const {
  // @@protoc_insertion_point(field_get:CreateDOM.PrismaticJoint.limitHigh)
  return limithigh_;
}
void PrismaticJoint::set_limithigh(float value) {
  
  limithigh_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.PrismaticJoint.limitHigh)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistanceJoint::kDistanceLowFieldNumber;
const int DistanceJoint::kDistanceHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistanceJoint::DistanceJoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.DistanceJoint)
}
DistanceJoint::DistanceJoint(const DistanceJoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&distancelow_, &from.distancelow_,
    static_cast<size_t>(reinterpret_cast<char*>(&distancehigh_) -
    reinterpret_cast<char*>(&distancelow_)) + sizeof(distancehigh_));
  // @@protoc_insertion_point(copy_constructor:CreateDOM.DistanceJoint)
}

void DistanceJoint::SharedCtor() {
  ::memset(&distancelow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distancehigh_) -
      reinterpret_cast<char*>(&distancelow_)) + sizeof(distancehigh_));
  _cached_size_ = 0;
}

DistanceJoint::~DistanceJoint() {
  // @@protoc_insertion_point(destructor:CreateDOM.DistanceJoint)
  SharedDtor();
}

void DistanceJoint::SharedDtor() {
}

void DistanceJoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DistanceJoint::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DistanceJoint& DistanceJoint::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

DistanceJoint* DistanceJoint::New(::google::protobuf::Arena* arena) const {
  DistanceJoint* n = new DistanceJoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistanceJoint::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.DistanceJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&distancelow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distancehigh_) -
      reinterpret_cast<char*>(&distancelow_)) + sizeof(distancehigh_));
  _internal_metadata_.Clear();
}

bool DistanceJoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.DistanceJoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float distanceLow = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distancelow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distanceHigh = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distancehigh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.DistanceJoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.DistanceJoint)
  return false;
#undef DO_
}

void DistanceJoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.DistanceJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float distanceLow = 1;
  if (this->distancelow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->distancelow(), output);
  }

  // float distanceHigh = 2;
  if (this->distancehigh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distancehigh(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.DistanceJoint)
}

::google::protobuf::uint8* DistanceJoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.DistanceJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float distanceLow = 1;
  if (this->distancelow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->distancelow(), target);
  }

  // float distanceHigh = 2;
  if (this->distancehigh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->distancehigh(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.DistanceJoint)
  return target;
}

size_t DistanceJoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.DistanceJoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float distanceLow = 1;
  if (this->distancelow() != 0) {
    total_size += 1 + 4;
  }

  // float distanceHigh = 2;
  if (this->distancehigh() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistanceJoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.DistanceJoint)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceJoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DistanceJoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.DistanceJoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.DistanceJoint)
    MergeFrom(*source);
  }
}

void DistanceJoint::MergeFrom(const DistanceJoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.DistanceJoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.distancelow() != 0) {
    set_distancelow(from.distancelow());
  }
  if (from.distancehigh() != 0) {
    set_distancehigh(from.distancehigh());
  }
}

void DistanceJoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.DistanceJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceJoint::CopyFrom(const DistanceJoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.DistanceJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceJoint::IsInitialized() const {
  return true;
}

void DistanceJoint::Swap(DistanceJoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistanceJoint::InternalSwap(DistanceJoint* other) {
  using std::swap;
  swap(distancelow_, other->distancelow_);
  swap(distancehigh_, other->distancehigh_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DistanceJoint::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DistanceJoint

// float distanceLow = 1;
void DistanceJoint::clear_distancelow() {
  distancelow_ = 0;
}
float DistanceJoint::distancelow() const {
  // @@protoc_insertion_point(field_get:CreateDOM.DistanceJoint.distanceLow)
  return distancelow_;
}
void DistanceJoint::set_distancelow(float value) {
  
  distancelow_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.DistanceJoint.distanceLow)
}

// float distanceHigh = 2;
void DistanceJoint::clear_distancehigh() {
  distancehigh_ = 0;
}
float DistanceJoint::distancehigh() const {
  // @@protoc_insertion_point(field_get:CreateDOM.DistanceJoint.distanceHigh)
  return distancehigh_;
}
void DistanceJoint::set_distancehigh(float value) {
  
  distancehigh_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.DistanceJoint.distanceHigh)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallAndSocketJoint::kLimitXLowFieldNumber;
const int BallAndSocketJoint::kLimitXHighFieldNumber;
const int BallAndSocketJoint::kLimitYFieldNumber;
const int BallAndSocketJoint::kLimitZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallAndSocketJoint::BallAndSocketJoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.BallAndSocketJoint)
}
BallAndSocketJoint::BallAndSocketJoint(const BallAndSocketJoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&limitxlow_, &from.limitxlow_,
    static_cast<size_t>(reinterpret_cast<char*>(&limitz_) -
    reinterpret_cast<char*>(&limitxlow_)) + sizeof(limitz_));
  // @@protoc_insertion_point(copy_constructor:CreateDOM.BallAndSocketJoint)
}

void BallAndSocketJoint::SharedCtor() {
  ::memset(&limitxlow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limitz_) -
      reinterpret_cast<char*>(&limitxlow_)) + sizeof(limitz_));
  _cached_size_ = 0;
}

BallAndSocketJoint::~BallAndSocketJoint() {
  // @@protoc_insertion_point(destructor:CreateDOM.BallAndSocketJoint)
  SharedDtor();
}

void BallAndSocketJoint::SharedDtor() {
}

void BallAndSocketJoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallAndSocketJoint::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BallAndSocketJoint& BallAndSocketJoint::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

BallAndSocketJoint* BallAndSocketJoint::New(::google::protobuf::Arena* arena) const {
  BallAndSocketJoint* n = new BallAndSocketJoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BallAndSocketJoint::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.BallAndSocketJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&limitxlow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limitz_) -
      reinterpret_cast<char*>(&limitxlow_)) + sizeof(limitz_));
  _internal_metadata_.Clear();
}

bool BallAndSocketJoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.BallAndSocketJoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float limitXLow = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &limitxlow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float limitXHigh = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &limitxhigh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float limitY = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &limity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float limitZ = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &limitz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.BallAndSocketJoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.BallAndSocketJoint)
  return false;
#undef DO_
}

void BallAndSocketJoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.BallAndSocketJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float limitXLow = 1;
  if (this->limitxlow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->limitxlow(), output);
  }

  // float limitXHigh = 2;
  if (this->limitxhigh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->limitxhigh(), output);
  }

  // float limitY = 3;
  if (this->limity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->limity(), output);
  }

  // float limitZ = 4;
  if (this->limitz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->limitz(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.BallAndSocketJoint)
}

::google::protobuf::uint8* BallAndSocketJoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.BallAndSocketJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float limitXLow = 1;
  if (this->limitxlow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->limitxlow(), target);
  }

  // float limitXHigh = 2;
  if (this->limitxhigh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->limitxhigh(), target);
  }

  // float limitY = 3;
  if (this->limity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->limity(), target);
  }

  // float limitZ = 4;
  if (this->limitz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->limitz(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.BallAndSocketJoint)
  return target;
}

size_t BallAndSocketJoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.BallAndSocketJoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float limitXLow = 1;
  if (this->limitxlow() != 0) {
    total_size += 1 + 4;
  }

  // float limitXHigh = 2;
  if (this->limitxhigh() != 0) {
    total_size += 1 + 4;
  }

  // float limitY = 3;
  if (this->limity() != 0) {
    total_size += 1 + 4;
  }

  // float limitZ = 4;
  if (this->limitz() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallAndSocketJoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.BallAndSocketJoint)
  GOOGLE_DCHECK_NE(&from, this);
  const BallAndSocketJoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BallAndSocketJoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.BallAndSocketJoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.BallAndSocketJoint)
    MergeFrom(*source);
  }
}

void BallAndSocketJoint::MergeFrom(const BallAndSocketJoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.BallAndSocketJoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limitxlow() != 0) {
    set_limitxlow(from.limitxlow());
  }
  if (from.limitxhigh() != 0) {
    set_limitxhigh(from.limitxhigh());
  }
  if (from.limity() != 0) {
    set_limity(from.limity());
  }
  if (from.limitz() != 0) {
    set_limitz(from.limitz());
  }
}

void BallAndSocketJoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.BallAndSocketJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallAndSocketJoint::CopyFrom(const BallAndSocketJoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.BallAndSocketJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallAndSocketJoint::IsInitialized() const {
  return true;
}

void BallAndSocketJoint::Swap(BallAndSocketJoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallAndSocketJoint::InternalSwap(BallAndSocketJoint* other) {
  using std::swap;
  swap(limitxlow_, other->limitxlow_);
  swap(limitxhigh_, other->limitxhigh_);
  swap(limity_, other->limity_);
  swap(limitz_, other->limitz_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BallAndSocketJoint::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BallAndSocketJoint

// float limitXLow = 1;
void BallAndSocketJoint::clear_limitxlow() {
  limitxlow_ = 0;
}
float BallAndSocketJoint::limitxlow() const {
  // @@protoc_insertion_point(field_get:CreateDOM.BallAndSocketJoint.limitXLow)
  return limitxlow_;
}
void BallAndSocketJoint::set_limitxlow(float value) {
  
  limitxlow_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.BallAndSocketJoint.limitXLow)
}

// float limitXHigh = 2;
void BallAndSocketJoint::clear_limitxhigh() {
  limitxhigh_ = 0;
}
float BallAndSocketJoint::limitxhigh() const {
  // @@protoc_insertion_point(field_get:CreateDOM.BallAndSocketJoint.limitXHigh)
  return limitxhigh_;
}
void BallAndSocketJoint::set_limitxhigh(float value) {
  
  limitxhigh_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.BallAndSocketJoint.limitXHigh)
}

// float limitY = 3;
void BallAndSocketJoint::clear_limity() {
  limity_ = 0;
}
float BallAndSocketJoint::limity() const {
  // @@protoc_insertion_point(field_get:CreateDOM.BallAndSocketJoint.limitY)
  return limity_;
}
void BallAndSocketJoint::set_limity(float value) {
  
  limity_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.BallAndSocketJoint.limitY)
}

// float limitZ = 4;
void BallAndSocketJoint::clear_limitz() {
  limitz_ = 0;
}
float BallAndSocketJoint::limitz() const {
  // @@protoc_insertion_point(field_get:CreateDOM.BallAndSocketJoint.limitZ)
  return limitz_;
}
void BallAndSocketJoint::set_limitz(float value) {
  
  limitz_ = value;
  // @@protoc_insertion_point(field_set:CreateDOM.BallAndSocketJoint.limitZ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

D6Joint::D6Joint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.D6Joint)
}
D6Joint::D6Joint(const D6Joint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CreateDOM.D6Joint)
}

void D6Joint::SharedCtor() {
  _cached_size_ = 0;
}

D6Joint::~D6Joint() {
  // @@protoc_insertion_point(destructor:CreateDOM.D6Joint)
  SharedDtor();
}

void D6Joint::SharedDtor() {
}

void D6Joint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* D6Joint::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const D6Joint& D6Joint::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

D6Joint* D6Joint::New(::google::protobuf::Arena* arena) const {
  D6Joint* n = new D6Joint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void D6Joint::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.D6Joint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool D6Joint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.D6Joint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.D6Joint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.D6Joint)
  return false;
#undef DO_
}

void D6Joint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.D6Joint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.D6Joint)
}

::google::protobuf::uint8* D6Joint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.D6Joint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.D6Joint)
  return target;
}

size_t D6Joint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.D6Joint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void D6Joint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.D6Joint)
  GOOGLE_DCHECK_NE(&from, this);
  const D6Joint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const D6Joint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.D6Joint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.D6Joint)
    MergeFrom(*source);
  }
}

void D6Joint::MergeFrom(const D6Joint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.D6Joint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void D6Joint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.D6Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void D6Joint::CopyFrom(const D6Joint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.D6Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool D6Joint::IsInitialized() const {
  return true;
}

void D6Joint::Swap(D6Joint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void D6Joint::InternalSwap(D6Joint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata D6Joint::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// D6Joint

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BodyPairFilter::kBodyAFieldNumber;
const int BodyPairFilter::kBodyBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BodyPairFilter::BodyPairFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.BodyPairFilter)
}
BodyPairFilter::BodyPairFilter(const BodyPairFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bodya_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bodya().size() > 0) {
    bodya_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodya_);
  }
  bodyb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bodyb().size() > 0) {
    bodyb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodyb_);
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.BodyPairFilter)
}

void BodyPairFilter::SharedCtor() {
  bodya_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bodyb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BodyPairFilter::~BodyPairFilter() {
  // @@protoc_insertion_point(destructor:CreateDOM.BodyPairFilter)
  SharedDtor();
}

void BodyPairFilter::SharedDtor() {
  bodya_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bodyb_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BodyPairFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyPairFilter::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BodyPairFilter& BodyPairFilter::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

BodyPairFilter* BodyPairFilter::New(::google::protobuf::Arena* arena) const {
  BodyPairFilter* n = new BodyPairFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BodyPairFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.BodyPairFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bodya_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bodyb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BodyPairFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.BodyPairFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bodyA = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodya()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bodya().data(), static_cast<int>(this->bodya().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.BodyPairFilter.bodyA"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bodyB = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodyb()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bodyb().data(), static_cast<int>(this->bodyb().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.BodyPairFilter.bodyB"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.BodyPairFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.BodyPairFilter)
  return false;
#undef DO_
}

void BodyPairFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.BodyPairFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bodyA = 1;
  if (this->bodya().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bodya().data(), static_cast<int>(this->bodya().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.BodyPairFilter.bodyA");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bodya(), output);
  }

  // string bodyB = 2;
  if (this->bodyb().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bodyb().data(), static_cast<int>(this->bodyb().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.BodyPairFilter.bodyB");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bodyb(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.BodyPairFilter)
}

::google::protobuf::uint8* BodyPairFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.BodyPairFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bodyA = 1;
  if (this->bodya().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bodya().data(), static_cast<int>(this->bodya().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.BodyPairFilter.bodyA");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bodya(), target);
  }

  // string bodyB = 2;
  if (this->bodyb().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bodyb().data(), static_cast<int>(this->bodyb().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.BodyPairFilter.bodyB");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bodyb(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.BodyPairFilter)
  return target;
}

size_t BodyPairFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.BodyPairFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string bodyA = 1;
  if (this->bodya().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bodya());
  }

  // string bodyB = 2;
  if (this->bodyb().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bodyb());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyPairFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.BodyPairFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const BodyPairFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BodyPairFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.BodyPairFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.BodyPairFilter)
    MergeFrom(*source);
  }
}

void BodyPairFilter::MergeFrom(const BodyPairFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.BodyPairFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bodya().size() > 0) {

    bodya_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodya_);
  }
  if (from.bodyb().size() > 0) {

    bodyb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodyb_);
  }
}

void BodyPairFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.BodyPairFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyPairFilter::CopyFrom(const BodyPairFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.BodyPairFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyPairFilter::IsInitialized() const {
  return true;
}

void BodyPairFilter::Swap(BodyPairFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BodyPairFilter::InternalSwap(BodyPairFilter* other) {
  using std::swap;
  bodya_.Swap(&other->bodya_);
  bodyb_.Swap(&other->bodyb_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BodyPairFilter::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BodyPairFilter

// string bodyA = 1;
void BodyPairFilter::clear_bodya() {
  bodya_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BodyPairFilter::bodya() const {
  // @@protoc_insertion_point(field_get:CreateDOM.BodyPairFilter.bodyA)
  return bodya_.GetNoArena();
}
void BodyPairFilter::set_bodya(const ::std::string& value) {
  
  bodya_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.BodyPairFilter.bodyA)
}
#if LANG_CXX11
void BodyPairFilter::set_bodya(::std::string&& value) {
  
  bodya_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.BodyPairFilter.bodyA)
}
#endif
void BodyPairFilter::set_bodya(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bodya_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.BodyPairFilter.bodyA)
}
void BodyPairFilter::set_bodya(const char* value, size_t size) {
  
  bodya_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.BodyPairFilter.bodyA)
}
::std::string* BodyPairFilter::mutable_bodya() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.BodyPairFilter.bodyA)
  return bodya_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BodyPairFilter::release_bodya() {
  // @@protoc_insertion_point(field_release:CreateDOM.BodyPairFilter.bodyA)
  
  return bodya_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BodyPairFilter::set_allocated_bodya(::std::string* bodya) {
  if (bodya != NULL) {
    
  } else {
    
  }
  bodya_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bodya);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.BodyPairFilter.bodyA)
}

// string bodyB = 2;
void BodyPairFilter::clear_bodyb() {
  bodyb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BodyPairFilter::bodyb() const {
  // @@protoc_insertion_point(field_get:CreateDOM.BodyPairFilter.bodyB)
  return bodyb_.GetNoArena();
}
void BodyPairFilter::set_bodyb(const ::std::string& value) {
  
  bodyb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.BodyPairFilter.bodyB)
}
#if LANG_CXX11
void BodyPairFilter::set_bodyb(::std::string&& value) {
  
  bodyb_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.BodyPairFilter.bodyB)
}
#endif
void BodyPairFilter::set_bodyb(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bodyb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.BodyPairFilter.bodyB)
}
void BodyPairFilter::set_bodyb(const char* value, size_t size) {
  
  bodyb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.BodyPairFilter.bodyB)
}
::std::string* BodyPairFilter::mutable_bodyb() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.BodyPairFilter.bodyB)
  return bodyb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BodyPairFilter::release_bodyb() {
  // @@protoc_insertion_point(field_release:CreateDOM.BodyPairFilter.bodyB)
  
  return bodyb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BodyPairFilter::set_allocated_bodyb(::std::string* bodyb) {
  if (bodyb != NULL) {
    
  } else {
    
  }
  bodyb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bodyb);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.BodyPairFilter.bodyB)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BodyPairFilters::kBodyPairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BodyPairFilters::BodyPairFilters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.BodyPairFilters)
}
BodyPairFilters::BodyPairFilters(const BodyPairFilters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bodypairs_(from.bodypairs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CreateDOM.BodyPairFilters)
}

void BodyPairFilters::SharedCtor() {
  _cached_size_ = 0;
}

BodyPairFilters::~BodyPairFilters() {
  // @@protoc_insertion_point(destructor:CreateDOM.BodyPairFilters)
  SharedDtor();
}

void BodyPairFilters::SharedDtor() {
}

void BodyPairFilters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyPairFilters::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BodyPairFilters& BodyPairFilters::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

BodyPairFilters* BodyPairFilters::New(::google::protobuf::Arena* arena) const {
  BodyPairFilters* n = new BodyPairFilters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BodyPairFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.BodyPairFilters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bodypairs_.Clear();
  _internal_metadata_.Clear();
}

bool BodyPairFilters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.BodyPairFilters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CreateDOM.BodyPairFilter bodyPairs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bodypairs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.BodyPairFilters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.BodyPairFilters)
  return false;
#undef DO_
}

void BodyPairFilters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.BodyPairFilters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CreateDOM.BodyPairFilter bodyPairs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bodypairs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bodypairs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.BodyPairFilters)
}

::google::protobuf::uint8* BodyPairFilters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.BodyPairFilters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CreateDOM.BodyPairFilter bodyPairs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bodypairs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->bodypairs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.BodyPairFilters)
  return target;
}

size_t BodyPairFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.BodyPairFilters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CreateDOM.BodyPairFilter bodyPairs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bodypairs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bodypairs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyPairFilters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.BodyPairFilters)
  GOOGLE_DCHECK_NE(&from, this);
  const BodyPairFilters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BodyPairFilters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.BodyPairFilters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.BodyPairFilters)
    MergeFrom(*source);
  }
}

void BodyPairFilters::MergeFrom(const BodyPairFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.BodyPairFilters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bodypairs_.MergeFrom(from.bodypairs_);
}

void BodyPairFilters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.BodyPairFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyPairFilters::CopyFrom(const BodyPairFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.BodyPairFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyPairFilters::IsInitialized() const {
  return true;
}

void BodyPairFilters::Swap(BodyPairFilters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BodyPairFilters::InternalSwap(BodyPairFilters* other) {
  using std::swap;
  bodypairs_.InternalSwap(&other->bodypairs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BodyPairFilters::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BodyPairFilters

// repeated .CreateDOM.BodyPairFilter bodyPairs = 1;
int BodyPairFilters::bodypairs_size() const {
  return bodypairs_.size();
}
void BodyPairFilters::clear_bodypairs() {
  bodypairs_.Clear();
}
const ::CreateDOM::BodyPairFilter& BodyPairFilters::bodypairs(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.BodyPairFilters.bodyPairs)
  return bodypairs_.Get(index);
}
::CreateDOM::BodyPairFilter* BodyPairFilters::mutable_bodypairs(int index) {
  // @@protoc_insertion_point(field_mutable:CreateDOM.BodyPairFilters.bodyPairs)
  return bodypairs_.Mutable(index);
}
::CreateDOM::BodyPairFilter* BodyPairFilters::add_bodypairs() {
  // @@protoc_insertion_point(field_add:CreateDOM.BodyPairFilters.bodyPairs)
  return bodypairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::CreateDOM::BodyPairFilter >*
BodyPairFilters::mutable_bodypairs() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.BodyPairFilters.bodyPairs)
  return &bodypairs_;
}
const ::google::protobuf::RepeatedPtrField< ::CreateDOM::BodyPairFilter >&
BodyPairFilters::bodypairs() const {
  // @@protoc_insertion_point(field_list:CreateDOM.BodyPairFilters.bodyPairs)
  return bodypairs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstanceCollection::kCollectionFieldNumber;
const int InstanceCollection::kPoseFieldNumber;
const int InstanceCollection::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstanceCollection::InstanceCollection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.InstanceCollection)
}
InstanceCollection::InstanceCollection(const InstanceCollection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collection().size() > 0) {
    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.has_pose()) {
    pose_ = new ::CreateDOM::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_scale()) {
    scale_ = new ::CreateDOM::Vec3(*from.scale_);
  } else {
    scale_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.InstanceCollection)
}

void InstanceCollection::SharedCtor() {
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(scale_));
  _cached_size_ = 0;
}

InstanceCollection::~InstanceCollection() {
  // @@protoc_insertion_point(destructor:CreateDOM.InstanceCollection)
  SharedDtor();
}

void InstanceCollection::SharedDtor() {
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete scale_;
}

void InstanceCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceCollection::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstanceCollection& InstanceCollection::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

InstanceCollection* InstanceCollection::New(::google::protobuf::Arena* arena) const {
  InstanceCollection* n = new InstanceCollection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstanceCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.InstanceCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) {
    delete scale_;
  }
  scale_ = NULL;
  _internal_metadata_.Clear();
}

bool InstanceCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.InstanceCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string collection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), static_cast<int>(this->collection().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateDOM.InstanceCollection.collection"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Pose pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateDOM.Vec3 scale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.InstanceCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.InstanceCollection)
  return false;
#undef DO_
}

void InstanceCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.InstanceCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), static_cast<int>(this->collection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.InstanceCollection.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collection(), output);
  }

  // .CreateDOM.Pose pose = 2;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  // .CreateDOM.Vec3 scale = 3;
  if (this->has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->scale_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.InstanceCollection)
}

::google::protobuf::uint8* InstanceCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.InstanceCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection = 1;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), static_cast<int>(this->collection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateDOM.InstanceCollection.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collection(), target);
  }

  // .CreateDOM.Pose pose = 2;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, deterministic, target);
  }

  // .CreateDOM.Vec3 scale = 3;
  if (this->has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->scale_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.InstanceCollection)
  return target;
}

size_t InstanceCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.InstanceCollection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string collection = 1;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // .CreateDOM.Pose pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  // .CreateDOM.Vec3 scale = 3;
  if (this->has_scale()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scale_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceCollection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.InstanceCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const InstanceCollection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstanceCollection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.InstanceCollection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.InstanceCollection)
    MergeFrom(*source);
  }
}

void InstanceCollection::MergeFrom(const InstanceCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.InstanceCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.has_pose()) {
    mutable_pose()->::CreateDOM::Pose::MergeFrom(from.pose());
  }
  if (from.has_scale()) {
    mutable_scale()->::CreateDOM::Vec3::MergeFrom(from.scale());
  }
}

void InstanceCollection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.InstanceCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceCollection::CopyFrom(const InstanceCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.InstanceCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceCollection::IsInitialized() const {
  return true;
}

void InstanceCollection::Swap(InstanceCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstanceCollection::InternalSwap(InstanceCollection* other) {
  using std::swap;
  collection_.Swap(&other->collection_);
  swap(pose_, other->pose_);
  swap(scale_, other->scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstanceCollection::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstanceCollection

// string collection = 1;
void InstanceCollection::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InstanceCollection::collection() const {
  // @@protoc_insertion_point(field_get:CreateDOM.InstanceCollection.collection)
  return collection_.GetNoArena();
}
void InstanceCollection::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateDOM.InstanceCollection.collection)
}
#if LANG_CXX11
void InstanceCollection::set_collection(::std::string&& value) {
  
  collection_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDOM.InstanceCollection.collection)
}
#endif
void InstanceCollection::set_collection(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDOM.InstanceCollection.collection)
}
void InstanceCollection::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDOM.InstanceCollection.collection)
}
::std::string* InstanceCollection::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:CreateDOM.InstanceCollection.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InstanceCollection::release_collection() {
  // @@protoc_insertion_point(field_release:CreateDOM.InstanceCollection.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InstanceCollection::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.InstanceCollection.collection)
}

// .CreateDOM.Pose pose = 2;
bool InstanceCollection::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
void InstanceCollection::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::CreateDOM::Pose& InstanceCollection::pose() const {
  const ::CreateDOM::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:CreateDOM.InstanceCollection.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Pose*>(
      &::CreateDOM::_Pose_default_instance_);
}
::CreateDOM::Pose* InstanceCollection::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::CreateDOM::Pose;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.InstanceCollection.pose)
  return pose_;
}
::CreateDOM::Pose* InstanceCollection::release_pose() {
  // @@protoc_insertion_point(field_release:CreateDOM.InstanceCollection.pose)
  
  ::CreateDOM::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void InstanceCollection::set_allocated_pose(::CreateDOM::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.InstanceCollection.pose)
}

// .CreateDOM.Vec3 scale = 3;
bool InstanceCollection::has_scale() const {
  return this != internal_default_instance() && scale_ != NULL;
}
void InstanceCollection::clear_scale() {
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) delete scale_;
  scale_ = NULL;
}
const ::CreateDOM::Vec3& InstanceCollection::scale() const {
  const ::CreateDOM::Vec3* p = scale_;
  // @@protoc_insertion_point(field_get:CreateDOM.InstanceCollection.scale)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Vec3*>(
      &::CreateDOM::_Vec3_default_instance_);
}
::CreateDOM::Vec3* InstanceCollection::mutable_scale() {
  
  if (scale_ == NULL) {
    scale_ = new ::CreateDOM::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.InstanceCollection.scale)
  return scale_;
}
::CreateDOM::Vec3* InstanceCollection::release_scale() {
  // @@protoc_insertion_point(field_release:CreateDOM.InstanceCollection.scale)
  
  ::CreateDOM::Vec3* temp = scale_;
  scale_ = NULL;
  return temp;
}
void InstanceCollection::set_allocated_scale(::CreateDOM::Vec3* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.InstanceCollection.scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Collection::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Collection::Collection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.Collection)
}
Collection::Collection(const Collection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CreateDOM.Collection)
}

void Collection::SharedCtor() {
  _cached_size_ = 0;
}

Collection::~Collection() {
  // @@protoc_insertion_point(destructor:CreateDOM.Collection)
  SharedDtor();
}

void Collection::SharedDtor() {
}

void Collection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Collection::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Collection& Collection::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

Collection* Collection::New(::google::protobuf::Arena* arena) const {
  Collection* n = new Collection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Collection::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.Collection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear();
}

bool Collection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.Collection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CreateDOM.Node nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.Collection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.Collection)
  return false;
#undef DO_
}

void Collection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.Collection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CreateDOM.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.Collection)
}

::google::protobuf::uint8* Collection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.Collection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CreateDOM.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.Collection)
  return target;
}

size_t Collection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.Collection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CreateDOM.Node nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Collection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.Collection)
  GOOGLE_DCHECK_NE(&from, this);
  const Collection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Collection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.Collection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.Collection)
    MergeFrom(*source);
  }
}

void Collection::MergeFrom(const Collection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.Collection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void Collection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.Collection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collection::CopyFrom(const Collection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.Collection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collection::IsInitialized() const {
  return true;
}

void Collection::Swap(Collection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Collection::InternalSwap(Collection* other) {
  using std::swap;
  nodes_.InternalSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Collection::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Collection

// repeated .CreateDOM.Node nodes = 1;
int Collection::nodes_size() const {
  return nodes_.size();
}
void Collection::clear_nodes() {
  nodes_.Clear();
}
const ::CreateDOM::Node& Collection::nodes(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.Collection.nodes)
  return nodes_.Get(index);
}
::CreateDOM::Node* Collection::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:CreateDOM.Collection.nodes)
  return nodes_.Mutable(index);
}
::CreateDOM::Node* Collection::add_nodes() {
  // @@protoc_insertion_point(field_add:CreateDOM.Collection.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::CreateDOM::Node >*
Collection::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.Collection.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::CreateDOM::Node >&
Collection::nodes() const {
  // @@protoc_insertion_point(field_list:CreateDOM.Collection.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scene::kGravityFieldNumber;
const int Scene::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scene::Scene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.Scene)
}
Scene::Scene(const Scene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gravity()) {
    gravity_ = new ::CreateDOM::Vec3(*from.gravity_);
  } else {
    gravity_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CreateDOM.Scene)
}

void Scene::SharedCtor() {
  gravity_ = NULL;
  _cached_size_ = 0;
}

Scene::~Scene() {
  // @@protoc_insertion_point(destructor:CreateDOM.Scene)
  SharedDtor();
}

void Scene::SharedDtor() {
  if (this != internal_default_instance()) delete gravity_;
}

void Scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scene::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scene& Scene::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

Scene* Scene::New(::google::protobuf::Arena* arena) const {
  Scene* n = new Scene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scene::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.Scene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  if (GetArenaNoVirtual() == NULL && gravity_ != NULL) {
    delete gravity_;
  }
  gravity_ = NULL;
  _internal_metadata_.Clear();
}

bool Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.Scene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CreateDOM.Vec3 gravity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gravity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CreateDOM.Node nodes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.Scene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.Scene)
  return false;
#undef DO_
}

void Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.Scene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.Vec3 gravity = 1;
  if (this->has_gravity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->gravity_, output);
  }

  // repeated .CreateDOM.Node nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.Scene)
}

::google::protobuf::uint8* Scene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.Scene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateDOM.Vec3 gravity = 1;
  if (this->has_gravity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->gravity_, deterministic, target);
  }

  // repeated .CreateDOM.Node nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.Scene)
  return target;
}

size_t Scene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.Scene)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CreateDOM.Node nodes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes(static_cast<int>(i)));
    }
  }

  // .CreateDOM.Vec3 gravity = 1;
  if (this->has_gravity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gravity_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.Scene)
  GOOGLE_DCHECK_NE(&from, this);
  const Scene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.Scene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.Scene)
    MergeFrom(*source);
  }
}

void Scene::MergeFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.Scene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from.has_gravity()) {
    mutable_gravity()->::CreateDOM::Vec3::MergeFrom(from.gravity());
  }
}

void Scene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene::CopyFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene::IsInitialized() const {
  return true;
}

void Scene::Swap(Scene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scene::InternalSwap(Scene* other) {
  using std::swap;
  nodes_.InternalSwap(&other->nodes_);
  swap(gravity_, other->gravity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scene::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scene

// .CreateDOM.Vec3 gravity = 1;
bool Scene::has_gravity() const {
  return this != internal_default_instance() && gravity_ != NULL;
}
void Scene::clear_gravity() {
  if (GetArenaNoVirtual() == NULL && gravity_ != NULL) delete gravity_;
  gravity_ = NULL;
}
const ::CreateDOM::Vec3& Scene::gravity() const {
  const ::CreateDOM::Vec3* p = gravity_;
  // @@protoc_insertion_point(field_get:CreateDOM.Scene.gravity)
  return p != NULL ? *p : *reinterpret_cast<const ::CreateDOM::Vec3*>(
      &::CreateDOM::_Vec3_default_instance_);
}
::CreateDOM::Vec3* Scene::mutable_gravity() {
  
  if (gravity_ == NULL) {
    gravity_ = new ::CreateDOM::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:CreateDOM.Scene.gravity)
  return gravity_;
}
::CreateDOM::Vec3* Scene::release_gravity() {
  // @@protoc_insertion_point(field_release:CreateDOM.Scene.gravity)
  
  ::CreateDOM::Vec3* temp = gravity_;
  gravity_ = NULL;
  return temp;
}
void Scene::set_allocated_gravity(::CreateDOM::Vec3* gravity) {
  delete gravity_;
  gravity_ = gravity;
  if (gravity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CreateDOM.Scene.gravity)
}

// repeated .CreateDOM.Node nodes = 2;
int Scene::nodes_size() const {
  return nodes_.size();
}
void Scene::clear_nodes() {
  nodes_.Clear();
}
const ::CreateDOM::Node& Scene::nodes(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.Scene.nodes)
  return nodes_.Get(index);
}
::CreateDOM::Node* Scene::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:CreateDOM.Scene.nodes)
  return nodes_.Mutable(index);
}
::CreateDOM::Node* Scene::add_nodes() {
  // @@protoc_insertion_point(field_add:CreateDOM.Scene.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::CreateDOM::Node >*
Scene::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.Scene.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::CreateDOM::Node >&
Scene::nodes() const {
  // @@protoc_insertion_point(field_list:CreateDOM.Scene.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhysicsDOM::kCollectionsFieldNumber;
const int PhysicsDOM::kScenesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhysicsDOM::PhysicsDOM()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PhysicsDOM_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDOM.PhysicsDOM)
}
PhysicsDOM::PhysicsDOM(const PhysicsDOM& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      collections_(from.collections_),
      scenes_(from.scenes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CreateDOM.PhysicsDOM)
}

void PhysicsDOM::SharedCtor() {
  _cached_size_ = 0;
}

PhysicsDOM::~PhysicsDOM() {
  // @@protoc_insertion_point(destructor:CreateDOM.PhysicsDOM)
  SharedDtor();
}

void PhysicsDOM::SharedDtor() {
}

void PhysicsDOM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhysicsDOM::descriptor() {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhysicsDOM& PhysicsDOM::default_instance() {
  protobuf_PhysicsDOM_2eproto::InitDefaults();
  return *internal_default_instance();
}

PhysicsDOM* PhysicsDOM::New(::google::protobuf::Arena* arena) const {
  PhysicsDOM* n = new PhysicsDOM;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhysicsDOM::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateDOM.PhysicsDOM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collections_.Clear();
  scenes_.Clear();
  _internal_metadata_.Clear();
}

bool PhysicsDOM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDOM.PhysicsDOM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CreateDOM.Node collections = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CreateDOM.Node scenes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scenes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDOM.PhysicsDOM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDOM.PhysicsDOM)
  return false;
#undef DO_
}

void PhysicsDOM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDOM.PhysicsDOM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CreateDOM.Node collections = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->collections(static_cast<int>(i)), output);
  }

  // repeated .CreateDOM.Node scenes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scenes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scenes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDOM.PhysicsDOM)
}

::google::protobuf::uint8* PhysicsDOM::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateDOM.PhysicsDOM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CreateDOM.Node collections = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->collections(static_cast<int>(i)), deterministic, target);
  }

  // repeated .CreateDOM.Node scenes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scenes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->scenes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDOM.PhysicsDOM)
  return target;
}

size_t PhysicsDOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateDOM.PhysicsDOM)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CreateDOM.Node collections = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->collections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collections(static_cast<int>(i)));
    }
  }

  // repeated .CreateDOM.Node scenes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->scenes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhysicsDOM::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateDOM.PhysicsDOM)
  GOOGLE_DCHECK_NE(&from, this);
  const PhysicsDOM* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhysicsDOM>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateDOM.PhysicsDOM)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateDOM.PhysicsDOM)
    MergeFrom(*source);
  }
}

void PhysicsDOM::MergeFrom(const PhysicsDOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateDOM.PhysicsDOM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collections_.MergeFrom(from.collections_);
  scenes_.MergeFrom(from.scenes_);
}

void PhysicsDOM::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateDOM.PhysicsDOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicsDOM::CopyFrom(const PhysicsDOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateDOM.PhysicsDOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicsDOM::IsInitialized() const {
  return true;
}

void PhysicsDOM::Swap(PhysicsDOM* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhysicsDOM::InternalSwap(PhysicsDOM* other) {
  using std::swap;
  collections_.InternalSwap(&other->collections_);
  scenes_.InternalSwap(&other->scenes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhysicsDOM::GetMetadata() const {
  protobuf_PhysicsDOM_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PhysicsDOM_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhysicsDOM

// repeated .CreateDOM.Node collections = 1;
int PhysicsDOM::collections_size() const {
  return collections_.size();
}
void PhysicsDOM::clear_collections() {
  collections_.Clear();
}
const ::CreateDOM::Node& PhysicsDOM::collections(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.PhysicsDOM.collections)
  return collections_.Get(index);
}
::CreateDOM::Node* PhysicsDOM::mutable_collections(int index) {
  // @@protoc_insertion_point(field_mutable:CreateDOM.PhysicsDOM.collections)
  return collections_.Mutable(index);
}
::CreateDOM::Node* PhysicsDOM::add_collections() {
  // @@protoc_insertion_point(field_add:CreateDOM.PhysicsDOM.collections)
  return collections_.Add();
}
::google::protobuf::RepeatedPtrField< ::CreateDOM::Node >*
PhysicsDOM::mutable_collections() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.PhysicsDOM.collections)
  return &collections_;
}
const ::google::protobuf::RepeatedPtrField< ::CreateDOM::Node >&
PhysicsDOM::collections() const {
  // @@protoc_insertion_point(field_list:CreateDOM.PhysicsDOM.collections)
  return collections_;
}

// repeated .CreateDOM.Node scenes = 2;
int PhysicsDOM::scenes_size() const {
  return scenes_.size();
}
void PhysicsDOM::clear_scenes() {
  scenes_.Clear();
}
const ::CreateDOM::Node& PhysicsDOM::scenes(int index) const {
  // @@protoc_insertion_point(field_get:CreateDOM.PhysicsDOM.scenes)
  return scenes_.Get(index);
}
::CreateDOM::Node* PhysicsDOM::mutable_scenes(int index) {
  // @@protoc_insertion_point(field_mutable:CreateDOM.PhysicsDOM.scenes)
  return scenes_.Mutable(index);
}
::CreateDOM::Node* PhysicsDOM::add_scenes() {
  // @@protoc_insertion_point(field_add:CreateDOM.PhysicsDOM.scenes)
  return scenes_.Add();
}
::google::protobuf::RepeatedPtrField< ::CreateDOM::Node >*
PhysicsDOM::mutable_scenes() {
  // @@protoc_insertion_point(field_mutable_list:CreateDOM.PhysicsDOM.scenes)
  return &scenes_;
}
const ::google::protobuf::RepeatedPtrField< ::CreateDOM::Node >&
PhysicsDOM::scenes() const {
  // @@protoc_insertion_point(field_list:CreateDOM.PhysicsDOM.scenes)
  return scenes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace CreateDOM

// @@protoc_insertion_point(global_scope)

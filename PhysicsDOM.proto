// CreateDOM: Schema Generation tool written by John W. Ratcliff, 2017
// Warning:This source file was auto-generated by the CreateDOM tool. Do not try to edit this source file manually!
// The Google DOCs Schema Spreadsheet for this source came from: https://docs.google.com/spreadsheets/d/118I5kdu2XT-6wfCG044937xfEKDyX2oNg04G8Wqi6o0/edit?usp=sharing

// [START declaration]
syntax = "proto3";
package CreateDOM;
// [END declaration]

// [START messages]


// Defines a basic 3d vector type
message Vec3
{
	float x = 1;
	float y = 2;
	float z = 3;
}


// Defines a basic quaternion data type
message Quat
{
	float x = 1;
	float y = 2;
	float z = 3;
	float w = 4;
}


// Defines a basic plane equation
message Plane
{
	Vec3 n = 1;
	float d = 2;
}


// Defines a transform; position and rotation as a quaternion
message Pose
{
	Quat q = 1;
	Vec3 p = 2;
}


// Defines an axis aligned bounding box
message Bounds3
{
	Vec3 bmin = 1;
	Vec3 bmax = 2;
}


// Defines the type of node we are dealing with
enum NodeType
{
	NT_NODE = 0; 						// The base Node class
	NT_PHYSICS_MATERIAL = 1; 			// A physics material
	NT_GEOMETRY_INSTANCE = 2;  			// Defines an instance of a geometry
	NT_TRIANGLEMESH = 3; 				// Defines the contents of a triangle mesh
	NT_CONVEXHULL  = 4;					// Defines the contents of a convex hull
	NT_HEIGHTFIELD  = 5; 				// Defines the contents of a heightfield
	NT_RIGID_BODY = 6;   				// Common properties of both static and dynamic rigid bodies
	NT_RIGID_STATIC = 7; 				// A static rigid body
	NT_RIGID_DYNAMIC = 8;  				// A dynamic rigid body
	NT_BODY_PAIR_FILTERS = 9;  			// A node representing a collection of body pair filters
	NT_JOINT = 10;   					// Base class for a joint
	NT_FIXED_JOINT = 11; 				// A fixed joint
	NT_SPHERICAL_JOINT = 12; 			// A spherical joint
	NT_REVOLUTE_JOINT = 13;				// A revolute joint
	NT_PRISMATIC_JOINT = 14; 			// A prismatic joint
	NT_DISTANCE_JOINT = 15;				// A distance joint
	NT_D6_JOINT = 16;  					// A six degree of freedom joint
	NT_INSTANCE_COLLECTION = 17; 		// Instantiates a collection of nodes
	NT_COLLECTION = 18;					// Defines a collection of nodes
	NT_SCENE = 19;   					// Defines a collection that gets instantiated on startup into a physics scene
}


// Defines an optional visual mesh binding to a physics node
message VisualBinding
{
	string visualName = 1;
	Pose localPose = 2;
	Vec3 localScale = 3;
}


// Base class that specifies a unique ID and an optional description name field for an object
message Node
{
	string id = 1;
	string name = 2;
	NodeType type = 3;
	VisualBinding visual = 4;
	oneof subtype
	{
		PhysicsMaterial physicsMaterial = 5;
		ConvexHull convexHull = 6;
		TriangleMesh triangleMesh = 7;
		HeightField heightField = 8;
		RigidBody rigidBody = 9;
		Joint joint = 10;
		BodyPairFilters bodyPairFilters = 11;
		InstanceCollection instanceCollection = 12;
		Collection collection = 13;
	}

}


// ShortDescription
message MeshScale
{
	Vec3 scale = 1;
	Quat rotation = 2;
}


// Defines the physical material properties of a surface
message PhysicsMaterial
{
	bool disableFriction = 1;
	bool disableStrongFriction = 2;
	float dynamicFriction = 3;
	float staticFriction = 4;
	float restitution = 5;
}


// Describes the data for a convex hull
message ConvexHull
{
	repeated Vec3 points = 1;
}


// Describes the data for a triangle mesh
message TriangleMesh
{
	repeated Vec3 points = 1;
	repeated uint32 triangles = 2;
	repeated uint32 materialIndices = 3;
}


// The data for a heighfield; as 2d array of 32 bit samples; 16 bits for height, 16 bits for material indices, holes, and other metadata
message HeightField
{
	uint32 rowCount = 1;
	uint32 columnCount = 2;
	repeated uint32 samples = 3;
}


enum GeometryType
{
	GT_BOX_GEOMETRY = 0; 				// A basic sphere primitive
	GT_SPHERE_GEOMETRY = 1;				// A plane 
	GT_CAPSULE_GEOMETRY = 2; 			// A capsule
	GT_PLANE_GEOMETRY = 3;   			// A simple box primitive
	GT_CYLINDER_GEOMETRY = 4;  			// A cylinder 
	GT_CONVEXHULL_GEOMETRY = 5;			// A convex hull geometry
	GT_TRIANGLEMESH_GEOMETRY = 6;  		// A triangle mesh (can only be static, not dynamic)
	GT_HEIGHTFIELD_GEOMETRY = 7; 		// A heightfield (can only be static, not dynamic)
}


// Base class for all geometries
message Geometry
{
	GeometryType type = 1;
	oneof subtype
	{
		BoxGeometry boxGeometry = 2;
		SphereGeometry sphereGeometry = 3;
		CapsuleGeometry capsuleGeometry = 4;
		CylinderGeometry cylinderGeometry = 5;
		ConvexHullGeometry convexHullGeometry = 6;
		TriangleMeshGeometry triangleMeshGeometry = 7;
		HeightFieldGeometry heightFieldGeometry = 8;
		PlaneGeometry planeGeometry = 9;
	}

}


// Defines a box geometry
message BoxGeometry
{
	Vec3 dimensions = 1;
}


// Defines a sphere geometry
message SphereGeometry
{
	float radius = 1;
}


// Defines a capsule geometry
message CapsuleGeometry
{
	float radius = 1;
	float height = 2;
}


// Defines a cylinder geometry
message CylinderGeometry
{
	float radius = 1;
	float height = 2;
}


// Defines a convex mesh geometry
message ConvexHullGeometry
{
	MeshScale scale = 1;
	string convexMesh = 2;
}


// Defines a triangle mesh geometry
message TriangleMeshGeometry
{
	MeshScale scale = 1;
	string TriangleMesh = 2;
	bool doubleSided = 3;
}


// Defines a heightfield geometry
message HeightFieldGeometry
{
	string heightField = 1;
	float heightScale = 2;
	float rowScale = 3;
	float columnScale = 4;
	bool doubleSided = 5;
}


// Defines a plane equation geometry (position and orientation of the plane come from the geometry instance)
message PlaneGeometry
{
}


// Defines a single instance of a geometry
message GeometryInstance
{
	Geometry geometry = 1;
	repeated string materials = 2;
	Pose localPose = 3;
	string collisionFilterSettings = 4;
}


// Defines the common properties for a rigid body
message RigidBody
{
	repeated GeometryInstance geometryInstances = 1;
	Pose globalPose = 2;
	oneof subtype
	{
		RigidStatic rigidStatic = 3;
		RigidDynamic rigidDynamic = 4;
	}

}


// Defines a static rigid body
message RigidStatic
{
}


// Defines a dynamic rigid body
message RigidDynamic
{
	bool disableGravity = 1;
	Pose centerOfMassLocalPose = 2;
	float mass = 3;
	Vec3 massSpaceInertiaTensor = 4;
	Vec3 linearVelocity = 5;
	Vec3 angularVelocity = 6;
	float linearDamping = 7;
	float angularDamping = 8;
	float maxAngularVelocity = 9;
	bool kinematic = 10;
}


// Defines the common properties for a joint
message Joint
{
	string body0 = 1;
	string body1 = 2;
	Pose localpose0 = 3;
	Pose localpose1 = 4;
	bool collisionEnabled = 5;
	oneof subtype
	{
		FixedJoint fixedJoint = 6;
	}

}


message FixedJoint
{
	float projectionLinearTolerance = 1;
	float projectionAngularTolerance = 2;
}


// Defines two bodies, by id, that should not collide with each other
message BodyPairFilter
{
	string bodyA = 1;
	string bodyB  = 2;
}


// A collection of body pair filters
message BodyPairFilters
{
	repeated BodyPairFilter bodyPairs = 1;
}


message InstanceCollection
{
	string collection = 1;
	Pose pose = 2;
	Vec3 scale = 3;
}


// A collection of nodes
message Collection
{
	repeated Node nodes = 1;
	oneof subtype
	{
		Scene scene = 2;
	}

}


// A special type of 'collection' which is instantiated on startup
message Scene
{
	Vec3 gravity = 1;
}


// The root node container
message PhysicsDOM
{
	repeated Collection collections = 1;
	repeated Scene scenes = 2;
}


// [END messages]


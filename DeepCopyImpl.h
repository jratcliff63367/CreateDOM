#ifndef DEEPCOPY_IMPL_H
#define DEEPCOPY_IMPL_H

// CreateDOM: Schema Generation tool written by John W. Ratcliff, 2017
// Warning:This source file was auto-generated by the CreateDOM tool. Do not try to edit this source file manually!
// The Google DOCs Schema Spreadsheet for this source came from: https://docs.google.com/spreadsheets/d/118I5kdu2XT-6wfCG044937xfEKDyX2oNg04G8Wqi6o0/edit?usp=sharing

#include "DeepCopy.h"
#include <string>
#include <vector>
#include <stdint.h>


namespace DEEP_COPY
{


// Base class for all geometries
class GeometryImpl: public Geometry
{
public:

	// Declare the deep copy constructor; handles copying pointers and pointer arrays
	GeometryImpl(const GeometryImpl &other)
	{
		*this = other;
	}


	// Declare the virtual clone method using a deep copy
	virtual CloneObject* clone() const
	{
		return new GeometryImpl(*this);
	}

	// Declare and implement the deep copy assignment operator
	GeometryImpl& operator=(const GeometryImpl& other)
	{
		if (this != &other )
		{
		}
		return *this;
	}


	// Declare the move constructor; handles copying pointers and pointer arrays
	GeometryImpl(GeometryImpl &&other)
	{
		*this = std::move(other);
	}

	// Declare and implement the move assignment operator
	GeometryImpl& operator=(GeometryImpl&& other)
	{
		if (this != &other )
		{
		}
		return *this;
	}

};


// Defines a box geometry
class BoxGeometryImpl: public BoxGeometry
{
public:
	// Declare the constructor.
	BoxGeometryImpl()
	{
	}


	// Declare the virtual destructor.
	virtual ~BoxGeometryImpl()
	{
	}


	// Declare the deep copy constructor; handles copying pointers and pointer arrays
	BoxGeometryImpl(const BoxGeometryImpl &other)
	{
		*this = other;
	}


	// Declare the virtual clone method using a deep copy
	virtual CloneObject* clone() const override
	{
		return new BoxGeometryImpl(*this);
	}

	// Declare and implement the deep copy assignment operator
	BoxGeometryImpl& operator=(const BoxGeometryImpl& other)
	{
		if (this != &other )
		{
			Geometry::operator=(other);
		}
		return *this;
	}


	// Declare the move constructor; handles copying pointers and pointer arrays
	BoxGeometryImpl(BoxGeometryImpl &&other)
	{
		*this = std::move(other);
	}

	// Declare and implement the move assignment operator
	BoxGeometryImpl& operator=(BoxGeometryImpl&& other)
	{
		if (this != &other )
		{
			Geometry::operator=(std::move(other));
		}
		return *this;
	}

};


// Defines a sphere geometry
class SphereGeometryImpl: public SphereGeometry
{
public:
	// Declare the constructor.
	SphereGeometryImpl()
	{
	}


	// Declare the virtual destructor.
	virtual ~SphereGeometryImpl()
	{
	}


	// Declare the deep copy constructor; handles copying pointers and pointer arrays
	SphereGeometryImpl(const SphereGeometryImpl &other)
	{
		*this = other;
	}


	// Declare the virtual clone method using a deep copy
	virtual CloneObject* clone() const override
	{
		return new SphereGeometryImpl(*this);
	}

	// Declare and implement the deep copy assignment operator
	SphereGeometryImpl& operator=(const SphereGeometryImpl& other)
	{
		if (this != &other )
		{
			Geometry::operator=(other);
		}
		return *this;
	}


	// Declare the move constructor; handles copying pointers and pointer arrays
	SphereGeometryImpl(SphereGeometryImpl &&other)
	{
		*this = std::move(other);
	}

	// Declare and implement the move assignment operator
	SphereGeometryImpl& operator=(SphereGeometryImpl&& other)
	{
		if (this != &other )
		{
			Geometry::operator=(std::move(other));
		}
		return *this;
	}

};

typedef std::vector< Geometry *> GeometryVector; // Forward declare the 'Geometry' vector for the implementation object pointers

// Defines a single instance of a geometry
class GeometryInstanceImpl: public GeometryInstance
{
public:

	// Declare the constructor.
	GeometryInstanceImpl() { }


	// Declare the virtual destructor; cleanup any pointers or arrays of pointers
	virtual ~GeometryInstanceImpl()
	{
		for (auto &i:mGeometries) delete i; // Delete all of the object pointers in this array
	}


	// Declare the deep copy constructor; handles copying pointers and pointer arrays
	GeometryInstanceImpl(const GeometryInstanceImpl &other)
	{
		*this = other;
	}


	// Declare the virtual clone method using a deep copy
	virtual CloneObject* clone() const
	{
		return new GeometryInstanceImpl(*this);
	}

	// Declare and implement the deep copy assignment operator
	GeometryInstanceImpl& operator=(const GeometryInstanceImpl& other)
	{
		if (this != &other )
		{
			for (auto &i:mGeometries) delete i; // Delete all of the object pointers in this array
			mGeometries.clear(); // Clear the current array
			mGeometries.reserve(other.mGeometries.size()); // Reserve number of items for the new array
			for (auto &i:other.mGeometries) mGeometries.push_back( static_cast< GeometryImpl *>(i->clone())); // Deep copy object pointers into the array
		}
		return *this;
	}


	// Declare the move constructor; handles copying pointers and pointer arrays
	GeometryInstanceImpl(GeometryInstanceImpl &&other)
	{
		*this = std::move(other);
	}

	// Declare and implement the move assignment operator
	GeometryInstanceImpl& operator=(GeometryInstanceImpl&& other)
	{
		if (this != &other )
		{
			mGeometries = other.mGeometries;
			other.mGeometries.clear(); // Clear the 'other' array now that we have moved it
		}
		return *this;
	}

	GeometryVector   mGeometries;  								// The geometry associated with this instance
};



} // End of DEEP_COPY namespace

#endif // End of Geometry
